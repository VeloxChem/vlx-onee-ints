
    // S-S block

    #pragma omp parallel for schedule(static, PAD_SIZE)
    for (int ij = 0; ij < ss_prim_pair_count; ij++)
    {
        const auto thread_id = omp_get_thread_num();

        const auto i = std::get<0>(pair_inds_ss[ij]);
        const auto j = std::get<1>(pair_inds_ss[ij]);

        const auto a_i = s_prim_info[i + s_prim_count * 0];
        const auto c_i = s_prim_info[i + s_prim_count * 1];
        const auto x_i = s_prim_info[i + s_prim_count * 2];
        const auto y_i = s_prim_info[i + s_prim_count * 3];
        const auto z_i = s_prim_info[i + s_prim_count * 4];

        const auto a_j = s_prim_info[j + s_prim_count * 0];
        const auto c_j = s_prim_info[j + s_prim_count * 1];
        const auto x_j = s_prim_info[j + s_prim_count * 2];
        const auto y_j = s_prim_info[j + s_prim_count * 3];
        const auto z_j = s_prim_info[j + s_prim_count * 4];



        const auto i_cgto = s_prim_aoinds[i];
        const auto j_cgto = s_prim_aoinds[j];

        const auto i_atom = cart_ao_to_atom_ids[i_cgto];
        const auto j_atom = cart_ao_to_atom_ids[j_cgto];

        const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};

        const auto r2_ij = rij[0] * rij[0] + rij[1] * rij[1] + rij[2] * rij[2];

        const auto S_ij_00 = c_i * c_j * std::pow(MATH_CONST_PI / (a_i + a_j), 1.5) * std::exp(-a_i * a_j / (a_i + a_j) * r2_ij);

        const double PC[3] = {(a_i * x_i + a_j * x_j) / (a_i + a_j) - origin[0],
                              (a_i * y_i + a_j * y_j) / (a_i + a_j) - origin[1],
                              (a_i * z_i + a_j * z_j) / (a_i + a_j) - origin[2]};




        // J. Chem. Phys. 84, 3963-3974 (1986)

        // loop over electric dipole components
        for (int m = 0; m < 3; m++)
        {
            // loop over gradient components
            for (int n = 0; n < 3; n++)
            {
                const auto PA_n = (a_j / (a_i + a_j)) * rij[n];
                const auto PB_n = (-a_i / (a_i + a_j)) * rij[n];

                // Note: minus sign from electron charge

                double mu_grad_i = (-1.0) * S_ij_00 * (

                    (

                        1.0 / (a_i + a_j) * a_i * (
                            delta[m][n]
                        )

                    )

                    + PC[m] * (

                        2.0 * a_i * (
                            PA_n
                        )

                    )

                );

                // Note: minus sign from electron charge

                double mu_grad_j = (-1.0) * S_ij_00 * (

                    (

                        1.0 / (a_i + a_j) * a_j * (
                            delta[m][n]
                        )

                    )

                    + PC[m] * (

                        2.0 * a_j * (
                            PB_n
                        )

                    )

                );

                {
                    auto i_cgto_sph = i_cgto;
                    double i_coef_sph = 1.0;

                    {
                        auto j_cgto_sph = j_cgto;
                        double j_coef_sph = 1.0;

                        auto coef_sph = i_coef_sph * j_coef_sph;

                        auto Dij = D[i_cgto_sph * naos + j_cgto_sph];
                        auto Dji = D[j_cgto_sph * naos + i_cgto_sph];

                        double D_sym = ((i == j) ? Dij : (Dij + Dji));

                        double grad_i = mu_grad_i * coef_sph * D_sym;
                        double grad_j = mu_grad_j * coef_sph * D_sym;

                        mu_grad_omp[thread_id][m].row(i_atom)[n] += grad_i;
                        mu_grad_omp[thread_id][m].row(j_atom)[n] += grad_j;
                    }
                }
            }
        }
    }


    // S-P block

    #pragma omp parallel for schedule(static, PAD_SIZE)
    for (int ij = 0; ij < sp_prim_pair_count; ij++)
    {
        const auto thread_id = omp_get_thread_num();

        const auto i = std::get<0>(pair_inds_sp[ij]);
        const auto j = std::get<1>(pair_inds_sp[ij]);

        const auto a_i = s_prim_info[i + s_prim_count * 0];
        const auto c_i = s_prim_info[i + s_prim_count * 1];
        const auto x_i = s_prim_info[i + s_prim_count * 2];
        const auto y_i = s_prim_info[i + s_prim_count * 3];
        const auto z_i = s_prim_info[i + s_prim_count * 4];

        const auto a_j = p_prim_info[j / 3 + p_prim_count * 0];
        const auto c_j = p_prim_info[j / 3 + p_prim_count * 1];
        const auto x_j = p_prim_info[j / 3 + p_prim_count * 2];
        const auto y_j = p_prim_info[j / 3 + p_prim_count * 3];
        const auto z_j = p_prim_info[j / 3 + p_prim_count * 4];


        const auto b0 = j % 3;

        const auto i_cgto = s_prim_aoinds[i];
        const auto j_cgto = p_prim_aoinds[(j / 3) + p_prim_count * (j % 3)];

        const auto i_atom = cart_ao_to_atom_ids[i_cgto];
        const auto j_atom = cart_ao_to_atom_ids[j_cgto];

        const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};

        const auto r2_ij = rij[0] * rij[0] + rij[1] * rij[1] + rij[2] * rij[2];

        const auto S_ij_00 = c_i * c_j * std::pow(MATH_CONST_PI / (a_i + a_j), 1.5) * std::exp(-a_i * a_j / (a_i + a_j) * r2_ij);

        const double PC[3] = {(a_i * x_i + a_j * x_j) / (a_i + a_j) - origin[0],
                              (a_i * y_i + a_j * y_j) / (a_i + a_j) - origin[1],
                              (a_i * z_i + a_j * z_j) / (a_i + a_j) - origin[2]};


        const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];


        // J. Chem. Phys. 84, 3963-3974 (1986)

        // loop over electric dipole components
        for (int m = 0; m < 3; m++)
        {
            // loop over gradient components
            for (int n = 0; n < 3; n++)
            {
                const auto PA_n = (a_j / (a_i + a_j)) * rij[n];
                const auto PB_n = (-a_i / (a_i + a_j)) * rij[n];

                // Note: minus sign from electron charge

                double mu_grad_i = (-1.0) * S_ij_00 * (

                    (

                        1.0 / (a_i + a_j) * a_i * (
                            delta[b0][m] * (PA_n)
                            + delta[m][n] * (PB_0)
                        )

                    )

                    + PC[m] * (

                        1.0 / (a_i + a_j) * a_i * (
                            delta[b0][n]
                        )

                        + 2.0 * a_i * (
                            PA_n * PB_0
                        )

                    )

                );

                // Note: minus sign from electron charge

                double mu_grad_j = (-1.0) * S_ij_00 * (

                    (

                        1.0 / (a_i + a_j) * a_j * (
                            delta[m][n] * (PB_0)
                            + delta[b0][m] * (PB_n)
                        )

                    )

                    + PC[m] * (

                        (-1.0) * (
                            delta[b0][n]
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[b0][n]
                        )

                        + 2.0 * a_j * (
                            PB_0 * PB_n
                        )

                    )

                );

                {
                    auto i_cgto_sph = i_cgto;
                    double i_coef_sph = 1.0;

                    for (const auto& j_cgto_sph_ind_coef : cart_sph_p[j_cgto])
                    {
                        auto j_cgto_sph = j_cgto_sph_ind_coef.first;
                        auto j_coef_sph = j_cgto_sph_ind_coef.second;

                        auto coef_sph = i_coef_sph * j_coef_sph;

                        auto Dij = D[i_cgto_sph * naos + j_cgto_sph];
                        auto Dji = D[j_cgto_sph * naos + i_cgto_sph];

                        double D_sym = (Dij + Dji);

                        double grad_i = mu_grad_i * coef_sph * D_sym;
                        double grad_j = mu_grad_j * coef_sph * D_sym;

                        mu_grad_omp[thread_id][m].row(i_atom)[n] += grad_i;
                        mu_grad_omp[thread_id][m].row(j_atom)[n] += grad_j;
                    }
                }
            }
        }
    }


    // S-D block

    #pragma omp parallel for schedule(static, PAD_SIZE)
    for (int ij = 0; ij < sd_prim_pair_count; ij++)
    {
        const auto thread_id = omp_get_thread_num();

        const auto i = std::get<0>(pair_inds_sd[ij]);
        const auto j = std::get<1>(pair_inds_sd[ij]);

        const auto a_i = s_prim_info[i + s_prim_count * 0];
        const auto c_i = s_prim_info[i + s_prim_count * 1];
        const auto x_i = s_prim_info[i + s_prim_count * 2];
        const auto y_i = s_prim_info[i + s_prim_count * 3];
        const auto z_i = s_prim_info[i + s_prim_count * 4];

        const auto a_j = d_prim_info[j / 6 + d_prim_count * 0];
        const auto c_j = d_prim_info[j / 6 + d_prim_count * 1];
        const auto x_j = d_prim_info[j / 6 + d_prim_count * 2];
        const auto y_j = d_prim_info[j / 6 + d_prim_count * 3];
        const auto z_j = d_prim_info[j / 6 + d_prim_count * 4];


        const auto b0 = d_cart_inds[j % 6][0];
        const auto b1 = d_cart_inds[j % 6][1];

        const auto i_cgto = s_prim_aoinds[i];
        const auto j_cgto = d_prim_aoinds[(j / 6) + d_prim_count * (j % 6)];

        const auto i_atom = cart_ao_to_atom_ids[i_cgto];
        const auto j_atom = cart_ao_to_atom_ids[j_cgto];

        const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};

        const auto r2_ij = rij[0] * rij[0] + rij[1] * rij[1] + rij[2] * rij[2];

        const auto S_ij_00 = c_i * c_j * std::pow(MATH_CONST_PI / (a_i + a_j), 1.5) * std::exp(-a_i * a_j / (a_i + a_j) * r2_ij);

        const double PC[3] = {(a_i * x_i + a_j * x_j) / (a_i + a_j) - origin[0],
                              (a_i * y_i + a_j * y_j) / (a_i + a_j) - origin[1],
                              (a_i * z_i + a_j * z_j) / (a_i + a_j) - origin[2]};


        const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
        const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];


        // J. Chem. Phys. 84, 3963-3974 (1986)

        // loop over electric dipole components
        for (int m = 0; m < 3; m++)
        {
            // loop over gradient components
            for (int n = 0; n < 3; n++)
            {
                const auto PA_n = (a_j / (a_i + a_j)) * rij[n];
                const auto PB_n = (-a_i / (a_i + a_j)) * rij[n];

                // Note: minus sign from electron charge

                double mu_grad_i = (-1.0) * S_ij_00 * (

                    (

                        0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[b0][b1] * delta[m][n] + delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m])
                        )

                        + 1.0 / (a_i + a_j) * a_i * (
                            delta[b1][m] * (PA_n * PB_0)
                            + delta[b0][m] * (PA_n * PB_1)
                            + delta[m][n] * (PB_0 * PB_1)
                        )

                    )

                    + PC[m] * (

                        1.0 / (a_i + a_j) * a_i * (
                            delta[b0][b1] * (PA_n)
                            + delta[b1][n] * (PB_0)
                            + delta[b0][n] * (PB_1)
                        )

                        + 2.0 * a_i * (
                            PA_n * PB_0 * PB_1
                        )

                    )

                );

                // Note: minus sign from electron charge

                double mu_grad_j = (-1.0) * S_ij_00 * (

                    (

                        (-0.5) / (a_i + a_j) * (
                            (delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m])
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[b0][b1] * delta[m][n] + delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m])
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[m][n] * (PB_0 * PB_1)
                            + delta[b1][m] * (PB_0 * PB_n)
                            + delta[b0][m] * (PB_1 * PB_n)
                        )

                    )

                    + PC[m] * (

                        (-1.0) * (
                            delta[b1][n] * (PB_0)
                            + delta[b0][n] * (PB_1)
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[b1][n] * (PB_0)
                            + delta[b0][n] * (PB_1)
                            + delta[b0][b1] * (PB_n)
                        )

                        + 2.0 * a_j * (
                            PB_0 * PB_1 * PB_n
                        )

                    )

                );

                {
                    auto i_cgto_sph = i_cgto;
                    double i_coef_sph = 1.0;

                    for (const auto& j_cgto_sph_ind_coef : cart_sph_d[j_cgto])
                    {
                        auto j_cgto_sph = j_cgto_sph_ind_coef.first;
                        auto j_coef_sph = j_cgto_sph_ind_coef.second;

                        auto coef_sph = i_coef_sph * j_coef_sph;

                        auto Dij = D[i_cgto_sph * naos + j_cgto_sph];
                        auto Dji = D[j_cgto_sph * naos + i_cgto_sph];

                        double D_sym = (Dij + Dji);

                        double grad_i = mu_grad_i * coef_sph * D_sym;
                        double grad_j = mu_grad_j * coef_sph * D_sym;

                        mu_grad_omp[thread_id][m].row(i_atom)[n] += grad_i;
                        mu_grad_omp[thread_id][m].row(j_atom)[n] += grad_j;
                    }
                }
            }
        }
    }


    // S-F block

    #pragma omp parallel for schedule(static, PAD_SIZE)
    for (int ij = 0; ij < sf_prim_pair_count; ij++)
    {
        const auto thread_id = omp_get_thread_num();

        const auto i = std::get<0>(pair_inds_sf[ij]);
        const auto j = std::get<1>(pair_inds_sf[ij]);

        const auto a_i = s_prim_info[i + s_prim_count * 0];
        const auto c_i = s_prim_info[i + s_prim_count * 1];
        const auto x_i = s_prim_info[i + s_prim_count * 2];
        const auto y_i = s_prim_info[i + s_prim_count * 3];
        const auto z_i = s_prim_info[i + s_prim_count * 4];

        const auto a_j = f_prim_info[j / 10 + f_prim_count * 0];
        const auto c_j = f_prim_info[j / 10 + f_prim_count * 1];
        const auto x_j = f_prim_info[j / 10 + f_prim_count * 2];
        const auto y_j = f_prim_info[j / 10 + f_prim_count * 3];
        const auto z_j = f_prim_info[j / 10 + f_prim_count * 4];


        const auto b0 = f_cart_inds[j % 10][0];
        const auto b1 = f_cart_inds[j % 10][1];
        const auto b2 = f_cart_inds[j % 10][2];

        const auto i_cgto = s_prim_aoinds[i];
        const auto j_cgto = f_prim_aoinds[(j / 10) + f_prim_count * (j % 10)];

        const auto i_atom = cart_ao_to_atom_ids[i_cgto];
        const auto j_atom = cart_ao_to_atom_ids[j_cgto];

        const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};

        const auto r2_ij = rij[0] * rij[0] + rij[1] * rij[1] + rij[2] * rij[2];

        const auto S_ij_00 = c_i * c_j * std::pow(MATH_CONST_PI / (a_i + a_j), 1.5) * std::exp(-a_i * a_j / (a_i + a_j) * r2_ij);

        const double PC[3] = {(a_i * x_i + a_j * x_j) / (a_i + a_j) - origin[0],
                              (a_i * y_i + a_j * y_j) / (a_i + a_j) - origin[1],
                              (a_i * z_i + a_j * z_j) / (a_i + a_j) - origin[2]};


        const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
        const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
        const auto PB_2 = (-a_i / (a_i + a_j)) * rij[b2];


        // J. Chem. Phys. 84, 3963-3974 (1986)

        // loop over electric dipole components
        for (int m = 0; m < 3; m++)
        {
            // loop over gradient components
            for (int n = 0; n < 3; n++)
            {
                const auto PA_n = (a_j / (a_i + a_j)) * rij[n];
                const auto PB_n = (-a_i / (a_i + a_j)) * rij[n];

                // Note: minus sign from electron charge

                double mu_grad_i = (-1.0) * S_ij_00 * (

                    (

                        0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[b0][b1] * delta[b2][m] + delta[b0][b2] * delta[b1][m] + delta[b0][m] * delta[b1][b2]) * (PA_n)
                            + (delta[b1][b2] * delta[m][n] + delta[b1][m] * delta[b2][n] + delta[b1][n] * delta[b2][m]) * (PB_0)
                            + (delta[b0][b2] * delta[m][n] + delta[b0][m] * delta[b2][n] + delta[b0][n] * delta[b2][m]) * (PB_1)
                            + (delta[b0][b1] * delta[m][n] + delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PB_2)
                        )

                        + 1.0 / (a_i + a_j) * a_i * (
                            delta[b2][m] * (PA_n * PB_0 * PB_1)
                            + delta[b1][m] * (PA_n * PB_0 * PB_2)
                            + delta[b0][m] * (PA_n * PB_1 * PB_2)
                            + delta[m][n] * (PB_0 * PB_1 * PB_2)
                        )

                    )

                    + PC[m] * (

                        0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[b0][b1] * delta[b2][n] + delta[b0][b2] * delta[b1][n] + delta[b0][n] * delta[b1][b2])
                        )

                        + 1.0 / (a_i + a_j) * a_i * (
                            delta[b1][b2] * (PA_n * PB_0)
                            + delta[b0][b2] * (PA_n * PB_1)
                            + delta[b0][b1] * (PA_n * PB_2)
                            + delta[b2][n] * (PB_0 * PB_1)
                            + delta[b1][n] * (PB_0 * PB_2)
                            + delta[b0][n] * (PB_1 * PB_2)
                        )

                        + 2.0 * a_i * (
                            PA_n * PB_0 * PB_1 * PB_2
                        )

                    )

                );

                // Note: minus sign from electron charge

                double mu_grad_j = (-1.0) * S_ij_00 * (

                    (

                        (-0.5) / (a_i + a_j) * (
                            (delta[b1][m] * delta[b2][n] + delta[b1][n] * delta[b2][m]) * (PB_0)
                            + (delta[b0][m] * delta[b2][n] + delta[b0][n] * delta[b2][m]) * (PB_1)
                            + (delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PB_2)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[b1][b2] * delta[m][n] + delta[b1][m] * delta[b2][n] + delta[b1][n] * delta[b2][m]) * (PB_0)
                            + (delta[b0][b2] * delta[m][n] + delta[b0][m] * delta[b2][n] + delta[b0][n] * delta[b2][m]) * (PB_1)
                            + (delta[b0][b1] * delta[m][n] + delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PB_2)
                            + (delta[b0][b1] * delta[b2][m] + delta[b0][b2] * delta[b1][m] + delta[b0][m] * delta[b1][b2]) * (PB_n)
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[m][n] * (PB_0 * PB_1 * PB_2)
                            + delta[b2][m] * (PB_0 * PB_1 * PB_n)
                            + delta[b1][m] * (PB_0 * PB_2 * PB_n)
                            + delta[b0][m] * (PB_1 * PB_2 * PB_n)
                        )

                    )

                    + PC[m] * (

                        (-0.5) / (a_i + a_j) * (
                            (delta[b0][b1] * delta[b2][n] + delta[b0][b2] * delta[b1][n] + delta[b0][n] * delta[b1][b2])
                        )

                        + (-1.0) * (
                            delta[b2][n] * (PB_0 * PB_1)
                            + delta[b1][n] * (PB_0 * PB_2)
                            + delta[b0][n] * (PB_1 * PB_2)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[b0][b1] * delta[b2][n] + delta[b0][b2] * delta[b1][n] + delta[b0][n] * delta[b1][b2])
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[b2][n] * (PB_0 * PB_1)
                            + delta[b1][n] * (PB_0 * PB_2)
                            + delta[b1][b2] * (PB_0 * PB_n)
                            + delta[b0][n] * (PB_1 * PB_2)
                            + delta[b0][b2] * (PB_1 * PB_n)
                            + delta[b0][b1] * (PB_2 * PB_n)
                        )

                        + 2.0 * a_j * (
                            PB_0 * PB_1 * PB_2 * PB_n
                        )

                    )

                );

                {
                    auto i_cgto_sph = i_cgto;
                    double i_coef_sph = 1.0;

                    for (const auto& j_cgto_sph_ind_coef : cart_sph_f[j_cgto])
                    {
                        auto j_cgto_sph = j_cgto_sph_ind_coef.first;
                        auto j_coef_sph = j_cgto_sph_ind_coef.second;

                        auto coef_sph = i_coef_sph * j_coef_sph;

                        auto Dij = D[i_cgto_sph * naos + j_cgto_sph];
                        auto Dji = D[j_cgto_sph * naos + i_cgto_sph];

                        double D_sym = (Dij + Dji);

                        double grad_i = mu_grad_i * coef_sph * D_sym;
                        double grad_j = mu_grad_j * coef_sph * D_sym;

                        mu_grad_omp[thread_id][m].row(i_atom)[n] += grad_i;
                        mu_grad_omp[thread_id][m].row(j_atom)[n] += grad_j;
                    }
                }
            }
        }
    }


    // P-P block

    #pragma omp parallel for schedule(static, PAD_SIZE)
    for (int ij = 0; ij < pp_prim_pair_count; ij++)
    {
        const auto thread_id = omp_get_thread_num();

        const auto i = std::get<0>(pair_inds_pp[ij]);
        const auto j = std::get<1>(pair_inds_pp[ij]);

        const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
        const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
        const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
        const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
        const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

        const auto a_j = p_prim_info[j / 3 + p_prim_count * 0];
        const auto c_j = p_prim_info[j / 3 + p_prim_count * 1];
        const auto x_j = p_prim_info[j / 3 + p_prim_count * 2];
        const auto y_j = p_prim_info[j / 3 + p_prim_count * 3];
        const auto z_j = p_prim_info[j / 3 + p_prim_count * 4];

        const auto a0 = i % 3;

        const auto b0 = j % 3;

        const auto i_cgto = p_prim_aoinds[(i / 3) + p_prim_count * (i % 3)];
        const auto j_cgto = p_prim_aoinds[(j / 3) + p_prim_count * (j % 3)];

        const auto i_atom = cart_ao_to_atom_ids[i_cgto];
        const auto j_atom = cart_ao_to_atom_ids[j_cgto];

        const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};

        const auto r2_ij = rij[0] * rij[0] + rij[1] * rij[1] + rij[2] * rij[2];

        const auto S_ij_00 = c_i * c_j * std::pow(MATH_CONST_PI / (a_i + a_j), 1.5) * std::exp(-a_i * a_j / (a_i + a_j) * r2_ij);

        const double PC[3] = {(a_i * x_i + a_j * x_j) / (a_i + a_j) - origin[0],
                              (a_i * y_i + a_j * y_j) / (a_i + a_j) - origin[1],
                              (a_i * z_i + a_j * z_j) / (a_i + a_j) - origin[2]};

        const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];

        const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];


        // J. Chem. Phys. 84, 3963-3974 (1986)

        // loop over electric dipole components
        for (int m = 0; m < 3; m++)
        {
            // loop over gradient components
            for (int n = 0; n < 3; n++)
            {
                const auto PA_n = (a_j / (a_i + a_j)) * rij[n];
                const auto PB_n = (-a_i / (a_i + a_j)) * rij[n];

                // Note: minus sign from electron charge

                double mu_grad_i = (-1.0) * S_ij_00 * (

                    (

                        (-0.5) / (a_i + a_j) * (
                            delta[a0][n] * delta[b0][m]
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[a0][b0] * delta[m][n] + delta[a0][m] * delta[b0][n] + delta[a0][n] * delta[b0][m])
                        )

                        + 1.0 / (a_i + a_j) * a_i * (
                            delta[b0][m] * (PA_0 * PA_n)
                            + delta[m][n] * (PA_0 * PB_0)
                            + delta[a0][m] * (PA_n * PB_0)
                        )

                    )

                    + PC[m] * (

                        (-1.0) * (
                            delta[a0][n] * (PB_0)
                        )

                        + 1.0 / (a_i + a_j) * a_i * (
                            delta[b0][n] * (PA_0)
                            + delta[a0][b0] * (PA_n)
                            + delta[a0][n] * (PB_0)
                        )

                        + 2.0 * a_i * (
                            PA_0 * PA_n * PB_0
                        )

                    )

                );

                // Note: minus sign from electron charge

                double mu_grad_j = (-1.0) * S_ij_00 * (

                    (

                        (-0.5) / (a_i + a_j) * (
                            delta[a0][m] * delta[b0][n]
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[a0][b0] * delta[m][n] + delta[a0][m] * delta[b0][n] + delta[a0][n] * delta[b0][m])
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[m][n] * (PA_0 * PB_0)
                            + delta[b0][m] * (PA_0 * PB_n)
                            + delta[a0][m] * (PB_0 * PB_n)
                        )

                    )

                    + PC[m] * (

                        (-1.0) * (
                            delta[b0][n] * (PA_0)
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[b0][n] * (PA_0)
                            + delta[a0][n] * (PB_0)
                            + delta[a0][b0] * (PB_n)
                        )

                        + 2.0 * a_j * (
                            PA_0 * PB_0 * PB_n
                        )

                    )

                );

                for (const auto& i_cgto_sph_ind_coef : cart_sph_p[i_cgto])
                {
                    auto i_cgto_sph = i_cgto_sph_ind_coef.first;
                    auto i_coef_sph = i_cgto_sph_ind_coef.second;

                    for (const auto& j_cgto_sph_ind_coef : cart_sph_p[j_cgto])
                    {
                        auto j_cgto_sph = j_cgto_sph_ind_coef.first;
                        auto j_coef_sph = j_cgto_sph_ind_coef.second;

                        auto coef_sph = i_coef_sph * j_coef_sph;

                        auto Dij = D[i_cgto_sph * naos + j_cgto_sph];
                        auto Dji = D[j_cgto_sph * naos + i_cgto_sph];

                        double D_sym = ((i == j) ? Dij : (Dij + Dji));

                        double grad_i = mu_grad_i * coef_sph * D_sym;
                        double grad_j = mu_grad_j * coef_sph * D_sym;

                        mu_grad_omp[thread_id][m].row(i_atom)[n] += grad_i;
                        mu_grad_omp[thread_id][m].row(j_atom)[n] += grad_j;
                    }
                }
            }
        }
    }


    // P-D block

    #pragma omp parallel for schedule(static, PAD_SIZE)
    for (int ij = 0; ij < pd_prim_pair_count; ij++)
    {
        const auto thread_id = omp_get_thread_num();

        const auto i = std::get<0>(pair_inds_pd[ij]);
        const auto j = std::get<1>(pair_inds_pd[ij]);

        const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
        const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
        const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
        const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
        const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

        const auto a_j = d_prim_info[j / 6 + d_prim_count * 0];
        const auto c_j = d_prim_info[j / 6 + d_prim_count * 1];
        const auto x_j = d_prim_info[j / 6 + d_prim_count * 2];
        const auto y_j = d_prim_info[j / 6 + d_prim_count * 3];
        const auto z_j = d_prim_info[j / 6 + d_prim_count * 4];

        const auto a0 = i % 3;

        const auto b0 = d_cart_inds[j % 6][0];
        const auto b1 = d_cart_inds[j % 6][1];

        const auto i_cgto = p_prim_aoinds[(i / 3) + p_prim_count * (i % 3)];
        const auto j_cgto = d_prim_aoinds[(j / 6) + d_prim_count * (j % 6)];

        const auto i_atom = cart_ao_to_atom_ids[i_cgto];
        const auto j_atom = cart_ao_to_atom_ids[j_cgto];

        const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};

        const auto r2_ij = rij[0] * rij[0] + rij[1] * rij[1] + rij[2] * rij[2];

        const auto S_ij_00 = c_i * c_j * std::pow(MATH_CONST_PI / (a_i + a_j), 1.5) * std::exp(-a_i * a_j / (a_i + a_j) * r2_ij);

        const double PC[3] = {(a_i * x_i + a_j * x_j) / (a_i + a_j) - origin[0],
                              (a_i * y_i + a_j * y_j) / (a_i + a_j) - origin[1],
                              (a_i * z_i + a_j * z_j) / (a_i + a_j) - origin[2]};

        const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];

        const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
        const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];


        // J. Chem. Phys. 84, 3963-3974 (1986)

        // loop over electric dipole components
        for (int m = 0; m < 3; m++)
        {
            // loop over gradient components
            for (int n = 0; n < 3; n++)
            {
                const auto PA_n = (a_j / (a_i + a_j)) * rij[n];
                const auto PB_n = (-a_i / (a_i + a_j)) * rij[n];

                // Note: minus sign from electron charge

                double mu_grad_i = (-1.0) * S_ij_00 * (

                    (

                        (-0.5) / (a_i + a_j) * (
                            delta[a0][n] * delta[b1][m] * (PB_0)
                            + delta[a0][n] * delta[b0][m] * (PB_1)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[b0][b1] * delta[m][n] + delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PA_0)
                            + (delta[a0][b0] * delta[b1][m] + delta[a0][b1] * delta[b0][m] + delta[a0][m] * delta[b0][b1]) * (PA_n)
                            + (delta[a0][b1] * delta[m][n] + delta[a0][m] * delta[b1][n] + delta[a0][n] * delta[b1][m]) * (PB_0)
                            + (delta[a0][b0] * delta[m][n] + delta[a0][m] * delta[b0][n] + delta[a0][n] * delta[b0][m]) * (PB_1)
                        )

                        + 1.0 / (a_i + a_j) * a_i * (
                            delta[b1][m] * (PA_0 * PA_n * PB_0)
                            + delta[b0][m] * (PA_0 * PA_n * PB_1)
                            + delta[m][n] * (PA_0 * PB_0 * PB_1)
                            + delta[a0][m] * (PA_n * PB_0 * PB_1)
                        )

                    )

                    + PC[m] * (

                        (-0.5) / (a_i + a_j) * (
                            delta[a0][n] * delta[b0][b1]
                        )

                        + (-1.0) * (
                            delta[a0][n] * (PB_0 * PB_1)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[a0][b0] * delta[b1][n] + delta[a0][b1] * delta[b0][n] + delta[a0][n] * delta[b0][b1])
                        )

                        + 1.0 / (a_i + a_j) * a_i * (
                            delta[b0][b1] * (PA_0 * PA_n)
                            + delta[b1][n] * (PA_0 * PB_0)
                            + delta[b0][n] * (PA_0 * PB_1)
                            + delta[a0][b1] * (PA_n * PB_0)
                            + delta[a0][b0] * (PA_n * PB_1)
                            + delta[a0][n] * (PB_0 * PB_1)
                        )

                        + 2.0 * a_i * (
                            PA_0 * PA_n * PB_0 * PB_1
                        )

                    )

                );

                // Note: minus sign from electron charge

                double mu_grad_j = (-1.0) * S_ij_00 * (

                    (

                        (-0.5) / (a_i + a_j) * (
                            (delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PA_0)
                            + delta[a0][m] * delta[b1][n] * (PB_0)
                            + delta[a0][m] * delta[b0][n] * (PB_1)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[b0][b1] * delta[m][n] + delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PA_0)
                            + (delta[a0][b1] * delta[m][n] + delta[a0][m] * delta[b1][n] + delta[a0][n] * delta[b1][m]) * (PB_0)
                            + (delta[a0][b0] * delta[m][n] + delta[a0][m] * delta[b0][n] + delta[a0][n] * delta[b0][m]) * (PB_1)
                            + (delta[a0][b0] * delta[b1][m] + delta[a0][b1] * delta[b0][m] + delta[a0][m] * delta[b0][b1]) * (PB_n)
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[m][n] * (PA_0 * PB_0 * PB_1)
                            + delta[b1][m] * (PA_0 * PB_0 * PB_n)
                            + delta[b0][m] * (PA_0 * PB_1 * PB_n)
                            + delta[a0][m] * (PB_0 * PB_1 * PB_n)
                        )

                    )

                    + PC[m] * (

                        (-0.5) / (a_i + a_j) * (
                            (delta[a0][b0] * delta[b1][n] + delta[a0][b1] * delta[b0][n])
                        )

                        + (-1.0) * (
                            delta[b1][n] * (PA_0 * PB_0)
                            + delta[b0][n] * (PA_0 * PB_1)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[a0][b0] * delta[b1][n] + delta[a0][b1] * delta[b0][n] + delta[a0][n] * delta[b0][b1])
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[b1][n] * (PA_0 * PB_0)
                            + delta[b0][n] * (PA_0 * PB_1)
                            + delta[b0][b1] * (PA_0 * PB_n)
                            + delta[a0][n] * (PB_0 * PB_1)
                            + delta[a0][b1] * (PB_0 * PB_n)
                            + delta[a0][b0] * (PB_1 * PB_n)
                        )

                        + 2.0 * a_j * (
                            PA_0 * PB_0 * PB_1 * PB_n
                        )

                    )

                );

                for (const auto& i_cgto_sph_ind_coef : cart_sph_p[i_cgto])
                {
                    auto i_cgto_sph = i_cgto_sph_ind_coef.first;
                    auto i_coef_sph = i_cgto_sph_ind_coef.second;

                    for (const auto& j_cgto_sph_ind_coef : cart_sph_d[j_cgto])
                    {
                        auto j_cgto_sph = j_cgto_sph_ind_coef.first;
                        auto j_coef_sph = j_cgto_sph_ind_coef.second;

                        auto coef_sph = i_coef_sph * j_coef_sph;

                        auto Dij = D[i_cgto_sph * naos + j_cgto_sph];
                        auto Dji = D[j_cgto_sph * naos + i_cgto_sph];

                        double D_sym = (Dij + Dji);

                        double grad_i = mu_grad_i * coef_sph * D_sym;
                        double grad_j = mu_grad_j * coef_sph * D_sym;

                        mu_grad_omp[thread_id][m].row(i_atom)[n] += grad_i;
                        mu_grad_omp[thread_id][m].row(j_atom)[n] += grad_j;
                    }
                }
            }
        }
    }


    // P-F block

    #pragma omp parallel for schedule(static, PAD_SIZE)
    for (int ij = 0; ij < pf_prim_pair_count; ij++)
    {
        const auto thread_id = omp_get_thread_num();

        const auto i = std::get<0>(pair_inds_pf[ij]);
        const auto j = std::get<1>(pair_inds_pf[ij]);

        const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
        const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
        const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
        const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
        const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

        const auto a_j = f_prim_info[j / 10 + f_prim_count * 0];
        const auto c_j = f_prim_info[j / 10 + f_prim_count * 1];
        const auto x_j = f_prim_info[j / 10 + f_prim_count * 2];
        const auto y_j = f_prim_info[j / 10 + f_prim_count * 3];
        const auto z_j = f_prim_info[j / 10 + f_prim_count * 4];

        const auto a0 = i % 3;

        const auto b0 = f_cart_inds[j % 10][0];
        const auto b1 = f_cart_inds[j % 10][1];
        const auto b2 = f_cart_inds[j % 10][2];

        const auto i_cgto = p_prim_aoinds[(i / 3) + p_prim_count * (i % 3)];
        const auto j_cgto = f_prim_aoinds[(j / 10) + f_prim_count * (j % 10)];

        const auto i_atom = cart_ao_to_atom_ids[i_cgto];
        const auto j_atom = cart_ao_to_atom_ids[j_cgto];

        const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};

        const auto r2_ij = rij[0] * rij[0] + rij[1] * rij[1] + rij[2] * rij[2];

        const auto S_ij_00 = c_i * c_j * std::pow(MATH_CONST_PI / (a_i + a_j), 1.5) * std::exp(-a_i * a_j / (a_i + a_j) * r2_ij);

        const double PC[3] = {(a_i * x_i + a_j * x_j) / (a_i + a_j) - origin[0],
                              (a_i * y_i + a_j * y_j) / (a_i + a_j) - origin[1],
                              (a_i * z_i + a_j * z_j) / (a_i + a_j) - origin[2]};

        const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];

        const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
        const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
        const auto PB_2 = (-a_i / (a_i + a_j)) * rij[b2];


        // J. Chem. Phys. 84, 3963-3974 (1986)

        // loop over electric dipole components
        for (int m = 0; m < 3; m++)
        {
            // loop over gradient components
            for (int n = 0; n < 3; n++)
            {
                const auto PA_n = (a_j / (a_i + a_j)) * rij[n];
                const auto PB_n = (-a_i / (a_i + a_j)) * rij[n];

                // Note: minus sign from electron charge

                double mu_grad_i = (-1.0) * S_ij_00 * (

                    (

                        (-0.25) / ( (a_i + a_j) * (a_i + a_j) ) * (
                            (delta[a0][n] * delta[b0][b1] * delta[b2][m] + delta[a0][n] * delta[b0][b2] * delta[b1][m] + delta[a0][n] * delta[b0][m] * delta[b1][b2])
                        )

                        + (-0.5) / (a_i + a_j) * (
                            delta[a0][n] * delta[b2][m] * (PB_0 * PB_1)
                            + delta[a0][n] * delta[b1][m] * (PB_0 * PB_2)
                            + delta[a0][n] * delta[b0][m] * (PB_1 * PB_2)
                        )

                        + 0.25 / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[a0][b0] * delta[b1][b2] * delta[m][n] + delta[a0][b0] * delta[b1][m] * delta[b2][n] + delta[a0][b0] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[b0][b2] * delta[m][n] + delta[a0][b1] * delta[b0][m] * delta[b2][n] + delta[a0][b1] * delta[b0][n] * delta[b2][m] + delta[a0][b2] * delta[b0][b1] * delta[m][n] + delta[a0][b2] * delta[b0][m] * delta[b1][n] + delta[a0][b2] * delta[b0][n] * delta[b1][m] + delta[a0][m] * delta[b0][b1] * delta[b2][n] + delta[a0][m] * delta[b0][b2] * delta[b1][n] + delta[a0][m] * delta[b0][n] * delta[b1][b2] + delta[a0][n] * delta[b0][b1] * delta[b2][m] + delta[a0][n] * delta[b0][b2] * delta[b1][m] + delta[a0][n] * delta[b0][m] * delta[b1][b2])
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[b0][b1] * delta[b2][m] + delta[b0][b2] * delta[b1][m] + delta[b0][m] * delta[b1][b2]) * (PA_0 * PA_n)
                            + (delta[b1][b2] * delta[m][n] + delta[b1][m] * delta[b2][n] + delta[b1][n] * delta[b2][m]) * (PA_0 * PB_0)
                            + (delta[b0][b2] * delta[m][n] + delta[b0][m] * delta[b2][n] + delta[b0][n] * delta[b2][m]) * (PA_0 * PB_1)
                            + (delta[b0][b1] * delta[m][n] + delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PA_0 * PB_2)
                            + (delta[a0][b1] * delta[b2][m] + delta[a0][b2] * delta[b1][m] + delta[a0][m] * delta[b1][b2]) * (PA_n * PB_0)
                            + (delta[a0][b0] * delta[b2][m] + delta[a0][b2] * delta[b0][m] + delta[a0][m] * delta[b0][b2]) * (PA_n * PB_1)
                            + (delta[a0][b0] * delta[b1][m] + delta[a0][b1] * delta[b0][m] + delta[a0][m] * delta[b0][b1]) * (PA_n * PB_2)
                            + (delta[a0][b2] * delta[m][n] + delta[a0][m] * delta[b2][n] + delta[a0][n] * delta[b2][m]) * (PB_0 * PB_1)
                            + (delta[a0][b1] * delta[m][n] + delta[a0][m] * delta[b1][n] + delta[a0][n] * delta[b1][m]) * (PB_0 * PB_2)
                            + (delta[a0][b0] * delta[m][n] + delta[a0][m] * delta[b0][n] + delta[a0][n] * delta[b0][m]) * (PB_1 * PB_2)
                        )

                        + 1.0 / (a_i + a_j) * a_i * (
                            delta[b2][m] * (PA_0 * PA_n * PB_0 * PB_1)
                            + delta[b1][m] * (PA_0 * PA_n * PB_0 * PB_2)
                            + delta[b0][m] * (PA_0 * PA_n * PB_1 * PB_2)
                            + delta[m][n] * (PA_0 * PB_0 * PB_1 * PB_2)
                            + delta[a0][m] * (PA_n * PB_0 * PB_1 * PB_2)
                        )

                    )

                    + PC[m] * (

                        (-0.5) / (a_i + a_j) * (
                            delta[a0][n] * delta[b1][b2] * (PB_0)
                            + delta[a0][n] * delta[b0][b2] * (PB_1)
                            + delta[a0][n] * delta[b0][b1] * (PB_2)
                        )

                        + (-1.0) * (
                            delta[a0][n] * (PB_0 * PB_1 * PB_2)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[b0][b1] * delta[b2][n] + delta[b0][b2] * delta[b1][n] + delta[b0][n] * delta[b1][b2]) * (PA_0)
                            + (delta[a0][b0] * delta[b1][b2] + delta[a0][b1] * delta[b0][b2] + delta[a0][b2] * delta[b0][b1]) * (PA_n)
                            + (delta[a0][b1] * delta[b2][n] + delta[a0][b2] * delta[b1][n] + delta[a0][n] * delta[b1][b2]) * (PB_0)
                            + (delta[a0][b0] * delta[b2][n] + delta[a0][b2] * delta[b0][n] + delta[a0][n] * delta[b0][b2]) * (PB_1)
                            + (delta[a0][b0] * delta[b1][n] + delta[a0][b1] * delta[b0][n] + delta[a0][n] * delta[b0][b1]) * (PB_2)
                        )

                        + 1.0 / (a_i + a_j) * a_i * (
                            delta[b1][b2] * (PA_0 * PA_n * PB_0)
                            + delta[b0][b2] * (PA_0 * PA_n * PB_1)
                            + delta[b0][b1] * (PA_0 * PA_n * PB_2)
                            + delta[b2][n] * (PA_0 * PB_0 * PB_1)
                            + delta[b1][n] * (PA_0 * PB_0 * PB_2)
                            + delta[b0][n] * (PA_0 * PB_1 * PB_2)
                            + delta[a0][b2] * (PA_n * PB_0 * PB_1)
                            + delta[a0][b1] * (PA_n * PB_0 * PB_2)
                            + delta[a0][b0] * (PA_n * PB_1 * PB_2)
                            + delta[a0][n] * (PB_0 * PB_1 * PB_2)
                        )

                        + 2.0 * a_i * (
                            PA_0 * PA_n * PB_0 * PB_1 * PB_2
                        )

                    )

                );

                // Note: minus sign from electron charge

                double mu_grad_j = (-1.0) * S_ij_00 * (

                    (

                        (-0.25) / ( (a_i + a_j) * (a_i + a_j) ) * (
                            (delta[a0][b0] * delta[b1][m] * delta[b2][n] + delta[a0][b0] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[b0][m] * delta[b2][n] + delta[a0][b1] * delta[b0][n] * delta[b2][m] + delta[a0][b2] * delta[b0][m] * delta[b1][n] + delta[a0][b2] * delta[b0][n] * delta[b1][m] + delta[a0][m] * delta[b0][b1] * delta[b2][n] + delta[a0][m] * delta[b0][b2] * delta[b1][n] + delta[a0][m] * delta[b0][n] * delta[b1][b2])
                        )

                        + (-0.5) / (a_i + a_j) * (
                            (delta[b1][m] * delta[b2][n] + delta[b1][n] * delta[b2][m]) * (PA_0 * PB_0)
                            + (delta[b0][m] * delta[b2][n] + delta[b0][n] * delta[b2][m]) * (PA_0 * PB_1)
                            + (delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PA_0 * PB_2)
                            + delta[a0][m] * delta[b2][n] * (PB_0 * PB_1)
                            + delta[a0][m] * delta[b1][n] * (PB_0 * PB_2)
                            + delta[a0][m] * delta[b0][n] * (PB_1 * PB_2)
                        )

                        + 0.25 / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[a0][b0] * delta[b1][b2] * delta[m][n] + delta[a0][b0] * delta[b1][m] * delta[b2][n] + delta[a0][b0] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[b0][b2] * delta[m][n] + delta[a0][b1] * delta[b0][m] * delta[b2][n] + delta[a0][b1] * delta[b0][n] * delta[b2][m] + delta[a0][b2] * delta[b0][b1] * delta[m][n] + delta[a0][b2] * delta[b0][m] * delta[b1][n] + delta[a0][b2] * delta[b0][n] * delta[b1][m] + delta[a0][m] * delta[b0][b1] * delta[b2][n] + delta[a0][m] * delta[b0][b2] * delta[b1][n] + delta[a0][m] * delta[b0][n] * delta[b1][b2] + delta[a0][n] * delta[b0][b1] * delta[b2][m] + delta[a0][n] * delta[b0][b2] * delta[b1][m] + delta[a0][n] * delta[b0][m] * delta[b1][b2])
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[b1][b2] * delta[m][n] + delta[b1][m] * delta[b2][n] + delta[b1][n] * delta[b2][m]) * (PA_0 * PB_0)
                            + (delta[b0][b2] * delta[m][n] + delta[b0][m] * delta[b2][n] + delta[b0][n] * delta[b2][m]) * (PA_0 * PB_1)
                            + (delta[b0][b1] * delta[m][n] + delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PA_0 * PB_2)
                            + (delta[b0][b1] * delta[b2][m] + delta[b0][b2] * delta[b1][m] + delta[b0][m] * delta[b1][b2]) * (PA_0 * PB_n)
                            + (delta[a0][b2] * delta[m][n] + delta[a0][m] * delta[b2][n] + delta[a0][n] * delta[b2][m]) * (PB_0 * PB_1)
                            + (delta[a0][b1] * delta[m][n] + delta[a0][m] * delta[b1][n] + delta[a0][n] * delta[b1][m]) * (PB_0 * PB_2)
                            + (delta[a0][b1] * delta[b2][m] + delta[a0][b2] * delta[b1][m] + delta[a0][m] * delta[b1][b2]) * (PB_0 * PB_n)
                            + (delta[a0][b0] * delta[m][n] + delta[a0][m] * delta[b0][n] + delta[a0][n] * delta[b0][m]) * (PB_1 * PB_2)
                            + (delta[a0][b0] * delta[b2][m] + delta[a0][b2] * delta[b0][m] + delta[a0][m] * delta[b0][b2]) * (PB_1 * PB_n)
                            + (delta[a0][b0] * delta[b1][m] + delta[a0][b1] * delta[b0][m] + delta[a0][m] * delta[b0][b1]) * (PB_2 * PB_n)
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[m][n] * (PA_0 * PB_0 * PB_1 * PB_2)
                            + delta[b2][m] * (PA_0 * PB_0 * PB_1 * PB_n)
                            + delta[b1][m] * (PA_0 * PB_0 * PB_2 * PB_n)
                            + delta[b0][m] * (PA_0 * PB_1 * PB_2 * PB_n)
                            + delta[a0][m] * (PB_0 * PB_1 * PB_2 * PB_n)
                        )

                    )

                    + PC[m] * (

                        (-0.5) / (a_i + a_j) * (
                            (delta[b0][b1] * delta[b2][n] + delta[b0][b2] * delta[b1][n] + delta[b0][n] * delta[b1][b2]) * (PA_0)
                            + (delta[a0][b1] * delta[b2][n] + delta[a0][b2] * delta[b1][n]) * (PB_0)
                            + (delta[a0][b0] * delta[b2][n] + delta[a0][b2] * delta[b0][n]) * (PB_1)
                            + (delta[a0][b0] * delta[b1][n] + delta[a0][b1] * delta[b0][n]) * (PB_2)
                        )

                        + (-1.0) * (
                            delta[b2][n] * (PA_0 * PB_0 * PB_1)
                            + delta[b1][n] * (PA_0 * PB_0 * PB_2)
                            + delta[b0][n] * (PA_0 * PB_1 * PB_2)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[b0][b1] * delta[b2][n] + delta[b0][b2] * delta[b1][n] + delta[b0][n] * delta[b1][b2]) * (PA_0)
                            + (delta[a0][b1] * delta[b2][n] + delta[a0][b2] * delta[b1][n] + delta[a0][n] * delta[b1][b2]) * (PB_0)
                            + (delta[a0][b0] * delta[b2][n] + delta[a0][b2] * delta[b0][n] + delta[a0][n] * delta[b0][b2]) * (PB_1)
                            + (delta[a0][b0] * delta[b1][n] + delta[a0][b1] * delta[b0][n] + delta[a0][n] * delta[b0][b1]) * (PB_2)
                            + (delta[a0][b0] * delta[b1][b2] + delta[a0][b1] * delta[b0][b2] + delta[a0][b2] * delta[b0][b1]) * (PB_n)
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[b2][n] * (PA_0 * PB_0 * PB_1)
                            + delta[b1][n] * (PA_0 * PB_0 * PB_2)
                            + delta[b1][b2] * (PA_0 * PB_0 * PB_n)
                            + delta[b0][n] * (PA_0 * PB_1 * PB_2)
                            + delta[b0][b2] * (PA_0 * PB_1 * PB_n)
                            + delta[b0][b1] * (PA_0 * PB_2 * PB_n)
                            + delta[a0][n] * (PB_0 * PB_1 * PB_2)
                            + delta[a0][b2] * (PB_0 * PB_1 * PB_n)
                            + delta[a0][b1] * (PB_0 * PB_2 * PB_n)
                            + delta[a0][b0] * (PB_1 * PB_2 * PB_n)
                        )

                        + 2.0 * a_j * (
                            PA_0 * PB_0 * PB_1 * PB_2 * PB_n
                        )

                    )

                );

                for (const auto& i_cgto_sph_ind_coef : cart_sph_p[i_cgto])
                {
                    auto i_cgto_sph = i_cgto_sph_ind_coef.first;
                    auto i_coef_sph = i_cgto_sph_ind_coef.second;

                    for (const auto& j_cgto_sph_ind_coef : cart_sph_f[j_cgto])
                    {
                        auto j_cgto_sph = j_cgto_sph_ind_coef.first;
                        auto j_coef_sph = j_cgto_sph_ind_coef.second;

                        auto coef_sph = i_coef_sph * j_coef_sph;

                        auto Dij = D[i_cgto_sph * naos + j_cgto_sph];
                        auto Dji = D[j_cgto_sph * naos + i_cgto_sph];

                        double D_sym = (Dij + Dji);

                        double grad_i = mu_grad_i * coef_sph * D_sym;
                        double grad_j = mu_grad_j * coef_sph * D_sym;

                        mu_grad_omp[thread_id][m].row(i_atom)[n] += grad_i;
                        mu_grad_omp[thread_id][m].row(j_atom)[n] += grad_j;
                    }
                }
            }
        }
    }


    // D-D block

    #pragma omp parallel for schedule(static, PAD_SIZE)
    for (int ij = 0; ij < dd_prim_pair_count; ij++)
    {
        const auto thread_id = omp_get_thread_num();

        const auto i = std::get<0>(pair_inds_dd[ij]);
        const auto j = std::get<1>(pair_inds_dd[ij]);

        const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
        const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
        const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
        const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
        const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

        const auto a_j = d_prim_info[j / 6 + d_prim_count * 0];
        const auto c_j = d_prim_info[j / 6 + d_prim_count * 1];
        const auto x_j = d_prim_info[j / 6 + d_prim_count * 2];
        const auto y_j = d_prim_info[j / 6 + d_prim_count * 3];
        const auto z_j = d_prim_info[j / 6 + d_prim_count * 4];

        const auto a0 = d_cart_inds[i % 6][0];
        const auto a1 = d_cart_inds[i % 6][1];

        const auto b0 = d_cart_inds[j % 6][0];
        const auto b1 = d_cart_inds[j % 6][1];

        const auto i_cgto = d_prim_aoinds[(i / 6) + d_prim_count * (i % 6)];
        const auto j_cgto = d_prim_aoinds[(j / 6) + d_prim_count * (j % 6)];

        const auto i_atom = cart_ao_to_atom_ids[i_cgto];
        const auto j_atom = cart_ao_to_atom_ids[j_cgto];

        const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};

        const auto r2_ij = rij[0] * rij[0] + rij[1] * rij[1] + rij[2] * rij[2];

        const auto S_ij_00 = c_i * c_j * std::pow(MATH_CONST_PI / (a_i + a_j), 1.5) * std::exp(-a_i * a_j / (a_i + a_j) * r2_ij);

        const double PC[3] = {(a_i * x_i + a_j * x_j) / (a_i + a_j) - origin[0],
                              (a_i * y_i + a_j * y_j) / (a_i + a_j) - origin[1],
                              (a_i * z_i + a_j * z_j) / (a_i + a_j) - origin[2]};

        const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
        const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];

        const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
        const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];


        // J. Chem. Phys. 84, 3963-3974 (1986)

        // loop over electric dipole components
        for (int m = 0; m < 3; m++)
        {
            // loop over gradient components
            for (int n = 0; n < 3; n++)
            {
                const auto PA_n = (a_j / (a_i + a_j)) * rij[n];
                const auto PB_n = (-a_i / (a_i + a_j)) * rij[n];

                // Note: minus sign from electron charge

                double mu_grad_i = (-1.0) * S_ij_00 * (

                    (

                        (-0.25) / ( (a_i + a_j) * (a_i + a_j) ) * (
                            (delta[a0][b0] * delta[a1][n] * delta[b1][m] + delta[a0][b1] * delta[a1][n] * delta[b0][m] + delta[a0][m] * delta[a1][n] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[b1][m] + delta[a0][n] * delta[a1][b1] * delta[b0][m] + delta[a0][n] * delta[a1][m] * delta[b0][b1])
                        )

                        + (-0.5) / (a_i + a_j) * (
                            delta[a1][n] * delta[b1][m] * (PA_0 * PB_0)
                            + delta[a1][n] * delta[b0][m] * (PA_0 * PB_1)
                            + delta[a0][n] * delta[b1][m] * (PA_1 * PB_0)
                            + delta[a0][n] * delta[b0][m] * (PA_1 * PB_1)
                            + (delta[a0][m] * delta[a1][n] + delta[a0][n] * delta[a1][m]) * (PB_0 * PB_1)
                        )

                        + 0.25 / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[a0][a1] * delta[b0][b1] * delta[m][n] + delta[a0][a1] * delta[b0][m] * delta[b1][n] + delta[a0][a1] * delta[b0][n] * delta[b1][m] + delta[a0][b0] * delta[a1][b1] * delta[m][n] + delta[a0][b0] * delta[a1][m] * delta[b1][n] + delta[a0][b0] * delta[a1][n] * delta[b1][m] + delta[a0][b1] * delta[a1][b0] * delta[m][n] + delta[a0][b1] * delta[a1][m] * delta[b0][n] + delta[a0][b1] * delta[a1][n] * delta[b0][m] + delta[a0][m] * delta[a1][b0] * delta[b1][n] + delta[a0][m] * delta[a1][b1] * delta[b0][n] + delta[a0][m] * delta[a1][n] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[b1][m] + delta[a0][n] * delta[a1][b1] * delta[b0][m] + delta[a0][n] * delta[a1][m] * delta[b0][b1])
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[b0][b1] * delta[m][n] + delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PA_0 * PA_1)
                            + (delta[a1][b0] * delta[b1][m] + delta[a1][b1] * delta[b0][m] + delta[a1][m] * delta[b0][b1]) * (PA_0 * PA_n)
                            + (delta[a1][b1] * delta[m][n] + delta[a1][m] * delta[b1][n] + delta[a1][n] * delta[b1][m]) * (PA_0 * PB_0)
                            + (delta[a1][b0] * delta[m][n] + delta[a1][m] * delta[b0][n] + delta[a1][n] * delta[b0][m]) * (PA_0 * PB_1)
                            + (delta[a0][b0] * delta[b1][m] + delta[a0][b1] * delta[b0][m] + delta[a0][m] * delta[b0][b1]) * (PA_1 * PA_n)
                            + (delta[a0][b1] * delta[m][n] + delta[a0][m] * delta[b1][n] + delta[a0][n] * delta[b1][m]) * (PA_1 * PB_0)
                            + (delta[a0][b0] * delta[m][n] + delta[a0][m] * delta[b0][n] + delta[a0][n] * delta[b0][m]) * (PA_1 * PB_1)
                            + (delta[a0][a1] * delta[b1][m] + delta[a0][b1] * delta[a1][m] + delta[a0][m] * delta[a1][b1]) * (PA_n * PB_0)
                            + (delta[a0][a1] * delta[b0][m] + delta[a0][b0] * delta[a1][m] + delta[a0][m] * delta[a1][b0]) * (PA_n * PB_1)
                            + (delta[a0][a1] * delta[m][n] + delta[a0][m] * delta[a1][n] + delta[a0][n] * delta[a1][m]) * (PB_0 * PB_1)
                        )

                        + 1.0 / (a_i + a_j) * a_i * (
                            delta[b1][m] * (PA_0 * PA_1 * PA_n * PB_0)
                            + delta[b0][m] * (PA_0 * PA_1 * PA_n * PB_1)
                            + delta[m][n] * (PA_0 * PA_1 * PB_0 * PB_1)
                            + delta[a1][m] * (PA_0 * PA_n * PB_0 * PB_1)
                            + delta[a0][m] * (PA_1 * PA_n * PB_0 * PB_1)
                        )

                    )

                    + PC[m] * (

                        (-0.5) / (a_i + a_j) * (
                            delta[a1][n] * delta[b0][b1] * (PA_0)
                            + delta[a0][n] * delta[b0][b1] * (PA_1)
                            + (delta[a0][b1] * delta[a1][n] + delta[a0][n] * delta[a1][b1]) * (PB_0)
                            + (delta[a0][b0] * delta[a1][n] + delta[a0][n] * delta[a1][b0]) * (PB_1)
                        )

                        + (-1.0) * (
                            delta[a1][n] * (PA_0 * PB_0 * PB_1)
                            + delta[a0][n] * (PA_1 * PB_0 * PB_1)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[a1][b0] * delta[b1][n] + delta[a1][b1] * delta[b0][n] + delta[a1][n] * delta[b0][b1]) * (PA_0)
                            + (delta[a0][b0] * delta[b1][n] + delta[a0][b1] * delta[b0][n] + delta[a0][n] * delta[b0][b1]) * (PA_1)
                            + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PA_n)
                            + (delta[a0][a1] * delta[b1][n] + delta[a0][b1] * delta[a1][n] + delta[a0][n] * delta[a1][b1]) * (PB_0)
                            + (delta[a0][a1] * delta[b0][n] + delta[a0][b0] * delta[a1][n] + delta[a0][n] * delta[a1][b0]) * (PB_1)
                        )

                        + 1.0 / (a_i + a_j) * a_i * (
                            delta[b0][b1] * (PA_0 * PA_1 * PA_n)
                            + delta[b1][n] * (PA_0 * PA_1 * PB_0)
                            + delta[b0][n] * (PA_0 * PA_1 * PB_1)
                            + delta[a1][b1] * (PA_0 * PA_n * PB_0)
                            + delta[a1][b0] * (PA_0 * PA_n * PB_1)
                            + delta[a1][n] * (PA_0 * PB_0 * PB_1)
                            + delta[a0][b1] * (PA_1 * PA_n * PB_0)
                            + delta[a0][b0] * (PA_1 * PA_n * PB_1)
                            + delta[a0][n] * (PA_1 * PB_0 * PB_1)
                            + delta[a0][a1] * (PA_n * PB_0 * PB_1)
                        )

                        + 2.0 * a_i * (
                            PA_0 * PA_1 * PA_n * PB_0 * PB_1
                        )

                    )

                );

                // Note: minus sign from electron charge

                double mu_grad_j = (-1.0) * S_ij_00 * (

                    (

                        (-0.25) / ( (a_i + a_j) * (a_i + a_j) ) * (
                            (delta[a0][a1] * delta[b0][m] * delta[b1][n] + delta[a0][a1] * delta[b0][n] * delta[b1][m] + delta[a0][b0] * delta[a1][m] * delta[b1][n] + delta[a0][b1] * delta[a1][m] * delta[b0][n] + delta[a0][m] * delta[a1][b0] * delta[b1][n] + delta[a0][m] * delta[a1][b1] * delta[b0][n])
                        )

                        + (-0.5) / (a_i + a_j) * (
                            (delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PA_0 * PA_1)
                            + delta[a1][m] * delta[b1][n] * (PA_0 * PB_0)
                            + delta[a1][m] * delta[b0][n] * (PA_0 * PB_1)
                            + delta[a0][m] * delta[b1][n] * (PA_1 * PB_0)
                            + delta[a0][m] * delta[b0][n] * (PA_1 * PB_1)
                        )

                        + 0.25 / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[a0][a1] * delta[b0][b1] * delta[m][n] + delta[a0][a1] * delta[b0][m] * delta[b1][n] + delta[a0][a1] * delta[b0][n] * delta[b1][m] + delta[a0][b0] * delta[a1][b1] * delta[m][n] + delta[a0][b0] * delta[a1][m] * delta[b1][n] + delta[a0][b0] * delta[a1][n] * delta[b1][m] + delta[a0][b1] * delta[a1][b0] * delta[m][n] + delta[a0][b1] * delta[a1][m] * delta[b0][n] + delta[a0][b1] * delta[a1][n] * delta[b0][m] + delta[a0][m] * delta[a1][b0] * delta[b1][n] + delta[a0][m] * delta[a1][b1] * delta[b0][n] + delta[a0][m] * delta[a1][n] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[b1][m] + delta[a0][n] * delta[a1][b1] * delta[b0][m] + delta[a0][n] * delta[a1][m] * delta[b0][b1])
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[b0][b1] * delta[m][n] + delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PA_0 * PA_1)
                            + (delta[a1][b1] * delta[m][n] + delta[a1][m] * delta[b1][n] + delta[a1][n] * delta[b1][m]) * (PA_0 * PB_0)
                            + (delta[a1][b0] * delta[m][n] + delta[a1][m] * delta[b0][n] + delta[a1][n] * delta[b0][m]) * (PA_0 * PB_1)
                            + (delta[a1][b0] * delta[b1][m] + delta[a1][b1] * delta[b0][m] + delta[a1][m] * delta[b0][b1]) * (PA_0 * PB_n)
                            + (delta[a0][b1] * delta[m][n] + delta[a0][m] * delta[b1][n] + delta[a0][n] * delta[b1][m]) * (PA_1 * PB_0)
                            + (delta[a0][b0] * delta[m][n] + delta[a0][m] * delta[b0][n] + delta[a0][n] * delta[b0][m]) * (PA_1 * PB_1)
                            + (delta[a0][b0] * delta[b1][m] + delta[a0][b1] * delta[b0][m] + delta[a0][m] * delta[b0][b1]) * (PA_1 * PB_n)
                            + (delta[a0][a1] * delta[m][n] + delta[a0][m] * delta[a1][n] + delta[a0][n] * delta[a1][m]) * (PB_0 * PB_1)
                            + (delta[a0][a1] * delta[b1][m] + delta[a0][b1] * delta[a1][m] + delta[a0][m] * delta[a1][b1]) * (PB_0 * PB_n)
                            + (delta[a0][a1] * delta[b0][m] + delta[a0][b0] * delta[a1][m] + delta[a0][m] * delta[a1][b0]) * (PB_1 * PB_n)
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[m][n] * (PA_0 * PA_1 * PB_0 * PB_1)
                            + delta[b1][m] * (PA_0 * PA_1 * PB_0 * PB_n)
                            + delta[b0][m] * (PA_0 * PA_1 * PB_1 * PB_n)
                            + delta[a1][m] * (PA_0 * PB_0 * PB_1 * PB_n)
                            + delta[a0][m] * (PA_1 * PB_0 * PB_1 * PB_n)
                        )

                    )

                    + PC[m] * (

                        (-0.5) / (a_i + a_j) * (
                            (delta[a1][b0] * delta[b1][n] + delta[a1][b1] * delta[b0][n]) * (PA_0)
                            + (delta[a0][b0] * delta[b1][n] + delta[a0][b1] * delta[b0][n]) * (PA_1)
                            + delta[a0][a1] * delta[b1][n] * (PB_0)
                            + delta[a0][a1] * delta[b0][n] * (PB_1)
                        )

                        + (-1.0) * (
                            delta[b1][n] * (PA_0 * PA_1 * PB_0)
                            + delta[b0][n] * (PA_0 * PA_1 * PB_1)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[a1][b0] * delta[b1][n] + delta[a1][b1] * delta[b0][n] + delta[a1][n] * delta[b0][b1]) * (PA_0)
                            + (delta[a0][b0] * delta[b1][n] + delta[a0][b1] * delta[b0][n] + delta[a0][n] * delta[b0][b1]) * (PA_1)
                            + (delta[a0][a1] * delta[b1][n] + delta[a0][b1] * delta[a1][n] + delta[a0][n] * delta[a1][b1]) * (PB_0)
                            + (delta[a0][a1] * delta[b0][n] + delta[a0][b0] * delta[a1][n] + delta[a0][n] * delta[a1][b0]) * (PB_1)
                            + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PB_n)
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[b1][n] * (PA_0 * PA_1 * PB_0)
                            + delta[b0][n] * (PA_0 * PA_1 * PB_1)
                            + delta[b0][b1] * (PA_0 * PA_1 * PB_n)
                            + delta[a1][n] * (PA_0 * PB_0 * PB_1)
                            + delta[a1][b1] * (PA_0 * PB_0 * PB_n)
                            + delta[a1][b0] * (PA_0 * PB_1 * PB_n)
                            + delta[a0][n] * (PA_1 * PB_0 * PB_1)
                            + delta[a0][b1] * (PA_1 * PB_0 * PB_n)
                            + delta[a0][b0] * (PA_1 * PB_1 * PB_n)
                            + delta[a0][a1] * (PB_0 * PB_1 * PB_n)
                        )

                        + 2.0 * a_j * (
                            PA_0 * PA_1 * PB_0 * PB_1 * PB_n
                        )

                    )

                );

                for (const auto& i_cgto_sph_ind_coef : cart_sph_d[i_cgto])
                {
                    auto i_cgto_sph = i_cgto_sph_ind_coef.first;
                    auto i_coef_sph = i_cgto_sph_ind_coef.second;

                    for (const auto& j_cgto_sph_ind_coef : cart_sph_d[j_cgto])
                    {
                        auto j_cgto_sph = j_cgto_sph_ind_coef.first;
                        auto j_coef_sph = j_cgto_sph_ind_coef.second;

                        auto coef_sph = i_coef_sph * j_coef_sph;

                        auto Dij = D[i_cgto_sph * naos + j_cgto_sph];
                        auto Dji = D[j_cgto_sph * naos + i_cgto_sph];

                        double D_sym = ((i == j) ? Dij : (Dij + Dji));

                        double grad_i = mu_grad_i * coef_sph * D_sym;
                        double grad_j = mu_grad_j * coef_sph * D_sym;

                        mu_grad_omp[thread_id][m].row(i_atom)[n] += grad_i;
                        mu_grad_omp[thread_id][m].row(j_atom)[n] += grad_j;
                    }
                }
            }
        }
    }


    // D-F block

    #pragma omp parallel for schedule(static, PAD_SIZE)
    for (int ij = 0; ij < df_prim_pair_count; ij++)
    {
        const auto thread_id = omp_get_thread_num();

        const auto i = std::get<0>(pair_inds_df[ij]);
        const auto j = std::get<1>(pair_inds_df[ij]);

        const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
        const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
        const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
        const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
        const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

        const auto a_j = f_prim_info[j / 10 + f_prim_count * 0];
        const auto c_j = f_prim_info[j / 10 + f_prim_count * 1];
        const auto x_j = f_prim_info[j / 10 + f_prim_count * 2];
        const auto y_j = f_prim_info[j / 10 + f_prim_count * 3];
        const auto z_j = f_prim_info[j / 10 + f_prim_count * 4];

        const auto a0 = d_cart_inds[i % 6][0];
        const auto a1 = d_cart_inds[i % 6][1];

        const auto b0 = f_cart_inds[j % 10][0];
        const auto b1 = f_cart_inds[j % 10][1];
        const auto b2 = f_cart_inds[j % 10][2];

        const auto i_cgto = d_prim_aoinds[(i / 6) + d_prim_count * (i % 6)];
        const auto j_cgto = f_prim_aoinds[(j / 10) + f_prim_count * (j % 10)];

        const auto i_atom = cart_ao_to_atom_ids[i_cgto];
        const auto j_atom = cart_ao_to_atom_ids[j_cgto];

        const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};

        const auto r2_ij = rij[0] * rij[0] + rij[1] * rij[1] + rij[2] * rij[2];

        const auto S_ij_00 = c_i * c_j * std::pow(MATH_CONST_PI / (a_i + a_j), 1.5) * std::exp(-a_i * a_j / (a_i + a_j) * r2_ij);

        const double PC[3] = {(a_i * x_i + a_j * x_j) / (a_i + a_j) - origin[0],
                              (a_i * y_i + a_j * y_j) / (a_i + a_j) - origin[1],
                              (a_i * z_i + a_j * z_j) / (a_i + a_j) - origin[2]};

        const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
        const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];

        const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
        const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
        const auto PB_2 = (-a_i / (a_i + a_j)) * rij[b2];


        // J. Chem. Phys. 84, 3963-3974 (1986)

        // loop over electric dipole components
        for (int m = 0; m < 3; m++)
        {
            // loop over gradient components
            for (int n = 0; n < 3; n++)
            {
                const auto PA_n = (a_j / (a_i + a_j)) * rij[n];
                const auto PB_n = (-a_i / (a_i + a_j)) * rij[n];

                // Note: minus sign from electron charge

                double mu_grad_i = (-1.0) * S_ij_00 * (

                    (

                        (-0.25) / ( (a_i + a_j) * (a_i + a_j) ) * (
                            (delta[a1][n] * delta[b0][b1] * delta[b2][m] + delta[a1][n] * delta[b0][b2] * delta[b1][m] + delta[a1][n] * delta[b0][m] * delta[b1][b2]) * (PA_0)
                            + (delta[a0][n] * delta[b0][b1] * delta[b2][m] + delta[a0][n] * delta[b0][b2] * delta[b1][m] + delta[a0][n] * delta[b0][m] * delta[b1][b2]) * (PA_1)
                            + (delta[a0][b1] * delta[a1][n] * delta[b2][m] + delta[a0][b2] * delta[a1][n] * delta[b1][m] + delta[a0][m] * delta[a1][n] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[b2][m] + delta[a0][n] * delta[a1][b2] * delta[b1][m] + delta[a0][n] * delta[a1][m] * delta[b1][b2]) * (PB_0)
                            + (delta[a0][b0] * delta[a1][n] * delta[b2][m] + delta[a0][b2] * delta[a1][n] * delta[b0][m] + delta[a0][m] * delta[a1][n] * delta[b0][b2] + delta[a0][n] * delta[a1][b0] * delta[b2][m] + delta[a0][n] * delta[a1][b2] * delta[b0][m] + delta[a0][n] * delta[a1][m] * delta[b0][b2]) * (PB_1)
                            + (delta[a0][b0] * delta[a1][n] * delta[b1][m] + delta[a0][b1] * delta[a1][n] * delta[b0][m] + delta[a0][m] * delta[a1][n] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[b1][m] + delta[a0][n] * delta[a1][b1] * delta[b0][m] + delta[a0][n] * delta[a1][m] * delta[b0][b1]) * (PB_2)
                        )

                        + (-0.5) / (a_i + a_j) * (
                            delta[a1][n] * delta[b2][m] * (PA_0 * PB_0 * PB_1)
                            + delta[a1][n] * delta[b1][m] * (PA_0 * PB_0 * PB_2)
                            + delta[a1][n] * delta[b0][m] * (PA_0 * PB_1 * PB_2)
                            + delta[a0][n] * delta[b2][m] * (PA_1 * PB_0 * PB_1)
                            + delta[a0][n] * delta[b1][m] * (PA_1 * PB_0 * PB_2)
                            + delta[a0][n] * delta[b0][m] * (PA_1 * PB_1 * PB_2)
                            + (delta[a0][m] * delta[a1][n] + delta[a0][n] * delta[a1][m]) * (PB_0 * PB_1 * PB_2)
                        )

                        + 0.25 / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[a1][b0] * delta[b1][b2] * delta[m][n] + delta[a1][b0] * delta[b1][m] * delta[b2][n] + delta[a1][b0] * delta[b1][n] * delta[b2][m] + delta[a1][b1] * delta[b0][b2] * delta[m][n] + delta[a1][b1] * delta[b0][m] * delta[b2][n] + delta[a1][b1] * delta[b0][n] * delta[b2][m] + delta[a1][b2] * delta[b0][b1] * delta[m][n] + delta[a1][b2] * delta[b0][m] * delta[b1][n] + delta[a1][b2] * delta[b0][n] * delta[b1][m] + delta[a1][m] * delta[b0][b1] * delta[b2][n] + delta[a1][m] * delta[b0][b2] * delta[b1][n] + delta[a1][m] * delta[b0][n] * delta[b1][b2] + delta[a1][n] * delta[b0][b1] * delta[b2][m] + delta[a1][n] * delta[b0][b2] * delta[b1][m] + delta[a1][n] * delta[b0][m] * delta[b1][b2]) * (PA_0)
                            + (delta[a0][b0] * delta[b1][b2] * delta[m][n] + delta[a0][b0] * delta[b1][m] * delta[b2][n] + delta[a0][b0] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[b0][b2] * delta[m][n] + delta[a0][b1] * delta[b0][m] * delta[b2][n] + delta[a0][b1] * delta[b0][n] * delta[b2][m] + delta[a0][b2] * delta[b0][b1] * delta[m][n] + delta[a0][b2] * delta[b0][m] * delta[b1][n] + delta[a0][b2] * delta[b0][n] * delta[b1][m] + delta[a0][m] * delta[b0][b1] * delta[b2][n] + delta[a0][m] * delta[b0][b2] * delta[b1][n] + delta[a0][m] * delta[b0][n] * delta[b1][b2] + delta[a0][n] * delta[b0][b1] * delta[b2][m] + delta[a0][n] * delta[b0][b2] * delta[b1][m] + delta[a0][n] * delta[b0][m] * delta[b1][b2]) * (PA_1)
                            + (delta[a0][a1] * delta[b0][b1] * delta[b2][m] + delta[a0][a1] * delta[b0][b2] * delta[b1][m] + delta[a0][a1] * delta[b0][m] * delta[b1][b2] + delta[a0][b0] * delta[a1][b1] * delta[b2][m] + delta[a0][b0] * delta[a1][b2] * delta[b1][m] + delta[a0][b0] * delta[a1][m] * delta[b1][b2] + delta[a0][b1] * delta[a1][b0] * delta[b2][m] + delta[a0][b1] * delta[a1][b2] * delta[b0][m] + delta[a0][b1] * delta[a1][m] * delta[b0][b2] + delta[a0][b2] * delta[a1][b0] * delta[b1][m] + delta[a0][b2] * delta[a1][b1] * delta[b0][m] + delta[a0][b2] * delta[a1][m] * delta[b0][b1] + delta[a0][m] * delta[a1][b0] * delta[b1][b2] + delta[a0][m] * delta[a1][b1] * delta[b0][b2] + delta[a0][m] * delta[a1][b2] * delta[b0][b1]) * (PA_n)
                            + (delta[a0][a1] * delta[b1][b2] * delta[m][n] + delta[a0][a1] * delta[b1][m] * delta[b2][n] + delta[a0][a1] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[a1][b2] * delta[m][n] + delta[a0][b1] * delta[a1][m] * delta[b2][n] + delta[a0][b1] * delta[a1][n] * delta[b2][m] + delta[a0][b2] * delta[a1][b1] * delta[m][n] + delta[a0][b2] * delta[a1][m] * delta[b1][n] + delta[a0][b2] * delta[a1][n] * delta[b1][m] + delta[a0][m] * delta[a1][b1] * delta[b2][n] + delta[a0][m] * delta[a1][b2] * delta[b1][n] + delta[a0][m] * delta[a1][n] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[b2][m] + delta[a0][n] * delta[a1][b2] * delta[b1][m] + delta[a0][n] * delta[a1][m] * delta[b1][b2]) * (PB_0)
                            + (delta[a0][a1] * delta[b0][b2] * delta[m][n] + delta[a0][a1] * delta[b0][m] * delta[b2][n] + delta[a0][a1] * delta[b0][n] * delta[b2][m] + delta[a0][b0] * delta[a1][b2] * delta[m][n] + delta[a0][b0] * delta[a1][m] * delta[b2][n] + delta[a0][b0] * delta[a1][n] * delta[b2][m] + delta[a0][b2] * delta[a1][b0] * delta[m][n] + delta[a0][b2] * delta[a1][m] * delta[b0][n] + delta[a0][b2] * delta[a1][n] * delta[b0][m] + delta[a0][m] * delta[a1][b0] * delta[b2][n] + delta[a0][m] * delta[a1][b2] * delta[b0][n] + delta[a0][m] * delta[a1][n] * delta[b0][b2] + delta[a0][n] * delta[a1][b0] * delta[b2][m] + delta[a0][n] * delta[a1][b2] * delta[b0][m] + delta[a0][n] * delta[a1][m] * delta[b0][b2]) * (PB_1)
                            + (delta[a0][a1] * delta[b0][b1] * delta[m][n] + delta[a0][a1] * delta[b0][m] * delta[b1][n] + delta[a0][a1] * delta[b0][n] * delta[b1][m] + delta[a0][b0] * delta[a1][b1] * delta[m][n] + delta[a0][b0] * delta[a1][m] * delta[b1][n] + delta[a0][b0] * delta[a1][n] * delta[b1][m] + delta[a0][b1] * delta[a1][b0] * delta[m][n] + delta[a0][b1] * delta[a1][m] * delta[b0][n] + delta[a0][b1] * delta[a1][n] * delta[b0][m] + delta[a0][m] * delta[a1][b0] * delta[b1][n] + delta[a0][m] * delta[a1][b1] * delta[b0][n] + delta[a0][m] * delta[a1][n] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[b1][m] + delta[a0][n] * delta[a1][b1] * delta[b0][m] + delta[a0][n] * delta[a1][m] * delta[b0][b1]) * (PB_2)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[b0][b1] * delta[b2][m] + delta[b0][b2] * delta[b1][m] + delta[b0][m] * delta[b1][b2]) * (PA_0 * PA_1 * PA_n)
                            + (delta[b1][b2] * delta[m][n] + delta[b1][m] * delta[b2][n] + delta[b1][n] * delta[b2][m]) * (PA_0 * PA_1 * PB_0)
                            + (delta[b0][b2] * delta[m][n] + delta[b0][m] * delta[b2][n] + delta[b0][n] * delta[b2][m]) * (PA_0 * PA_1 * PB_1)
                            + (delta[b0][b1] * delta[m][n] + delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PA_0 * PA_1 * PB_2)
                            + (delta[a1][b1] * delta[b2][m] + delta[a1][b2] * delta[b1][m] + delta[a1][m] * delta[b1][b2]) * (PA_0 * PA_n * PB_0)
                            + (delta[a1][b0] * delta[b2][m] + delta[a1][b2] * delta[b0][m] + delta[a1][m] * delta[b0][b2]) * (PA_0 * PA_n * PB_1)
                            + (delta[a1][b0] * delta[b1][m] + delta[a1][b1] * delta[b0][m] + delta[a1][m] * delta[b0][b1]) * (PA_0 * PA_n * PB_2)
                            + (delta[a1][b2] * delta[m][n] + delta[a1][m] * delta[b2][n] + delta[a1][n] * delta[b2][m]) * (PA_0 * PB_0 * PB_1)
                            + (delta[a1][b1] * delta[m][n] + delta[a1][m] * delta[b1][n] + delta[a1][n] * delta[b1][m]) * (PA_0 * PB_0 * PB_2)
                            + (delta[a1][b0] * delta[m][n] + delta[a1][m] * delta[b0][n] + delta[a1][n] * delta[b0][m]) * (PA_0 * PB_1 * PB_2)
                            + (delta[a0][b1] * delta[b2][m] + delta[a0][b2] * delta[b1][m] + delta[a0][m] * delta[b1][b2]) * (PA_1 * PA_n * PB_0)
                            + (delta[a0][b0] * delta[b2][m] + delta[a0][b2] * delta[b0][m] + delta[a0][m] * delta[b0][b2]) * (PA_1 * PA_n * PB_1)
                            + (delta[a0][b0] * delta[b1][m] + delta[a0][b1] * delta[b0][m] + delta[a0][m] * delta[b0][b1]) * (PA_1 * PA_n * PB_2)
                            + (delta[a0][b2] * delta[m][n] + delta[a0][m] * delta[b2][n] + delta[a0][n] * delta[b2][m]) * (PA_1 * PB_0 * PB_1)
                            + (delta[a0][b1] * delta[m][n] + delta[a0][m] * delta[b1][n] + delta[a0][n] * delta[b1][m]) * (PA_1 * PB_0 * PB_2)
                            + (delta[a0][b0] * delta[m][n] + delta[a0][m] * delta[b0][n] + delta[a0][n] * delta[b0][m]) * (PA_1 * PB_1 * PB_2)
                            + (delta[a0][a1] * delta[b2][m] + delta[a0][b2] * delta[a1][m] + delta[a0][m] * delta[a1][b2]) * (PA_n * PB_0 * PB_1)
                            + (delta[a0][a1] * delta[b1][m] + delta[a0][b1] * delta[a1][m] + delta[a0][m] * delta[a1][b1]) * (PA_n * PB_0 * PB_2)
                            + (delta[a0][a1] * delta[b0][m] + delta[a0][b0] * delta[a1][m] + delta[a0][m] * delta[a1][b0]) * (PA_n * PB_1 * PB_2)
                            + (delta[a0][a1] * delta[m][n] + delta[a0][m] * delta[a1][n] + delta[a0][n] * delta[a1][m]) * (PB_0 * PB_1 * PB_2)
                        )

                        + 1.0 / (a_i + a_j) * a_i * (
                            delta[b2][m] * (PA_0 * PA_1 * PA_n * PB_0 * PB_1)
                            + delta[b1][m] * (PA_0 * PA_1 * PA_n * PB_0 * PB_2)
                            + delta[b0][m] * (PA_0 * PA_1 * PA_n * PB_1 * PB_2)
                            + delta[m][n] * (PA_0 * PA_1 * PB_0 * PB_1 * PB_2)
                            + delta[a1][m] * (PA_0 * PA_n * PB_0 * PB_1 * PB_2)
                            + delta[a0][m] * (PA_1 * PA_n * PB_0 * PB_1 * PB_2)
                        )

                    )

                    + PC[m] * (

                        (-0.25) / ( (a_i + a_j) * (a_i + a_j) ) * (
                            (delta[a0][b0] * delta[a1][n] * delta[b1][b2] + delta[a0][b1] * delta[a1][n] * delta[b0][b2] + delta[a0][b2] * delta[a1][n] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[b0][b2] + delta[a0][n] * delta[a1][b2] * delta[b0][b1])
                        )

                        + (-0.5) / (a_i + a_j) * (
                            delta[a1][n] * delta[b1][b2] * (PA_0 * PB_0)
                            + delta[a1][n] * delta[b0][b2] * (PA_0 * PB_1)
                            + delta[a1][n] * delta[b0][b1] * (PA_0 * PB_2)
                            + delta[a0][n] * delta[b1][b2] * (PA_1 * PB_0)
                            + delta[a0][n] * delta[b0][b2] * (PA_1 * PB_1)
                            + delta[a0][n] * delta[b0][b1] * (PA_1 * PB_2)
                            + (delta[a0][b2] * delta[a1][n] + delta[a0][n] * delta[a1][b2]) * (PB_0 * PB_1)
                            + (delta[a0][b1] * delta[a1][n] + delta[a0][n] * delta[a1][b1]) * (PB_0 * PB_2)
                            + (delta[a0][b0] * delta[a1][n] + delta[a0][n] * delta[a1][b0]) * (PB_1 * PB_2)
                        )

                        + (-1.0) * (
                            delta[a1][n] * (PA_0 * PB_0 * PB_1 * PB_2)
                            + delta[a0][n] * (PA_1 * PB_0 * PB_1 * PB_2)
                        )

                        + 0.25 / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[a0][a1] * delta[b0][b1] * delta[b2][n] + delta[a0][a1] * delta[b0][b2] * delta[b1][n] + delta[a0][a1] * delta[b0][n] * delta[b1][b2] + delta[a0][b0] * delta[a1][b1] * delta[b2][n] + delta[a0][b0] * delta[a1][b2] * delta[b1][n] + delta[a0][b0] * delta[a1][n] * delta[b1][b2] + delta[a0][b1] * delta[a1][b0] * delta[b2][n] + delta[a0][b1] * delta[a1][b2] * delta[b0][n] + delta[a0][b1] * delta[a1][n] * delta[b0][b2] + delta[a0][b2] * delta[a1][b0] * delta[b1][n] + delta[a0][b2] * delta[a1][b1] * delta[b0][n] + delta[a0][b2] * delta[a1][n] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[b0][b2] + delta[a0][n] * delta[a1][b2] * delta[b0][b1])
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[b0][b1] * delta[b2][n] + delta[b0][b2] * delta[b1][n] + delta[b0][n] * delta[b1][b2]) * (PA_0 * PA_1)
                            + (delta[a1][b0] * delta[b1][b2] + delta[a1][b1] * delta[b0][b2] + delta[a1][b2] * delta[b0][b1]) * (PA_0 * PA_n)
                            + (delta[a1][b1] * delta[b2][n] + delta[a1][b2] * delta[b1][n] + delta[a1][n] * delta[b1][b2]) * (PA_0 * PB_0)
                            + (delta[a1][b0] * delta[b2][n] + delta[a1][b2] * delta[b0][n] + delta[a1][n] * delta[b0][b2]) * (PA_0 * PB_1)
                            + (delta[a1][b0] * delta[b1][n] + delta[a1][b1] * delta[b0][n] + delta[a1][n] * delta[b0][b1]) * (PA_0 * PB_2)
                            + (delta[a0][b0] * delta[b1][b2] + delta[a0][b1] * delta[b0][b2] + delta[a0][b2] * delta[b0][b1]) * (PA_1 * PA_n)
                            + (delta[a0][b1] * delta[b2][n] + delta[a0][b2] * delta[b1][n] + delta[a0][n] * delta[b1][b2]) * (PA_1 * PB_0)
                            + (delta[a0][b0] * delta[b2][n] + delta[a0][b2] * delta[b0][n] + delta[a0][n] * delta[b0][b2]) * (PA_1 * PB_1)
                            + (delta[a0][b0] * delta[b1][n] + delta[a0][b1] * delta[b0][n] + delta[a0][n] * delta[b0][b1]) * (PA_1 * PB_2)
                            + (delta[a0][a1] * delta[b1][b2] + delta[a0][b1] * delta[a1][b2] + delta[a0][b2] * delta[a1][b1]) * (PA_n * PB_0)
                            + (delta[a0][a1] * delta[b0][b2] + delta[a0][b0] * delta[a1][b2] + delta[a0][b2] * delta[a1][b0]) * (PA_n * PB_1)
                            + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PA_n * PB_2)
                            + (delta[a0][a1] * delta[b2][n] + delta[a0][b2] * delta[a1][n] + delta[a0][n] * delta[a1][b2]) * (PB_0 * PB_1)
                            + (delta[a0][a1] * delta[b1][n] + delta[a0][b1] * delta[a1][n] + delta[a0][n] * delta[a1][b1]) * (PB_0 * PB_2)
                            + (delta[a0][a1] * delta[b0][n] + delta[a0][b0] * delta[a1][n] + delta[a0][n] * delta[a1][b0]) * (PB_1 * PB_2)
                        )

                        + 1.0 / (a_i + a_j) * a_i * (
                            delta[b1][b2] * (PA_0 * PA_1 * PA_n * PB_0)
                            + delta[b0][b2] * (PA_0 * PA_1 * PA_n * PB_1)
                            + delta[b0][b1] * (PA_0 * PA_1 * PA_n * PB_2)
                            + delta[b2][n] * (PA_0 * PA_1 * PB_0 * PB_1)
                            + delta[b1][n] * (PA_0 * PA_1 * PB_0 * PB_2)
                            + delta[b0][n] * (PA_0 * PA_1 * PB_1 * PB_2)
                            + delta[a1][b2] * (PA_0 * PA_n * PB_0 * PB_1)
                            + delta[a1][b1] * (PA_0 * PA_n * PB_0 * PB_2)
                            + delta[a1][b0] * (PA_0 * PA_n * PB_1 * PB_2)
                            + delta[a1][n] * (PA_0 * PB_0 * PB_1 * PB_2)
                            + delta[a0][b2] * (PA_1 * PA_n * PB_0 * PB_1)
                            + delta[a0][b1] * (PA_1 * PA_n * PB_0 * PB_2)
                            + delta[a0][b0] * (PA_1 * PA_n * PB_1 * PB_2)
                            + delta[a0][n] * (PA_1 * PB_0 * PB_1 * PB_2)
                            + delta[a0][a1] * (PA_n * PB_0 * PB_1 * PB_2)
                        )

                        + 2.0 * a_i * (
                            PA_0 * PA_1 * PA_n * PB_0 * PB_1 * PB_2
                        )

                    )

                );

                // Note: minus sign from electron charge

                double mu_grad_j = (-1.0) * S_ij_00 * (

                    (

                        (-0.25) / ( (a_i + a_j) * (a_i + a_j) ) * (
                            (delta[a1][b0] * delta[b1][m] * delta[b2][n] + delta[a1][b0] * delta[b1][n] * delta[b2][m] + delta[a1][b1] * delta[b0][m] * delta[b2][n] + delta[a1][b1] * delta[b0][n] * delta[b2][m] + delta[a1][b2] * delta[b0][m] * delta[b1][n] + delta[a1][b2] * delta[b0][n] * delta[b1][m] + delta[a1][m] * delta[b0][b1] * delta[b2][n] + delta[a1][m] * delta[b0][b2] * delta[b1][n] + delta[a1][m] * delta[b0][n] * delta[b1][b2]) * (PA_0)
                            + (delta[a0][b0] * delta[b1][m] * delta[b2][n] + delta[a0][b0] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[b0][m] * delta[b2][n] + delta[a0][b1] * delta[b0][n] * delta[b2][m] + delta[a0][b2] * delta[b0][m] * delta[b1][n] + delta[a0][b2] * delta[b0][n] * delta[b1][m] + delta[a0][m] * delta[b0][b1] * delta[b2][n] + delta[a0][m] * delta[b0][b2] * delta[b1][n] + delta[a0][m] * delta[b0][n] * delta[b1][b2]) * (PA_1)
                            + (delta[a0][a1] * delta[b1][m] * delta[b2][n] + delta[a0][a1] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[a1][m] * delta[b2][n] + delta[a0][b2] * delta[a1][m] * delta[b1][n] + delta[a0][m] * delta[a1][b1] * delta[b2][n] + delta[a0][m] * delta[a1][b2] * delta[b1][n]) * (PB_0)
                            + (delta[a0][a1] * delta[b0][m] * delta[b2][n] + delta[a0][a1] * delta[b0][n] * delta[b2][m] + delta[a0][b0] * delta[a1][m] * delta[b2][n] + delta[a0][b2] * delta[a1][m] * delta[b0][n] + delta[a0][m] * delta[a1][b0] * delta[b2][n] + delta[a0][m] * delta[a1][b2] * delta[b0][n]) * (PB_1)
                            + (delta[a0][a1] * delta[b0][m] * delta[b1][n] + delta[a0][a1] * delta[b0][n] * delta[b1][m] + delta[a0][b0] * delta[a1][m] * delta[b1][n] + delta[a0][b1] * delta[a1][m] * delta[b0][n] + delta[a0][m] * delta[a1][b0] * delta[b1][n] + delta[a0][m] * delta[a1][b1] * delta[b0][n]) * (PB_2)
                        )

                        + (-0.5) / (a_i + a_j) * (
                            (delta[b1][m] * delta[b2][n] + delta[b1][n] * delta[b2][m]) * (PA_0 * PA_1 * PB_0)
                            + (delta[b0][m] * delta[b2][n] + delta[b0][n] * delta[b2][m]) * (PA_0 * PA_1 * PB_1)
                            + (delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PA_0 * PA_1 * PB_2)
                            + delta[a1][m] * delta[b2][n] * (PA_0 * PB_0 * PB_1)
                            + delta[a1][m] * delta[b1][n] * (PA_0 * PB_0 * PB_2)
                            + delta[a1][m] * delta[b0][n] * (PA_0 * PB_1 * PB_2)
                            + delta[a0][m] * delta[b2][n] * (PA_1 * PB_0 * PB_1)
                            + delta[a0][m] * delta[b1][n] * (PA_1 * PB_0 * PB_2)
                            + delta[a0][m] * delta[b0][n] * (PA_1 * PB_1 * PB_2)
                        )

                        + 0.25 / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[a1][b0] * delta[b1][b2] * delta[m][n] + delta[a1][b0] * delta[b1][m] * delta[b2][n] + delta[a1][b0] * delta[b1][n] * delta[b2][m] + delta[a1][b1] * delta[b0][b2] * delta[m][n] + delta[a1][b1] * delta[b0][m] * delta[b2][n] + delta[a1][b1] * delta[b0][n] * delta[b2][m] + delta[a1][b2] * delta[b0][b1] * delta[m][n] + delta[a1][b2] * delta[b0][m] * delta[b1][n] + delta[a1][b2] * delta[b0][n] * delta[b1][m] + delta[a1][m] * delta[b0][b1] * delta[b2][n] + delta[a1][m] * delta[b0][b2] * delta[b1][n] + delta[a1][m] * delta[b0][n] * delta[b1][b2] + delta[a1][n] * delta[b0][b1] * delta[b2][m] + delta[a1][n] * delta[b0][b2] * delta[b1][m] + delta[a1][n] * delta[b0][m] * delta[b1][b2]) * (PA_0)
                            + (delta[a0][b0] * delta[b1][b2] * delta[m][n] + delta[a0][b0] * delta[b1][m] * delta[b2][n] + delta[a0][b0] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[b0][b2] * delta[m][n] + delta[a0][b1] * delta[b0][m] * delta[b2][n] + delta[a0][b1] * delta[b0][n] * delta[b2][m] + delta[a0][b2] * delta[b0][b1] * delta[m][n] + delta[a0][b2] * delta[b0][m] * delta[b1][n] + delta[a0][b2] * delta[b0][n] * delta[b1][m] + delta[a0][m] * delta[b0][b1] * delta[b2][n] + delta[a0][m] * delta[b0][b2] * delta[b1][n] + delta[a0][m] * delta[b0][n] * delta[b1][b2] + delta[a0][n] * delta[b0][b1] * delta[b2][m] + delta[a0][n] * delta[b0][b2] * delta[b1][m] + delta[a0][n] * delta[b0][m] * delta[b1][b2]) * (PA_1)
                            + (delta[a0][a1] * delta[b1][b2] * delta[m][n] + delta[a0][a1] * delta[b1][m] * delta[b2][n] + delta[a0][a1] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[a1][b2] * delta[m][n] + delta[a0][b1] * delta[a1][m] * delta[b2][n] + delta[a0][b1] * delta[a1][n] * delta[b2][m] + delta[a0][b2] * delta[a1][b1] * delta[m][n] + delta[a0][b2] * delta[a1][m] * delta[b1][n] + delta[a0][b2] * delta[a1][n] * delta[b1][m] + delta[a0][m] * delta[a1][b1] * delta[b2][n] + delta[a0][m] * delta[a1][b2] * delta[b1][n] + delta[a0][m] * delta[a1][n] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[b2][m] + delta[a0][n] * delta[a1][b2] * delta[b1][m] + delta[a0][n] * delta[a1][m] * delta[b1][b2]) * (PB_0)
                            + (delta[a0][a1] * delta[b0][b2] * delta[m][n] + delta[a0][a1] * delta[b0][m] * delta[b2][n] + delta[a0][a1] * delta[b0][n] * delta[b2][m] + delta[a0][b0] * delta[a1][b2] * delta[m][n] + delta[a0][b0] * delta[a1][m] * delta[b2][n] + delta[a0][b0] * delta[a1][n] * delta[b2][m] + delta[a0][b2] * delta[a1][b0] * delta[m][n] + delta[a0][b2] * delta[a1][m] * delta[b0][n] + delta[a0][b2] * delta[a1][n] * delta[b0][m] + delta[a0][m] * delta[a1][b0] * delta[b2][n] + delta[a0][m] * delta[a1][b2] * delta[b0][n] + delta[a0][m] * delta[a1][n] * delta[b0][b2] + delta[a0][n] * delta[a1][b0] * delta[b2][m] + delta[a0][n] * delta[a1][b2] * delta[b0][m] + delta[a0][n] * delta[a1][m] * delta[b0][b2]) * (PB_1)
                            + (delta[a0][a1] * delta[b0][b1] * delta[m][n] + delta[a0][a1] * delta[b0][m] * delta[b1][n] + delta[a0][a1] * delta[b0][n] * delta[b1][m] + delta[a0][b0] * delta[a1][b1] * delta[m][n] + delta[a0][b0] * delta[a1][m] * delta[b1][n] + delta[a0][b0] * delta[a1][n] * delta[b1][m] + delta[a0][b1] * delta[a1][b0] * delta[m][n] + delta[a0][b1] * delta[a1][m] * delta[b0][n] + delta[a0][b1] * delta[a1][n] * delta[b0][m] + delta[a0][m] * delta[a1][b0] * delta[b1][n] + delta[a0][m] * delta[a1][b1] * delta[b0][n] + delta[a0][m] * delta[a1][n] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[b1][m] + delta[a0][n] * delta[a1][b1] * delta[b0][m] + delta[a0][n] * delta[a1][m] * delta[b0][b1]) * (PB_2)
                            + (delta[a0][a1] * delta[b0][b1] * delta[b2][m] + delta[a0][a1] * delta[b0][b2] * delta[b1][m] + delta[a0][a1] * delta[b0][m] * delta[b1][b2] + delta[a0][b0] * delta[a1][b1] * delta[b2][m] + delta[a0][b0] * delta[a1][b2] * delta[b1][m] + delta[a0][b0] * delta[a1][m] * delta[b1][b2] + delta[a0][b1] * delta[a1][b0] * delta[b2][m] + delta[a0][b1] * delta[a1][b2] * delta[b0][m] + delta[a0][b1] * delta[a1][m] * delta[b0][b2] + delta[a0][b2] * delta[a1][b0] * delta[b1][m] + delta[a0][b2] * delta[a1][b1] * delta[b0][m] + delta[a0][b2] * delta[a1][m] * delta[b0][b1] + delta[a0][m] * delta[a1][b0] * delta[b1][b2] + delta[a0][m] * delta[a1][b1] * delta[b0][b2] + delta[a0][m] * delta[a1][b2] * delta[b0][b1]) * (PB_n)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[b1][b2] * delta[m][n] + delta[b1][m] * delta[b2][n] + delta[b1][n] * delta[b2][m]) * (PA_0 * PA_1 * PB_0)
                            + (delta[b0][b2] * delta[m][n] + delta[b0][m] * delta[b2][n] + delta[b0][n] * delta[b2][m]) * (PA_0 * PA_1 * PB_1)
                            + (delta[b0][b1] * delta[m][n] + delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PA_0 * PA_1 * PB_2)
                            + (delta[b0][b1] * delta[b2][m] + delta[b0][b2] * delta[b1][m] + delta[b0][m] * delta[b1][b2]) * (PA_0 * PA_1 * PB_n)
                            + (delta[a1][b2] * delta[m][n] + delta[a1][m] * delta[b2][n] + delta[a1][n] * delta[b2][m]) * (PA_0 * PB_0 * PB_1)
                            + (delta[a1][b1] * delta[m][n] + delta[a1][m] * delta[b1][n] + delta[a1][n] * delta[b1][m]) * (PA_0 * PB_0 * PB_2)
                            + (delta[a1][b1] * delta[b2][m] + delta[a1][b2] * delta[b1][m] + delta[a1][m] * delta[b1][b2]) * (PA_0 * PB_0 * PB_n)
                            + (delta[a1][b0] * delta[m][n] + delta[a1][m] * delta[b0][n] + delta[a1][n] * delta[b0][m]) * (PA_0 * PB_1 * PB_2)
                            + (delta[a1][b0] * delta[b2][m] + delta[a1][b2] * delta[b0][m] + delta[a1][m] * delta[b0][b2]) * (PA_0 * PB_1 * PB_n)
                            + (delta[a1][b0] * delta[b1][m] + delta[a1][b1] * delta[b0][m] + delta[a1][m] * delta[b0][b1]) * (PA_0 * PB_2 * PB_n)
                            + (delta[a0][b2] * delta[m][n] + delta[a0][m] * delta[b2][n] + delta[a0][n] * delta[b2][m]) * (PA_1 * PB_0 * PB_1)
                            + (delta[a0][b1] * delta[m][n] + delta[a0][m] * delta[b1][n] + delta[a0][n] * delta[b1][m]) * (PA_1 * PB_0 * PB_2)
                            + (delta[a0][b1] * delta[b2][m] + delta[a0][b2] * delta[b1][m] + delta[a0][m] * delta[b1][b2]) * (PA_1 * PB_0 * PB_n)
                            + (delta[a0][b0] * delta[m][n] + delta[a0][m] * delta[b0][n] + delta[a0][n] * delta[b0][m]) * (PA_1 * PB_1 * PB_2)
                            + (delta[a0][b0] * delta[b2][m] + delta[a0][b2] * delta[b0][m] + delta[a0][m] * delta[b0][b2]) * (PA_1 * PB_1 * PB_n)
                            + (delta[a0][b0] * delta[b1][m] + delta[a0][b1] * delta[b0][m] + delta[a0][m] * delta[b0][b1]) * (PA_1 * PB_2 * PB_n)
                            + (delta[a0][a1] * delta[m][n] + delta[a0][m] * delta[a1][n] + delta[a0][n] * delta[a1][m]) * (PB_0 * PB_1 * PB_2)
                            + (delta[a0][a1] * delta[b2][m] + delta[a0][b2] * delta[a1][m] + delta[a0][m] * delta[a1][b2]) * (PB_0 * PB_1 * PB_n)
                            + (delta[a0][a1] * delta[b1][m] + delta[a0][b1] * delta[a1][m] + delta[a0][m] * delta[a1][b1]) * (PB_0 * PB_2 * PB_n)
                            + (delta[a0][a1] * delta[b0][m] + delta[a0][b0] * delta[a1][m] + delta[a0][m] * delta[a1][b0]) * (PB_1 * PB_2 * PB_n)
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[m][n] * (PA_0 * PA_1 * PB_0 * PB_1 * PB_2)
                            + delta[b2][m] * (PA_0 * PA_1 * PB_0 * PB_1 * PB_n)
                            + delta[b1][m] * (PA_0 * PA_1 * PB_0 * PB_2 * PB_n)
                            + delta[b0][m] * (PA_0 * PA_1 * PB_1 * PB_2 * PB_n)
                            + delta[a1][m] * (PA_0 * PB_0 * PB_1 * PB_2 * PB_n)
                            + delta[a0][m] * (PA_1 * PB_0 * PB_1 * PB_2 * PB_n)
                        )

                    )

                    + PC[m] * (

                        (-0.25) / ( (a_i + a_j) * (a_i + a_j) ) * (
                            (delta[a0][a1] * delta[b0][b1] * delta[b2][n] + delta[a0][a1] * delta[b0][b2] * delta[b1][n] + delta[a0][a1] * delta[b0][n] * delta[b1][b2] + delta[a0][b0] * delta[a1][b1] * delta[b2][n] + delta[a0][b0] * delta[a1][b2] * delta[b1][n] + delta[a0][b1] * delta[a1][b0] * delta[b2][n] + delta[a0][b1] * delta[a1][b2] * delta[b0][n] + delta[a0][b2] * delta[a1][b0] * delta[b1][n] + delta[a0][b2] * delta[a1][b1] * delta[b0][n])
                        )

                        + (-0.5) / (a_i + a_j) * (
                            (delta[b0][b1] * delta[b2][n] + delta[b0][b2] * delta[b1][n] + delta[b0][n] * delta[b1][b2]) * (PA_0 * PA_1)
                            + (delta[a1][b1] * delta[b2][n] + delta[a1][b2] * delta[b1][n]) * (PA_0 * PB_0)
                            + (delta[a1][b0] * delta[b2][n] + delta[a1][b2] * delta[b0][n]) * (PA_0 * PB_1)
                            + (delta[a1][b0] * delta[b1][n] + delta[a1][b1] * delta[b0][n]) * (PA_0 * PB_2)
                            + (delta[a0][b1] * delta[b2][n] + delta[a0][b2] * delta[b1][n]) * (PA_1 * PB_0)
                            + (delta[a0][b0] * delta[b2][n] + delta[a0][b2] * delta[b0][n]) * (PA_1 * PB_1)
                            + (delta[a0][b0] * delta[b1][n] + delta[a0][b1] * delta[b0][n]) * (PA_1 * PB_2)
                            + delta[a0][a1] * delta[b2][n] * (PB_0 * PB_1)
                            + delta[a0][a1] * delta[b1][n] * (PB_0 * PB_2)
                            + delta[a0][a1] * delta[b0][n] * (PB_1 * PB_2)
                        )

                        + (-1.0) * (
                            delta[b2][n] * (PA_0 * PA_1 * PB_0 * PB_1)
                            + delta[b1][n] * (PA_0 * PA_1 * PB_0 * PB_2)
                            + delta[b0][n] * (PA_0 * PA_1 * PB_1 * PB_2)
                        )

                        + 0.25 / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[a0][a1] * delta[b0][b1] * delta[b2][n] + delta[a0][a1] * delta[b0][b2] * delta[b1][n] + delta[a0][a1] * delta[b0][n] * delta[b1][b2] + delta[a0][b0] * delta[a1][b1] * delta[b2][n] + delta[a0][b0] * delta[a1][b2] * delta[b1][n] + delta[a0][b0] * delta[a1][n] * delta[b1][b2] + delta[a0][b1] * delta[a1][b0] * delta[b2][n] + delta[a0][b1] * delta[a1][b2] * delta[b0][n] + delta[a0][b1] * delta[a1][n] * delta[b0][b2] + delta[a0][b2] * delta[a1][b0] * delta[b1][n] + delta[a0][b2] * delta[a1][b1] * delta[b0][n] + delta[a0][b2] * delta[a1][n] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[b0][b2] + delta[a0][n] * delta[a1][b2] * delta[b0][b1])
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[b0][b1] * delta[b2][n] + delta[b0][b2] * delta[b1][n] + delta[b0][n] * delta[b1][b2]) * (PA_0 * PA_1)
                            + (delta[a1][b1] * delta[b2][n] + delta[a1][b2] * delta[b1][n] + delta[a1][n] * delta[b1][b2]) * (PA_0 * PB_0)
                            + (delta[a1][b0] * delta[b2][n] + delta[a1][b2] * delta[b0][n] + delta[a1][n] * delta[b0][b2]) * (PA_0 * PB_1)
                            + (delta[a1][b0] * delta[b1][n] + delta[a1][b1] * delta[b0][n] + delta[a1][n] * delta[b0][b1]) * (PA_0 * PB_2)
                            + (delta[a1][b0] * delta[b1][b2] + delta[a1][b1] * delta[b0][b2] + delta[a1][b2] * delta[b0][b1]) * (PA_0 * PB_n)
                            + (delta[a0][b1] * delta[b2][n] + delta[a0][b2] * delta[b1][n] + delta[a0][n] * delta[b1][b2]) * (PA_1 * PB_0)
                            + (delta[a0][b0] * delta[b2][n] + delta[a0][b2] * delta[b0][n] + delta[a0][n] * delta[b0][b2]) * (PA_1 * PB_1)
                            + (delta[a0][b0] * delta[b1][n] + delta[a0][b1] * delta[b0][n] + delta[a0][n] * delta[b0][b1]) * (PA_1 * PB_2)
                            + (delta[a0][b0] * delta[b1][b2] + delta[a0][b1] * delta[b0][b2] + delta[a0][b2] * delta[b0][b1]) * (PA_1 * PB_n)
                            + (delta[a0][a1] * delta[b2][n] + delta[a0][b2] * delta[a1][n] + delta[a0][n] * delta[a1][b2]) * (PB_0 * PB_1)
                            + (delta[a0][a1] * delta[b1][n] + delta[a0][b1] * delta[a1][n] + delta[a0][n] * delta[a1][b1]) * (PB_0 * PB_2)
                            + (delta[a0][a1] * delta[b1][b2] + delta[a0][b1] * delta[a1][b2] + delta[a0][b2] * delta[a1][b1]) * (PB_0 * PB_n)
                            + (delta[a0][a1] * delta[b0][n] + delta[a0][b0] * delta[a1][n] + delta[a0][n] * delta[a1][b0]) * (PB_1 * PB_2)
                            + (delta[a0][a1] * delta[b0][b2] + delta[a0][b0] * delta[a1][b2] + delta[a0][b2] * delta[a1][b0]) * (PB_1 * PB_n)
                            + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PB_2 * PB_n)
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[b2][n] * (PA_0 * PA_1 * PB_0 * PB_1)
                            + delta[b1][n] * (PA_0 * PA_1 * PB_0 * PB_2)
                            + delta[b1][b2] * (PA_0 * PA_1 * PB_0 * PB_n)
                            + delta[b0][n] * (PA_0 * PA_1 * PB_1 * PB_2)
                            + delta[b0][b2] * (PA_0 * PA_1 * PB_1 * PB_n)
                            + delta[b0][b1] * (PA_0 * PA_1 * PB_2 * PB_n)
                            + delta[a1][n] * (PA_0 * PB_0 * PB_1 * PB_2)
                            + delta[a1][b2] * (PA_0 * PB_0 * PB_1 * PB_n)
                            + delta[a1][b1] * (PA_0 * PB_0 * PB_2 * PB_n)
                            + delta[a1][b0] * (PA_0 * PB_1 * PB_2 * PB_n)
                            + delta[a0][n] * (PA_1 * PB_0 * PB_1 * PB_2)
                            + delta[a0][b2] * (PA_1 * PB_0 * PB_1 * PB_n)
                            + delta[a0][b1] * (PA_1 * PB_0 * PB_2 * PB_n)
                            + delta[a0][b0] * (PA_1 * PB_1 * PB_2 * PB_n)
                            + delta[a0][a1] * (PB_0 * PB_1 * PB_2 * PB_n)
                        )

                        + 2.0 * a_j * (
                            PA_0 * PA_1 * PB_0 * PB_1 * PB_2 * PB_n
                        )

                    )

                );

                for (const auto& i_cgto_sph_ind_coef : cart_sph_d[i_cgto])
                {
                    auto i_cgto_sph = i_cgto_sph_ind_coef.first;
                    auto i_coef_sph = i_cgto_sph_ind_coef.second;

                    for (const auto& j_cgto_sph_ind_coef : cart_sph_f[j_cgto])
                    {
                        auto j_cgto_sph = j_cgto_sph_ind_coef.first;
                        auto j_coef_sph = j_cgto_sph_ind_coef.second;

                        auto coef_sph = i_coef_sph * j_coef_sph;

                        auto Dij = D[i_cgto_sph * naos + j_cgto_sph];
                        auto Dji = D[j_cgto_sph * naos + i_cgto_sph];

                        double D_sym = (Dij + Dji);

                        double grad_i = mu_grad_i * coef_sph * D_sym;
                        double grad_j = mu_grad_j * coef_sph * D_sym;

                        mu_grad_omp[thread_id][m].row(i_atom)[n] += grad_i;
                        mu_grad_omp[thread_id][m].row(j_atom)[n] += grad_j;
                    }
                }
            }
        }
    }


    // F-F block

    #pragma omp parallel for schedule(static, PAD_SIZE)
    for (int ij = 0; ij < ff_prim_pair_count; ij++)
    {
        const auto thread_id = omp_get_thread_num();

        const auto i = std::get<0>(pair_inds_ff[ij]);
        const auto j = std::get<1>(pair_inds_ff[ij]);

        const auto a_i = f_prim_info[i / 10 + f_prim_count * 0];
        const auto c_i = f_prim_info[i / 10 + f_prim_count * 1];
        const auto x_i = f_prim_info[i / 10 + f_prim_count * 2];
        const auto y_i = f_prim_info[i / 10 + f_prim_count * 3];
        const auto z_i = f_prim_info[i / 10 + f_prim_count * 4];

        const auto a_j = f_prim_info[j / 10 + f_prim_count * 0];
        const auto c_j = f_prim_info[j / 10 + f_prim_count * 1];
        const auto x_j = f_prim_info[j / 10 + f_prim_count * 2];
        const auto y_j = f_prim_info[j / 10 + f_prim_count * 3];
        const auto z_j = f_prim_info[j / 10 + f_prim_count * 4];

        const auto a0 = f_cart_inds[i % 10][0];
        const auto a1 = f_cart_inds[i % 10][1];
        const auto a2 = f_cart_inds[i % 10][2];

        const auto b0 = f_cart_inds[j % 10][0];
        const auto b1 = f_cart_inds[j % 10][1];
        const auto b2 = f_cart_inds[j % 10][2];

        const auto i_cgto = f_prim_aoinds[(i / 10) + f_prim_count * (i % 10)];
        const auto j_cgto = f_prim_aoinds[(j / 10) + f_prim_count * (j % 10)];

        const auto i_atom = cart_ao_to_atom_ids[i_cgto];
        const auto j_atom = cart_ao_to_atom_ids[j_cgto];

        const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};

        const auto r2_ij = rij[0] * rij[0] + rij[1] * rij[1] + rij[2] * rij[2];

        const auto S_ij_00 = c_i * c_j * std::pow(MATH_CONST_PI / (a_i + a_j), 1.5) * std::exp(-a_i * a_j / (a_i + a_j) * r2_ij);

        const double PC[3] = {(a_i * x_i + a_j * x_j) / (a_i + a_j) - origin[0],
                              (a_i * y_i + a_j * y_j) / (a_i + a_j) - origin[1],
                              (a_i * z_i + a_j * z_j) / (a_i + a_j) - origin[2]};

        const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
        const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
        const auto PA_2 = (a_j / (a_i + a_j)) * rij[a2];

        const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
        const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
        const auto PB_2 = (-a_i / (a_i + a_j)) * rij[b2];


        // J. Chem. Phys. 84, 3963-3974 (1986)

        // loop over electric dipole components
        for (int m = 0; m < 3; m++)
        {
            // loop over gradient components
            for (int n = 0; n < 3; n++)
            {
                const auto PA_n = (a_j / (a_i + a_j)) * rij[n];
                const auto PB_n = (-a_i / (a_i + a_j)) * rij[n];

                // Note: minus sign from electron charge

                double mu_grad_i = (-1.0) * S_ij_00 * (

                    (

                        (-0.125) / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * (
                            (delta[a0][a1] * delta[a2][n] * delta[b0][b1] * delta[b2][m] + delta[a0][a1] * delta[a2][n] * delta[b0][b2] * delta[b1][m] + delta[a0][a1] * delta[a2][n] * delta[b0][m] * delta[b1][b2] + delta[a0][a2] * delta[a1][n] * delta[b0][b1] * delta[b2][m] + delta[a0][a2] * delta[a1][n] * delta[b0][b2] * delta[b1][m] + delta[a0][a2] * delta[a1][n] * delta[b0][m] * delta[b1][b2] + delta[a0][b0] * delta[a1][b1] * delta[a2][n] * delta[b2][m] + delta[a0][b0] * delta[a1][b2] * delta[a2][n] * delta[b1][m] + delta[a0][b0] * delta[a1][m] * delta[a2][n] * delta[b1][b2] + delta[a0][b0] * delta[a1][n] * delta[a2][b1] * delta[b2][m] + delta[a0][b0] * delta[a1][n] * delta[a2][b2] * delta[b1][m] + delta[a0][b0] * delta[a1][n] * delta[a2][m] * delta[b1][b2] + delta[a0][b1] * delta[a1][b0] * delta[a2][n] * delta[b2][m] + delta[a0][b1] * delta[a1][b2] * delta[a2][n] * delta[b0][m] + delta[a0][b1] * delta[a1][m] * delta[a2][n] * delta[b0][b2] + delta[a0][b1] * delta[a1][n] * delta[a2][b0] * delta[b2][m] + delta[a0][b1] * delta[a1][n] * delta[a2][b2] * delta[b0][m] + delta[a0][b1] * delta[a1][n] * delta[a2][m] * delta[b0][b2] + delta[a0][b2] * delta[a1][b0] * delta[a2][n] * delta[b1][m] + delta[a0][b2] * delta[a1][b1] * delta[a2][n] * delta[b0][m] + delta[a0][b2] * delta[a1][m] * delta[a2][n] * delta[b0][b1] + delta[a0][b2] * delta[a1][n] * delta[a2][b0] * delta[b1][m] + delta[a0][b2] * delta[a1][n] * delta[a2][b1] * delta[b0][m] + delta[a0][b2] * delta[a1][n] * delta[a2][m] * delta[b0][b1] + delta[a0][m] * delta[a1][b0] * delta[a2][n] * delta[b1][b2] + delta[a0][m] * delta[a1][b1] * delta[a2][n] * delta[b0][b2] + delta[a0][m] * delta[a1][b2] * delta[a2][n] * delta[b0][b1] + delta[a0][m] * delta[a1][n] * delta[a2][b0] * delta[b1][b2] + delta[a0][m] * delta[a1][n] * delta[a2][b1] * delta[b0][b2] + delta[a0][m] * delta[a1][n] * delta[a2][b2] * delta[b0][b1] + delta[a0][n] * delta[a1][a2] * delta[b0][b1] * delta[b2][m] + delta[a0][n] * delta[a1][a2] * delta[b0][b2] * delta[b1][m] + delta[a0][n] * delta[a1][a2] * delta[b0][m] * delta[b1][b2] + delta[a0][n] * delta[a1][b0] * delta[a2][b1] * delta[b2][m] + delta[a0][n] * delta[a1][b0] * delta[a2][b2] * delta[b1][m] + delta[a0][n] * delta[a1][b0] * delta[a2][m] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[a2][b0] * delta[b2][m] + delta[a0][n] * delta[a1][b1] * delta[a2][b2] * delta[b0][m] + delta[a0][n] * delta[a1][b1] * delta[a2][m] * delta[b0][b2] + delta[a0][n] * delta[a1][b2] * delta[a2][b0] * delta[b1][m] + delta[a0][n] * delta[a1][b2] * delta[a2][b1] * delta[b0][m] + delta[a0][n] * delta[a1][b2] * delta[a2][m] * delta[b0][b1] + delta[a0][n] * delta[a1][m] * delta[a2][b0] * delta[b1][b2] + delta[a0][n] * delta[a1][m] * delta[a2][b1] * delta[b0][b2] + delta[a0][n] * delta[a1][m] * delta[a2][b2] * delta[b0][b1])
                        )

                        + (-0.25) / ( (a_i + a_j) * (a_i + a_j) ) * (
                            (delta[a2][n] * delta[b0][b1] * delta[b2][m] + delta[a2][n] * delta[b0][b2] * delta[b1][m] + delta[a2][n] * delta[b0][m] * delta[b1][b2]) * (PA_0 * PA_1)
                            + (delta[a1][n] * delta[b0][b1] * delta[b2][m] + delta[a1][n] * delta[b0][b2] * delta[b1][m] + delta[a1][n] * delta[b0][m] * delta[b1][b2]) * (PA_0 * PA_2)
                            + (delta[a1][b1] * delta[a2][n] * delta[b2][m] + delta[a1][b2] * delta[a2][n] * delta[b1][m] + delta[a1][m] * delta[a2][n] * delta[b1][b2] + delta[a1][n] * delta[a2][b1] * delta[b2][m] + delta[a1][n] * delta[a2][b2] * delta[b1][m] + delta[a1][n] * delta[a2][m] * delta[b1][b2]) * (PA_0 * PB_0)
                            + (delta[a1][b0] * delta[a2][n] * delta[b2][m] + delta[a1][b2] * delta[a2][n] * delta[b0][m] + delta[a1][m] * delta[a2][n] * delta[b0][b2] + delta[a1][n] * delta[a2][b0] * delta[b2][m] + delta[a1][n] * delta[a2][b2] * delta[b0][m] + delta[a1][n] * delta[a2][m] * delta[b0][b2]) * (PA_0 * PB_1)
                            + (delta[a1][b0] * delta[a2][n] * delta[b1][m] + delta[a1][b1] * delta[a2][n] * delta[b0][m] + delta[a1][m] * delta[a2][n] * delta[b0][b1] + delta[a1][n] * delta[a2][b0] * delta[b1][m] + delta[a1][n] * delta[a2][b1] * delta[b0][m] + delta[a1][n] * delta[a2][m] * delta[b0][b1]) * (PA_0 * PB_2)
                            + (delta[a0][n] * delta[b0][b1] * delta[b2][m] + delta[a0][n] * delta[b0][b2] * delta[b1][m] + delta[a0][n] * delta[b0][m] * delta[b1][b2]) * (PA_1 * PA_2)
                            + (delta[a0][b1] * delta[a2][n] * delta[b2][m] + delta[a0][b2] * delta[a2][n] * delta[b1][m] + delta[a0][m] * delta[a2][n] * delta[b1][b2] + delta[a0][n] * delta[a2][b1] * delta[b2][m] + delta[a0][n] * delta[a2][b2] * delta[b1][m] + delta[a0][n] * delta[a2][m] * delta[b1][b2]) * (PA_1 * PB_0)
                            + (delta[a0][b0] * delta[a2][n] * delta[b2][m] + delta[a0][b2] * delta[a2][n] * delta[b0][m] + delta[a0][m] * delta[a2][n] * delta[b0][b2] + delta[a0][n] * delta[a2][b0] * delta[b2][m] + delta[a0][n] * delta[a2][b2] * delta[b0][m] + delta[a0][n] * delta[a2][m] * delta[b0][b2]) * (PA_1 * PB_1)
                            + (delta[a0][b0] * delta[a2][n] * delta[b1][m] + delta[a0][b1] * delta[a2][n] * delta[b0][m] + delta[a0][m] * delta[a2][n] * delta[b0][b1] + delta[a0][n] * delta[a2][b0] * delta[b1][m] + delta[a0][n] * delta[a2][b1] * delta[b0][m] + delta[a0][n] * delta[a2][m] * delta[b0][b1]) * (PA_1 * PB_2)
                            + (delta[a0][b1] * delta[a1][n] * delta[b2][m] + delta[a0][b2] * delta[a1][n] * delta[b1][m] + delta[a0][m] * delta[a1][n] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[b2][m] + delta[a0][n] * delta[a1][b2] * delta[b1][m] + delta[a0][n] * delta[a1][m] * delta[b1][b2]) * (PA_2 * PB_0)
                            + (delta[a0][b0] * delta[a1][n] * delta[b2][m] + delta[a0][b2] * delta[a1][n] * delta[b0][m] + delta[a0][m] * delta[a1][n] * delta[b0][b2] + delta[a0][n] * delta[a1][b0] * delta[b2][m] + delta[a0][n] * delta[a1][b2] * delta[b0][m] + delta[a0][n] * delta[a1][m] * delta[b0][b2]) * (PA_2 * PB_1)
                            + (delta[a0][b0] * delta[a1][n] * delta[b1][m] + delta[a0][b1] * delta[a1][n] * delta[b0][m] + delta[a0][m] * delta[a1][n] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[b1][m] + delta[a0][n] * delta[a1][b1] * delta[b0][m] + delta[a0][n] * delta[a1][m] * delta[b0][b1]) * (PA_2 * PB_2)
                            + (delta[a0][a1] * delta[a2][n] * delta[b2][m] + delta[a0][a2] * delta[a1][n] * delta[b2][m] + delta[a0][b2] * delta[a1][m] * delta[a2][n] + delta[a0][b2] * delta[a1][n] * delta[a2][m] + delta[a0][m] * delta[a1][b2] * delta[a2][n] + delta[a0][m] * delta[a1][n] * delta[a2][b2] + delta[a0][n] * delta[a1][a2] * delta[b2][m] + delta[a0][n] * delta[a1][b2] * delta[a2][m] + delta[a0][n] * delta[a1][m] * delta[a2][b2]) * (PB_0 * PB_1)
                            + (delta[a0][a1] * delta[a2][n] * delta[b1][m] + delta[a0][a2] * delta[a1][n] * delta[b1][m] + delta[a0][b1] * delta[a1][m] * delta[a2][n] + delta[a0][b1] * delta[a1][n] * delta[a2][m] + delta[a0][m] * delta[a1][b1] * delta[a2][n] + delta[a0][m] * delta[a1][n] * delta[a2][b1] + delta[a0][n] * delta[a1][a2] * delta[b1][m] + delta[a0][n] * delta[a1][b1] * delta[a2][m] + delta[a0][n] * delta[a1][m] * delta[a2][b1]) * (PB_0 * PB_2)
                            + (delta[a0][a1] * delta[a2][n] * delta[b0][m] + delta[a0][a2] * delta[a1][n] * delta[b0][m] + delta[a0][b0] * delta[a1][m] * delta[a2][n] + delta[a0][b0] * delta[a1][n] * delta[a2][m] + delta[a0][m] * delta[a1][b0] * delta[a2][n] + delta[a0][m] * delta[a1][n] * delta[a2][b0] + delta[a0][n] * delta[a1][a2] * delta[b0][m] + delta[a0][n] * delta[a1][b0] * delta[a2][m] + delta[a0][n] * delta[a1][m] * delta[a2][b0]) * (PB_1 * PB_2)
                        )

                        + (-0.5) / (a_i + a_j) * (
                            delta[a2][n] * delta[b2][m] * (PA_0 * PA_1 * PB_0 * PB_1)
                            + delta[a2][n] * delta[b1][m] * (PA_0 * PA_1 * PB_0 * PB_2)
                            + delta[a2][n] * delta[b0][m] * (PA_0 * PA_1 * PB_1 * PB_2)
                            + delta[a1][n] * delta[b2][m] * (PA_0 * PA_2 * PB_0 * PB_1)
                            + delta[a1][n] * delta[b1][m] * (PA_0 * PA_2 * PB_0 * PB_2)
                            + delta[a1][n] * delta[b0][m] * (PA_0 * PA_2 * PB_1 * PB_2)
                            + (delta[a1][m] * delta[a2][n] + delta[a1][n] * delta[a2][m]) * (PA_0 * PB_0 * PB_1 * PB_2)
                            + delta[a0][n] * delta[b2][m] * (PA_1 * PA_2 * PB_0 * PB_1)
                            + delta[a0][n] * delta[b1][m] * (PA_1 * PA_2 * PB_0 * PB_2)
                            + delta[a0][n] * delta[b0][m] * (PA_1 * PA_2 * PB_1 * PB_2)
                            + (delta[a0][m] * delta[a2][n] + delta[a0][n] * delta[a2][m]) * (PA_1 * PB_0 * PB_1 * PB_2)
                            + (delta[a0][m] * delta[a1][n] + delta[a0][n] * delta[a1][m]) * (PA_2 * PB_0 * PB_1 * PB_2)
                        )

                        + 0.125 / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[a0][a1] * delta[a2][b0] * delta[b1][b2] * delta[m][n] + delta[a0][a1] * delta[a2][b0] * delta[b1][m] * delta[b2][n] + delta[a0][a1] * delta[a2][b0] * delta[b1][n] * delta[b2][m] + delta[a0][a1] * delta[a2][b1] * delta[b0][b2] * delta[m][n] + delta[a0][a1] * delta[a2][b1] * delta[b0][m] * delta[b2][n] + delta[a0][a1] * delta[a2][b1] * delta[b0][n] * delta[b2][m] + delta[a0][a1] * delta[a2][b2] * delta[b0][b1] * delta[m][n] + delta[a0][a1] * delta[a2][b2] * delta[b0][m] * delta[b1][n] + delta[a0][a1] * delta[a2][b2] * delta[b0][n] * delta[b1][m] + delta[a0][a1] * delta[a2][m] * delta[b0][b1] * delta[b2][n] + delta[a0][a1] * delta[a2][m] * delta[b0][b2] * delta[b1][n] + delta[a0][a1] * delta[a2][m] * delta[b0][n] * delta[b1][b2] + delta[a0][a1] * delta[a2][n] * delta[b0][b1] * delta[b2][m] + delta[a0][a1] * delta[a2][n] * delta[b0][b2] * delta[b1][m] + delta[a0][a1] * delta[a2][n] * delta[b0][m] * delta[b1][b2] + delta[a0][a2] * delta[a1][b0] * delta[b1][b2] * delta[m][n] + delta[a0][a2] * delta[a1][b0] * delta[b1][m] * delta[b2][n] + delta[a0][a2] * delta[a1][b0] * delta[b1][n] * delta[b2][m] + delta[a0][a2] * delta[a1][b1] * delta[b0][b2] * delta[m][n] + delta[a0][a2] * delta[a1][b1] * delta[b0][m] * delta[b2][n] + delta[a0][a2] * delta[a1][b1] * delta[b0][n] * delta[b2][m] + delta[a0][a2] * delta[a1][b2] * delta[b0][b1] * delta[m][n] + delta[a0][a2] * delta[a1][b2] * delta[b0][m] * delta[b1][n] + delta[a0][a2] * delta[a1][b2] * delta[b0][n] * delta[b1][m] + delta[a0][a2] * delta[a1][m] * delta[b0][b1] * delta[b2][n] + delta[a0][a2] * delta[a1][m] * delta[b0][b2] * delta[b1][n] + delta[a0][a2] * delta[a1][m] * delta[b0][n] * delta[b1][b2] + delta[a0][a2] * delta[a1][n] * delta[b0][b1] * delta[b2][m] + delta[a0][a2] * delta[a1][n] * delta[b0][b2] * delta[b1][m] + delta[a0][a2] * delta[a1][n] * delta[b0][m] * delta[b1][b2] + delta[a0][b0] * delta[a1][a2] * delta[b1][b2] * delta[m][n] + delta[a0][b0] * delta[a1][a2] * delta[b1][m] * delta[b2][n] + delta[a0][b0] * delta[a1][a2] * delta[b1][n] * delta[b2][m] + delta[a0][b0] * delta[a1][b1] * delta[a2][b2] * delta[m][n] + delta[a0][b0] * delta[a1][b1] * delta[a2][m] * delta[b2][n] + delta[a0][b0] * delta[a1][b1] * delta[a2][n] * delta[b2][m] + delta[a0][b0] * delta[a1][b2] * delta[a2][b1] * delta[m][n] + delta[a0][b0] * delta[a1][b2] * delta[a2][m] * delta[b1][n] + delta[a0][b0] * delta[a1][b2] * delta[a2][n] * delta[b1][m] + delta[a0][b0] * delta[a1][m] * delta[a2][b1] * delta[b2][n] + delta[a0][b0] * delta[a1][m] * delta[a2][b2] * delta[b1][n] + delta[a0][b0] * delta[a1][m] * delta[a2][n] * delta[b1][b2] + delta[a0][b0] * delta[a1][n] * delta[a2][b1] * delta[b2][m] + delta[a0][b0] * delta[a1][n] * delta[a2][b2] * delta[b1][m] + delta[a0][b0] * delta[a1][n] * delta[a2][m] * delta[b1][b2] + delta[a0][b1] * delta[a1][a2] * delta[b0][b2] * delta[m][n] + delta[a0][b1] * delta[a1][a2] * delta[b0][m] * delta[b2][n] + delta[a0][b1] * delta[a1][a2] * delta[b0][n] * delta[b2][m] + delta[a0][b1] * delta[a1][b0] * delta[a2][b2] * delta[m][n] + delta[a0][b1] * delta[a1][b0] * delta[a2][m] * delta[b2][n] + delta[a0][b1] * delta[a1][b0] * delta[a2][n] * delta[b2][m] + delta[a0][b1] * delta[a1][b2] * delta[a2][b0] * delta[m][n] + delta[a0][b1] * delta[a1][b2] * delta[a2][m] * delta[b0][n] + delta[a0][b1] * delta[a1][b2] * delta[a2][n] * delta[b0][m] + delta[a0][b1] * delta[a1][m] * delta[a2][b0] * delta[b2][n] + delta[a0][b1] * delta[a1][m] * delta[a2][b2] * delta[b0][n] + delta[a0][b1] * delta[a1][m] * delta[a2][n] * delta[b0][b2] + delta[a0][b1] * delta[a1][n] * delta[a2][b0] * delta[b2][m] + delta[a0][b1] * delta[a1][n] * delta[a2][b2] * delta[b0][m] + delta[a0][b1] * delta[a1][n] * delta[a2][m] * delta[b0][b2] + delta[a0][b2] * delta[a1][a2] * delta[b0][b1] * delta[m][n] + delta[a0][b2] * delta[a1][a2] * delta[b0][m] * delta[b1][n] + delta[a0][b2] * delta[a1][a2] * delta[b0][n] * delta[b1][m] + delta[a0][b2] * delta[a1][b0] * delta[a2][b1] * delta[m][n] + delta[a0][b2] * delta[a1][b0] * delta[a2][m] * delta[b1][n] + delta[a0][b2] * delta[a1][b0] * delta[a2][n] * delta[b1][m] + delta[a0][b2] * delta[a1][b1] * delta[a2][b0] * delta[m][n] + delta[a0][b2] * delta[a1][b1] * delta[a2][m] * delta[b0][n] + delta[a0][b2] * delta[a1][b1] * delta[a2][n] * delta[b0][m] + delta[a0][b2] * delta[a1][m] * delta[a2][b0] * delta[b1][n] + delta[a0][b2] * delta[a1][m] * delta[a2][b1] * delta[b0][n] + delta[a0][b2] * delta[a1][m] * delta[a2][n] * delta[b0][b1] + delta[a0][b2] * delta[a1][n] * delta[a2][b0] * delta[b1][m] + delta[a0][b2] * delta[a1][n] * delta[a2][b1] * delta[b0][m] + delta[a0][b2] * delta[a1][n] * delta[a2][m] * delta[b0][b1] + delta[a0][m] * delta[a1][a2] * delta[b0][b1] * delta[b2][n] + delta[a0][m] * delta[a1][a2] * delta[b0][b2] * delta[b1][n] + delta[a0][m] * delta[a1][a2] * delta[b0][n] * delta[b1][b2] + delta[a0][m] * delta[a1][b0] * delta[a2][b1] * delta[b2][n] + delta[a0][m] * delta[a1][b0] * delta[a2][b2] * delta[b1][n] + delta[a0][m] * delta[a1][b0] * delta[a2][n] * delta[b1][b2] + delta[a0][m] * delta[a1][b1] * delta[a2][b0] * delta[b2][n] + delta[a0][m] * delta[a1][b1] * delta[a2][b2] * delta[b0][n] + delta[a0][m] * delta[a1][b1] * delta[a2][n] * delta[b0][b2] + delta[a0][m] * delta[a1][b2] * delta[a2][b0] * delta[b1][n] + delta[a0][m] * delta[a1][b2] * delta[a2][b1] * delta[b0][n] + delta[a0][m] * delta[a1][b2] * delta[a2][n] * delta[b0][b1] + delta[a0][m] * delta[a1][n] * delta[a2][b0] * delta[b1][b2] + delta[a0][m] * delta[a1][n] * delta[a2][b1] * delta[b0][b2] + delta[a0][m] * delta[a1][n] * delta[a2][b2] * delta[b0][b1] + delta[a0][n] * delta[a1][a2] * delta[b0][b1] * delta[b2][m] + delta[a0][n] * delta[a1][a2] * delta[b0][b2] * delta[b1][m] + delta[a0][n] * delta[a1][a2] * delta[b0][m] * delta[b1][b2] + delta[a0][n] * delta[a1][b0] * delta[a2][b1] * delta[b2][m] + delta[a0][n] * delta[a1][b0] * delta[a2][b2] * delta[b1][m] + delta[a0][n] * delta[a1][b0] * delta[a2][m] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[a2][b0] * delta[b2][m] + delta[a0][n] * delta[a1][b1] * delta[a2][b2] * delta[b0][m] + delta[a0][n] * delta[a1][b1] * delta[a2][m] * delta[b0][b2] + delta[a0][n] * delta[a1][b2] * delta[a2][b0] * delta[b1][m] + delta[a0][n] * delta[a1][b2] * delta[a2][b1] * delta[b0][m] + delta[a0][n] * delta[a1][b2] * delta[a2][m] * delta[b0][b1] + delta[a0][n] * delta[a1][m] * delta[a2][b0] * delta[b1][b2] + delta[a0][n] * delta[a1][m] * delta[a2][b1] * delta[b0][b2] + delta[a0][n] * delta[a1][m] * delta[a2][b2] * delta[b0][b1])
                        )

                        + 0.25 / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[a2][b0] * delta[b1][b2] * delta[m][n] + delta[a2][b0] * delta[b1][m] * delta[b2][n] + delta[a2][b0] * delta[b1][n] * delta[b2][m] + delta[a2][b1] * delta[b0][b2] * delta[m][n] + delta[a2][b1] * delta[b0][m] * delta[b2][n] + delta[a2][b1] * delta[b0][n] * delta[b2][m] + delta[a2][b2] * delta[b0][b1] * delta[m][n] + delta[a2][b2] * delta[b0][m] * delta[b1][n] + delta[a2][b2] * delta[b0][n] * delta[b1][m] + delta[a2][m] * delta[b0][b1] * delta[b2][n] + delta[a2][m] * delta[b0][b2] * delta[b1][n] + delta[a2][m] * delta[b0][n] * delta[b1][b2] + delta[a2][n] * delta[b0][b1] * delta[b2][m] + delta[a2][n] * delta[b0][b2] * delta[b1][m] + delta[a2][n] * delta[b0][m] * delta[b1][b2]) * (PA_0 * PA_1)
                            + (delta[a1][b0] * delta[b1][b2] * delta[m][n] + delta[a1][b0] * delta[b1][m] * delta[b2][n] + delta[a1][b0] * delta[b1][n] * delta[b2][m] + delta[a1][b1] * delta[b0][b2] * delta[m][n] + delta[a1][b1] * delta[b0][m] * delta[b2][n] + delta[a1][b1] * delta[b0][n] * delta[b2][m] + delta[a1][b2] * delta[b0][b1] * delta[m][n] + delta[a1][b2] * delta[b0][m] * delta[b1][n] + delta[a1][b2] * delta[b0][n] * delta[b1][m] + delta[a1][m] * delta[b0][b1] * delta[b2][n] + delta[a1][m] * delta[b0][b2] * delta[b1][n] + delta[a1][m] * delta[b0][n] * delta[b1][b2] + delta[a1][n] * delta[b0][b1] * delta[b2][m] + delta[a1][n] * delta[b0][b2] * delta[b1][m] + delta[a1][n] * delta[b0][m] * delta[b1][b2]) * (PA_0 * PA_2)
                            + (delta[a1][a2] * delta[b0][b1] * delta[b2][m] + delta[a1][a2] * delta[b0][b2] * delta[b1][m] + delta[a1][a2] * delta[b0][m] * delta[b1][b2] + delta[a1][b0] * delta[a2][b1] * delta[b2][m] + delta[a1][b0] * delta[a2][b2] * delta[b1][m] + delta[a1][b0] * delta[a2][m] * delta[b1][b2] + delta[a1][b1] * delta[a2][b0] * delta[b2][m] + delta[a1][b1] * delta[a2][b2] * delta[b0][m] + delta[a1][b1] * delta[a2][m] * delta[b0][b2] + delta[a1][b2] * delta[a2][b0] * delta[b1][m] + delta[a1][b2] * delta[a2][b1] * delta[b0][m] + delta[a1][b2] * delta[a2][m] * delta[b0][b1] + delta[a1][m] * delta[a2][b0] * delta[b1][b2] + delta[a1][m] * delta[a2][b1] * delta[b0][b2] + delta[a1][m] * delta[a2][b2] * delta[b0][b1]) * (PA_0 * PA_n)
                            + (delta[a1][a2] * delta[b1][b2] * delta[m][n] + delta[a1][a2] * delta[b1][m] * delta[b2][n] + delta[a1][a2] * delta[b1][n] * delta[b2][m] + delta[a1][b1] * delta[a2][b2] * delta[m][n] + delta[a1][b1] * delta[a2][m] * delta[b2][n] + delta[a1][b1] * delta[a2][n] * delta[b2][m] + delta[a1][b2] * delta[a2][b1] * delta[m][n] + delta[a1][b2] * delta[a2][m] * delta[b1][n] + delta[a1][b2] * delta[a2][n] * delta[b1][m] + delta[a1][m] * delta[a2][b1] * delta[b2][n] + delta[a1][m] * delta[a2][b2] * delta[b1][n] + delta[a1][m] * delta[a2][n] * delta[b1][b2] + delta[a1][n] * delta[a2][b1] * delta[b2][m] + delta[a1][n] * delta[a2][b2] * delta[b1][m] + delta[a1][n] * delta[a2][m] * delta[b1][b2]) * (PA_0 * PB_0)
                            + (delta[a1][a2] * delta[b0][b2] * delta[m][n] + delta[a1][a2] * delta[b0][m] * delta[b2][n] + delta[a1][a2] * delta[b0][n] * delta[b2][m] + delta[a1][b0] * delta[a2][b2] * delta[m][n] + delta[a1][b0] * delta[a2][m] * delta[b2][n] + delta[a1][b0] * delta[a2][n] * delta[b2][m] + delta[a1][b2] * delta[a2][b0] * delta[m][n] + delta[a1][b2] * delta[a2][m] * delta[b0][n] + delta[a1][b2] * delta[a2][n] * delta[b0][m] + delta[a1][m] * delta[a2][b0] * delta[b2][n] + delta[a1][m] * delta[a2][b2] * delta[b0][n] + delta[a1][m] * delta[a2][n] * delta[b0][b2] + delta[a1][n] * delta[a2][b0] * delta[b2][m] + delta[a1][n] * delta[a2][b2] * delta[b0][m] + delta[a1][n] * delta[a2][m] * delta[b0][b2]) * (PA_0 * PB_1)
                            + (delta[a1][a2] * delta[b0][b1] * delta[m][n] + delta[a1][a2] * delta[b0][m] * delta[b1][n] + delta[a1][a2] * delta[b0][n] * delta[b1][m] + delta[a1][b0] * delta[a2][b1] * delta[m][n] + delta[a1][b0] * delta[a2][m] * delta[b1][n] + delta[a1][b0] * delta[a2][n] * delta[b1][m] + delta[a1][b1] * delta[a2][b0] * delta[m][n] + delta[a1][b1] * delta[a2][m] * delta[b0][n] + delta[a1][b1] * delta[a2][n] * delta[b0][m] + delta[a1][m] * delta[a2][b0] * delta[b1][n] + delta[a1][m] * delta[a2][b1] * delta[b0][n] + delta[a1][m] * delta[a2][n] * delta[b0][b1] + delta[a1][n] * delta[a2][b0] * delta[b1][m] + delta[a1][n] * delta[a2][b1] * delta[b0][m] + delta[a1][n] * delta[a2][m] * delta[b0][b1]) * (PA_0 * PB_2)
                            + (delta[a0][b0] * delta[b1][b2] * delta[m][n] + delta[a0][b0] * delta[b1][m] * delta[b2][n] + delta[a0][b0] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[b0][b2] * delta[m][n] + delta[a0][b1] * delta[b0][m] * delta[b2][n] + delta[a0][b1] * delta[b0][n] * delta[b2][m] + delta[a0][b2] * delta[b0][b1] * delta[m][n] + delta[a0][b2] * delta[b0][m] * delta[b1][n] + delta[a0][b2] * delta[b0][n] * delta[b1][m] + delta[a0][m] * delta[b0][b1] * delta[b2][n] + delta[a0][m] * delta[b0][b2] * delta[b1][n] + delta[a0][m] * delta[b0][n] * delta[b1][b2] + delta[a0][n] * delta[b0][b1] * delta[b2][m] + delta[a0][n] * delta[b0][b2] * delta[b1][m] + delta[a0][n] * delta[b0][m] * delta[b1][b2]) * (PA_1 * PA_2)
                            + (delta[a0][a2] * delta[b0][b1] * delta[b2][m] + delta[a0][a2] * delta[b0][b2] * delta[b1][m] + delta[a0][a2] * delta[b0][m] * delta[b1][b2] + delta[a0][b0] * delta[a2][b1] * delta[b2][m] + delta[a0][b0] * delta[a2][b2] * delta[b1][m] + delta[a0][b0] * delta[a2][m] * delta[b1][b2] + delta[a0][b1] * delta[a2][b0] * delta[b2][m] + delta[a0][b1] * delta[a2][b2] * delta[b0][m] + delta[a0][b1] * delta[a2][m] * delta[b0][b2] + delta[a0][b2] * delta[a2][b0] * delta[b1][m] + delta[a0][b2] * delta[a2][b1] * delta[b0][m] + delta[a0][b2] * delta[a2][m] * delta[b0][b1] + delta[a0][m] * delta[a2][b0] * delta[b1][b2] + delta[a0][m] * delta[a2][b1] * delta[b0][b2] + delta[a0][m] * delta[a2][b2] * delta[b0][b1]) * (PA_1 * PA_n)
                            + (delta[a0][a2] * delta[b1][b2] * delta[m][n] + delta[a0][a2] * delta[b1][m] * delta[b2][n] + delta[a0][a2] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[a2][b2] * delta[m][n] + delta[a0][b1] * delta[a2][m] * delta[b2][n] + delta[a0][b1] * delta[a2][n] * delta[b2][m] + delta[a0][b2] * delta[a2][b1] * delta[m][n] + delta[a0][b2] * delta[a2][m] * delta[b1][n] + delta[a0][b2] * delta[a2][n] * delta[b1][m] + delta[a0][m] * delta[a2][b1] * delta[b2][n] + delta[a0][m] * delta[a2][b2] * delta[b1][n] + delta[a0][m] * delta[a2][n] * delta[b1][b2] + delta[a0][n] * delta[a2][b1] * delta[b2][m] + delta[a0][n] * delta[a2][b2] * delta[b1][m] + delta[a0][n] * delta[a2][m] * delta[b1][b2]) * (PA_1 * PB_0)
                            + (delta[a0][a2] * delta[b0][b2] * delta[m][n] + delta[a0][a2] * delta[b0][m] * delta[b2][n] + delta[a0][a2] * delta[b0][n] * delta[b2][m] + delta[a0][b0] * delta[a2][b2] * delta[m][n] + delta[a0][b0] * delta[a2][m] * delta[b2][n] + delta[a0][b0] * delta[a2][n] * delta[b2][m] + delta[a0][b2] * delta[a2][b0] * delta[m][n] + delta[a0][b2] * delta[a2][m] * delta[b0][n] + delta[a0][b2] * delta[a2][n] * delta[b0][m] + delta[a0][m] * delta[a2][b0] * delta[b2][n] + delta[a0][m] * delta[a2][b2] * delta[b0][n] + delta[a0][m] * delta[a2][n] * delta[b0][b2] + delta[a0][n] * delta[a2][b0] * delta[b2][m] + delta[a0][n] * delta[a2][b2] * delta[b0][m] + delta[a0][n] * delta[a2][m] * delta[b0][b2]) * (PA_1 * PB_1)
                            + (delta[a0][a2] * delta[b0][b1] * delta[m][n] + delta[a0][a2] * delta[b0][m] * delta[b1][n] + delta[a0][a2] * delta[b0][n] * delta[b1][m] + delta[a0][b0] * delta[a2][b1] * delta[m][n] + delta[a0][b0] * delta[a2][m] * delta[b1][n] + delta[a0][b0] * delta[a2][n] * delta[b1][m] + delta[a0][b1] * delta[a2][b0] * delta[m][n] + delta[a0][b1] * delta[a2][m] * delta[b0][n] + delta[a0][b1] * delta[a2][n] * delta[b0][m] + delta[a0][m] * delta[a2][b0] * delta[b1][n] + delta[a0][m] * delta[a2][b1] * delta[b0][n] + delta[a0][m] * delta[a2][n] * delta[b0][b1] + delta[a0][n] * delta[a2][b0] * delta[b1][m] + delta[a0][n] * delta[a2][b1] * delta[b0][m] + delta[a0][n] * delta[a2][m] * delta[b0][b1]) * (PA_1 * PB_2)
                            + (delta[a0][a1] * delta[b0][b1] * delta[b2][m] + delta[a0][a1] * delta[b0][b2] * delta[b1][m] + delta[a0][a1] * delta[b0][m] * delta[b1][b2] + delta[a0][b0] * delta[a1][b1] * delta[b2][m] + delta[a0][b0] * delta[a1][b2] * delta[b1][m] + delta[a0][b0] * delta[a1][m] * delta[b1][b2] + delta[a0][b1] * delta[a1][b0] * delta[b2][m] + delta[a0][b1] * delta[a1][b2] * delta[b0][m] + delta[a0][b1] * delta[a1][m] * delta[b0][b2] + delta[a0][b2] * delta[a1][b0] * delta[b1][m] + delta[a0][b2] * delta[a1][b1] * delta[b0][m] + delta[a0][b2] * delta[a1][m] * delta[b0][b1] + delta[a0][m] * delta[a1][b0] * delta[b1][b2] + delta[a0][m] * delta[a1][b1] * delta[b0][b2] + delta[a0][m] * delta[a1][b2] * delta[b0][b1]) * (PA_2 * PA_n)
                            + (delta[a0][a1] * delta[b1][b2] * delta[m][n] + delta[a0][a1] * delta[b1][m] * delta[b2][n] + delta[a0][a1] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[a1][b2] * delta[m][n] + delta[a0][b1] * delta[a1][m] * delta[b2][n] + delta[a0][b1] * delta[a1][n] * delta[b2][m] + delta[a0][b2] * delta[a1][b1] * delta[m][n] + delta[a0][b2] * delta[a1][m] * delta[b1][n] + delta[a0][b2] * delta[a1][n] * delta[b1][m] + delta[a0][m] * delta[a1][b1] * delta[b2][n] + delta[a0][m] * delta[a1][b2] * delta[b1][n] + delta[a0][m] * delta[a1][n] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[b2][m] + delta[a0][n] * delta[a1][b2] * delta[b1][m] + delta[a0][n] * delta[a1][m] * delta[b1][b2]) * (PA_2 * PB_0)
                            + (delta[a0][a1] * delta[b0][b2] * delta[m][n] + delta[a0][a1] * delta[b0][m] * delta[b2][n] + delta[a0][a1] * delta[b0][n] * delta[b2][m] + delta[a0][b0] * delta[a1][b2] * delta[m][n] + delta[a0][b0] * delta[a1][m] * delta[b2][n] + delta[a0][b0] * delta[a1][n] * delta[b2][m] + delta[a0][b2] * delta[a1][b0] * delta[m][n] + delta[a0][b2] * delta[a1][m] * delta[b0][n] + delta[a0][b2] * delta[a1][n] * delta[b0][m] + delta[a0][m] * delta[a1][b0] * delta[b2][n] + delta[a0][m] * delta[a1][b2] * delta[b0][n] + delta[a0][m] * delta[a1][n] * delta[b0][b2] + delta[a0][n] * delta[a1][b0] * delta[b2][m] + delta[a0][n] * delta[a1][b2] * delta[b0][m] + delta[a0][n] * delta[a1][m] * delta[b0][b2]) * (PA_2 * PB_1)
                            + (delta[a0][a1] * delta[b0][b1] * delta[m][n] + delta[a0][a1] * delta[b0][m] * delta[b1][n] + delta[a0][a1] * delta[b0][n] * delta[b1][m] + delta[a0][b0] * delta[a1][b1] * delta[m][n] + delta[a0][b0] * delta[a1][m] * delta[b1][n] + delta[a0][b0] * delta[a1][n] * delta[b1][m] + delta[a0][b1] * delta[a1][b0] * delta[m][n] + delta[a0][b1] * delta[a1][m] * delta[b0][n] + delta[a0][b1] * delta[a1][n] * delta[b0][m] + delta[a0][m] * delta[a1][b0] * delta[b1][n] + delta[a0][m] * delta[a1][b1] * delta[b0][n] + delta[a0][m] * delta[a1][n] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[b1][m] + delta[a0][n] * delta[a1][b1] * delta[b0][m] + delta[a0][n] * delta[a1][m] * delta[b0][b1]) * (PA_2 * PB_2)
                            + (delta[a0][a1] * delta[a2][b1] * delta[b2][m] + delta[a0][a1] * delta[a2][b2] * delta[b1][m] + delta[a0][a1] * delta[a2][m] * delta[b1][b2] + delta[a0][a2] * delta[a1][b1] * delta[b2][m] + delta[a0][a2] * delta[a1][b2] * delta[b1][m] + delta[a0][a2] * delta[a1][m] * delta[b1][b2] + delta[a0][b1] * delta[a1][a2] * delta[b2][m] + delta[a0][b1] * delta[a1][b2] * delta[a2][m] + delta[a0][b1] * delta[a1][m] * delta[a2][b2] + delta[a0][b2] * delta[a1][a2] * delta[b1][m] + delta[a0][b2] * delta[a1][b1] * delta[a2][m] + delta[a0][b2] * delta[a1][m] * delta[a2][b1] + delta[a0][m] * delta[a1][a2] * delta[b1][b2] + delta[a0][m] * delta[a1][b1] * delta[a2][b2] + delta[a0][m] * delta[a1][b2] * delta[a2][b1]) * (PA_n * PB_0)
                            + (delta[a0][a1] * delta[a2][b0] * delta[b2][m] + delta[a0][a1] * delta[a2][b2] * delta[b0][m] + delta[a0][a1] * delta[a2][m] * delta[b0][b2] + delta[a0][a2] * delta[a1][b0] * delta[b2][m] + delta[a0][a2] * delta[a1][b2] * delta[b0][m] + delta[a0][a2] * delta[a1][m] * delta[b0][b2] + delta[a0][b0] * delta[a1][a2] * delta[b2][m] + delta[a0][b0] * delta[a1][b2] * delta[a2][m] + delta[a0][b0] * delta[a1][m] * delta[a2][b2] + delta[a0][b2] * delta[a1][a2] * delta[b0][m] + delta[a0][b2] * delta[a1][b0] * delta[a2][m] + delta[a0][b2] * delta[a1][m] * delta[a2][b0] + delta[a0][m] * delta[a1][a2] * delta[b0][b2] + delta[a0][m] * delta[a1][b0] * delta[a2][b2] + delta[a0][m] * delta[a1][b2] * delta[a2][b0]) * (PA_n * PB_1)
                            + (delta[a0][a1] * delta[a2][b0] * delta[b1][m] + delta[a0][a1] * delta[a2][b1] * delta[b0][m] + delta[a0][a1] * delta[a2][m] * delta[b0][b1] + delta[a0][a2] * delta[a1][b0] * delta[b1][m] + delta[a0][a2] * delta[a1][b1] * delta[b0][m] + delta[a0][a2] * delta[a1][m] * delta[b0][b1] + delta[a0][b0] * delta[a1][a2] * delta[b1][m] + delta[a0][b0] * delta[a1][b1] * delta[a2][m] + delta[a0][b0] * delta[a1][m] * delta[a2][b1] + delta[a0][b1] * delta[a1][a2] * delta[b0][m] + delta[a0][b1] * delta[a1][b0] * delta[a2][m] + delta[a0][b1] * delta[a1][m] * delta[a2][b0] + delta[a0][m] * delta[a1][a2] * delta[b0][b1] + delta[a0][m] * delta[a1][b0] * delta[a2][b1] + delta[a0][m] * delta[a1][b1] * delta[a2][b0]) * (PA_n * PB_2)
                            + (delta[a0][a1] * delta[a2][b2] * delta[m][n] + delta[a0][a1] * delta[a2][m] * delta[b2][n] + delta[a0][a1] * delta[a2][n] * delta[b2][m] + delta[a0][a2] * delta[a1][b2] * delta[m][n] + delta[a0][a2] * delta[a1][m] * delta[b2][n] + delta[a0][a2] * delta[a1][n] * delta[b2][m] + delta[a0][b2] * delta[a1][a2] * delta[m][n] + delta[a0][b2] * delta[a1][m] * delta[a2][n] + delta[a0][b2] * delta[a1][n] * delta[a2][m] + delta[a0][m] * delta[a1][a2] * delta[b2][n] + delta[a0][m] * delta[a1][b2] * delta[a2][n] + delta[a0][m] * delta[a1][n] * delta[a2][b2] + delta[a0][n] * delta[a1][a2] * delta[b2][m] + delta[a0][n] * delta[a1][b2] * delta[a2][m] + delta[a0][n] * delta[a1][m] * delta[a2][b2]) * (PB_0 * PB_1)
                            + (delta[a0][a1] * delta[a2][b1] * delta[m][n] + delta[a0][a1] * delta[a2][m] * delta[b1][n] + delta[a0][a1] * delta[a2][n] * delta[b1][m] + delta[a0][a2] * delta[a1][b1] * delta[m][n] + delta[a0][a2] * delta[a1][m] * delta[b1][n] + delta[a0][a2] * delta[a1][n] * delta[b1][m] + delta[a0][b1] * delta[a1][a2] * delta[m][n] + delta[a0][b1] * delta[a1][m] * delta[a2][n] + delta[a0][b1] * delta[a1][n] * delta[a2][m] + delta[a0][m] * delta[a1][a2] * delta[b1][n] + delta[a0][m] * delta[a1][b1] * delta[a2][n] + delta[a0][m] * delta[a1][n] * delta[a2][b1] + delta[a0][n] * delta[a1][a2] * delta[b1][m] + delta[a0][n] * delta[a1][b1] * delta[a2][m] + delta[a0][n] * delta[a1][m] * delta[a2][b1]) * (PB_0 * PB_2)
                            + (delta[a0][a1] * delta[a2][b0] * delta[m][n] + delta[a0][a1] * delta[a2][m] * delta[b0][n] + delta[a0][a1] * delta[a2][n] * delta[b0][m] + delta[a0][a2] * delta[a1][b0] * delta[m][n] + delta[a0][a2] * delta[a1][m] * delta[b0][n] + delta[a0][a2] * delta[a1][n] * delta[b0][m] + delta[a0][b0] * delta[a1][a2] * delta[m][n] + delta[a0][b0] * delta[a1][m] * delta[a2][n] + delta[a0][b0] * delta[a1][n] * delta[a2][m] + delta[a0][m] * delta[a1][a2] * delta[b0][n] + delta[a0][m] * delta[a1][b0] * delta[a2][n] + delta[a0][m] * delta[a1][n] * delta[a2][b0] + delta[a0][n] * delta[a1][a2] * delta[b0][m] + delta[a0][n] * delta[a1][b0] * delta[a2][m] + delta[a0][n] * delta[a1][m] * delta[a2][b0]) * (PB_1 * PB_2)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[b0][b1] * delta[b2][m] + delta[b0][b2] * delta[b1][m] + delta[b0][m] * delta[b1][b2]) * (PA_0 * PA_1 * PA_2 * PA_n)
                            + (delta[b1][b2] * delta[m][n] + delta[b1][m] * delta[b2][n] + delta[b1][n] * delta[b2][m]) * (PA_0 * PA_1 * PA_2 * PB_0)
                            + (delta[b0][b2] * delta[m][n] + delta[b0][m] * delta[b2][n] + delta[b0][n] * delta[b2][m]) * (PA_0 * PA_1 * PA_2 * PB_1)
                            + (delta[b0][b1] * delta[m][n] + delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PA_0 * PA_1 * PA_2 * PB_2)
                            + (delta[a2][b1] * delta[b2][m] + delta[a2][b2] * delta[b1][m] + delta[a2][m] * delta[b1][b2]) * (PA_0 * PA_1 * PA_n * PB_0)
                            + (delta[a2][b0] * delta[b2][m] + delta[a2][b2] * delta[b0][m] + delta[a2][m] * delta[b0][b2]) * (PA_0 * PA_1 * PA_n * PB_1)
                            + (delta[a2][b0] * delta[b1][m] + delta[a2][b1] * delta[b0][m] + delta[a2][m] * delta[b0][b1]) * (PA_0 * PA_1 * PA_n * PB_2)
                            + (delta[a2][b2] * delta[m][n] + delta[a2][m] * delta[b2][n] + delta[a2][n] * delta[b2][m]) * (PA_0 * PA_1 * PB_0 * PB_1)
                            + (delta[a2][b1] * delta[m][n] + delta[a2][m] * delta[b1][n] + delta[a2][n] * delta[b1][m]) * (PA_0 * PA_1 * PB_0 * PB_2)
                            + (delta[a2][b0] * delta[m][n] + delta[a2][m] * delta[b0][n] + delta[a2][n] * delta[b0][m]) * (PA_0 * PA_1 * PB_1 * PB_2)
                            + (delta[a1][b1] * delta[b2][m] + delta[a1][b2] * delta[b1][m] + delta[a1][m] * delta[b1][b2]) * (PA_0 * PA_2 * PA_n * PB_0)
                            + (delta[a1][b0] * delta[b2][m] + delta[a1][b2] * delta[b0][m] + delta[a1][m] * delta[b0][b2]) * (PA_0 * PA_2 * PA_n * PB_1)
                            + (delta[a1][b0] * delta[b1][m] + delta[a1][b1] * delta[b0][m] + delta[a1][m] * delta[b0][b1]) * (PA_0 * PA_2 * PA_n * PB_2)
                            + (delta[a1][b2] * delta[m][n] + delta[a1][m] * delta[b2][n] + delta[a1][n] * delta[b2][m]) * (PA_0 * PA_2 * PB_0 * PB_1)
                            + (delta[a1][b1] * delta[m][n] + delta[a1][m] * delta[b1][n] + delta[a1][n] * delta[b1][m]) * (PA_0 * PA_2 * PB_0 * PB_2)
                            + (delta[a1][b0] * delta[m][n] + delta[a1][m] * delta[b0][n] + delta[a1][n] * delta[b0][m]) * (PA_0 * PA_2 * PB_1 * PB_2)
                            + (delta[a1][a2] * delta[b2][m] + delta[a1][b2] * delta[a2][m] + delta[a1][m] * delta[a2][b2]) * (PA_0 * PA_n * PB_0 * PB_1)
                            + (delta[a1][a2] * delta[b1][m] + delta[a1][b1] * delta[a2][m] + delta[a1][m] * delta[a2][b1]) * (PA_0 * PA_n * PB_0 * PB_2)
                            + (delta[a1][a2] * delta[b0][m] + delta[a1][b0] * delta[a2][m] + delta[a1][m] * delta[a2][b0]) * (PA_0 * PA_n * PB_1 * PB_2)
                            + (delta[a1][a2] * delta[m][n] + delta[a1][m] * delta[a2][n] + delta[a1][n] * delta[a2][m]) * (PA_0 * PB_0 * PB_1 * PB_2)
                            + (delta[a0][b1] * delta[b2][m] + delta[a0][b2] * delta[b1][m] + delta[a0][m] * delta[b1][b2]) * (PA_1 * PA_2 * PA_n * PB_0)
                            + (delta[a0][b0] * delta[b2][m] + delta[a0][b2] * delta[b0][m] + delta[a0][m] * delta[b0][b2]) * (PA_1 * PA_2 * PA_n * PB_1)
                            + (delta[a0][b0] * delta[b1][m] + delta[a0][b1] * delta[b0][m] + delta[a0][m] * delta[b0][b1]) * (PA_1 * PA_2 * PA_n * PB_2)
                            + (delta[a0][b2] * delta[m][n] + delta[a0][m] * delta[b2][n] + delta[a0][n] * delta[b2][m]) * (PA_1 * PA_2 * PB_0 * PB_1)
                            + (delta[a0][b1] * delta[m][n] + delta[a0][m] * delta[b1][n] + delta[a0][n] * delta[b1][m]) * (PA_1 * PA_2 * PB_0 * PB_2)
                            + (delta[a0][b0] * delta[m][n] + delta[a0][m] * delta[b0][n] + delta[a0][n] * delta[b0][m]) * (PA_1 * PA_2 * PB_1 * PB_2)
                            + (delta[a0][a2] * delta[b2][m] + delta[a0][b2] * delta[a2][m] + delta[a0][m] * delta[a2][b2]) * (PA_1 * PA_n * PB_0 * PB_1)
                            + (delta[a0][a2] * delta[b1][m] + delta[a0][b1] * delta[a2][m] + delta[a0][m] * delta[a2][b1]) * (PA_1 * PA_n * PB_0 * PB_2)
                            + (delta[a0][a2] * delta[b0][m] + delta[a0][b0] * delta[a2][m] + delta[a0][m] * delta[a2][b0]) * (PA_1 * PA_n * PB_1 * PB_2)
                            + (delta[a0][a2] * delta[m][n] + delta[a0][m] * delta[a2][n] + delta[a0][n] * delta[a2][m]) * (PA_1 * PB_0 * PB_1 * PB_2)
                            + (delta[a0][a1] * delta[b2][m] + delta[a0][b2] * delta[a1][m] + delta[a0][m] * delta[a1][b2]) * (PA_2 * PA_n * PB_0 * PB_1)
                            + (delta[a0][a1] * delta[b1][m] + delta[a0][b1] * delta[a1][m] + delta[a0][m] * delta[a1][b1]) * (PA_2 * PA_n * PB_0 * PB_2)
                            + (delta[a0][a1] * delta[b0][m] + delta[a0][b0] * delta[a1][m] + delta[a0][m] * delta[a1][b0]) * (PA_2 * PA_n * PB_1 * PB_2)
                            + (delta[a0][a1] * delta[m][n] + delta[a0][m] * delta[a1][n] + delta[a0][n] * delta[a1][m]) * (PA_2 * PB_0 * PB_1 * PB_2)
                            + (delta[a0][a1] * delta[a2][m] + delta[a0][a2] * delta[a1][m] + delta[a0][m] * delta[a1][a2]) * (PA_n * PB_0 * PB_1 * PB_2)
                        )

                        + 1.0 / (a_i + a_j) * a_i * (
                            delta[b2][m] * (PA_0 * PA_1 * PA_2 * PA_n * PB_0 * PB_1)
                            + delta[b1][m] * (PA_0 * PA_1 * PA_2 * PA_n * PB_0 * PB_2)
                            + delta[b0][m] * (PA_0 * PA_1 * PA_2 * PA_n * PB_1 * PB_2)
                            + delta[m][n] * (PA_0 * PA_1 * PA_2 * PB_0 * PB_1 * PB_2)
                            + delta[a2][m] * (PA_0 * PA_1 * PA_n * PB_0 * PB_1 * PB_2)
                            + delta[a1][m] * (PA_0 * PA_2 * PA_n * PB_0 * PB_1 * PB_2)
                            + delta[a0][m] * (PA_1 * PA_2 * PA_n * PB_0 * PB_1 * PB_2)
                        )

                    )

                    + PC[m] * (

                        (-0.25) / ( (a_i + a_j) * (a_i + a_j) ) * (
                            (delta[a1][b0] * delta[a2][n] * delta[b1][b2] + delta[a1][b1] * delta[a2][n] * delta[b0][b2] + delta[a1][b2] * delta[a2][n] * delta[b0][b1] + delta[a1][n] * delta[a2][b0] * delta[b1][b2] + delta[a1][n] * delta[a2][b1] * delta[b0][b2] + delta[a1][n] * delta[a2][b2] * delta[b0][b1]) * (PA_0)
                            + (delta[a0][b0] * delta[a2][n] * delta[b1][b2] + delta[a0][b1] * delta[a2][n] * delta[b0][b2] + delta[a0][b2] * delta[a2][n] * delta[b0][b1] + delta[a0][n] * delta[a2][b0] * delta[b1][b2] + delta[a0][n] * delta[a2][b1] * delta[b0][b2] + delta[a0][n] * delta[a2][b2] * delta[b0][b1]) * (PA_1)
                            + (delta[a0][b0] * delta[a1][n] * delta[b1][b2] + delta[a0][b1] * delta[a1][n] * delta[b0][b2] + delta[a0][b2] * delta[a1][n] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[b0][b2] + delta[a0][n] * delta[a1][b2] * delta[b0][b1]) * (PA_2)
                            + (delta[a0][a1] * delta[a2][n] * delta[b1][b2] + delta[a0][a2] * delta[a1][n] * delta[b1][b2] + delta[a0][b1] * delta[a1][b2] * delta[a2][n] + delta[a0][b1] * delta[a1][n] * delta[a2][b2] + delta[a0][b2] * delta[a1][b1] * delta[a2][n] + delta[a0][b2] * delta[a1][n] * delta[a2][b1] + delta[a0][n] * delta[a1][a2] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[a2][b2] + delta[a0][n] * delta[a1][b2] * delta[a2][b1]) * (PB_0)
                            + (delta[a0][a1] * delta[a2][n] * delta[b0][b2] + delta[a0][a2] * delta[a1][n] * delta[b0][b2] + delta[a0][b0] * delta[a1][b2] * delta[a2][n] + delta[a0][b0] * delta[a1][n] * delta[a2][b2] + delta[a0][b2] * delta[a1][b0] * delta[a2][n] + delta[a0][b2] * delta[a1][n] * delta[a2][b0] + delta[a0][n] * delta[a1][a2] * delta[b0][b2] + delta[a0][n] * delta[a1][b0] * delta[a2][b2] + delta[a0][n] * delta[a1][b2] * delta[a2][b0]) * (PB_1)
                            + (delta[a0][a1] * delta[a2][n] * delta[b0][b1] + delta[a0][a2] * delta[a1][n] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] * delta[a2][n] + delta[a0][b0] * delta[a1][n] * delta[a2][b1] + delta[a0][b1] * delta[a1][b0] * delta[a2][n] + delta[a0][b1] * delta[a1][n] * delta[a2][b0] + delta[a0][n] * delta[a1][a2] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[a2][b1] + delta[a0][n] * delta[a1][b1] * delta[a2][b0]) * (PB_2)
                        )

                        + (-0.5) / (a_i + a_j) * (
                            delta[a2][n] * delta[b1][b2] * (PA_0 * PA_1 * PB_0)
                            + delta[a2][n] * delta[b0][b2] * (PA_0 * PA_1 * PB_1)
                            + delta[a2][n] * delta[b0][b1] * (PA_0 * PA_1 * PB_2)
                            + delta[a1][n] * delta[b1][b2] * (PA_0 * PA_2 * PB_0)
                            + delta[a1][n] * delta[b0][b2] * (PA_0 * PA_2 * PB_1)
                            + delta[a1][n] * delta[b0][b1] * (PA_0 * PA_2 * PB_2)
                            + (delta[a1][b2] * delta[a2][n] + delta[a1][n] * delta[a2][b2]) * (PA_0 * PB_0 * PB_1)
                            + (delta[a1][b1] * delta[a2][n] + delta[a1][n] * delta[a2][b1]) * (PA_0 * PB_0 * PB_2)
                            + (delta[a1][b0] * delta[a2][n] + delta[a1][n] * delta[a2][b0]) * (PA_0 * PB_1 * PB_2)
                            + delta[a0][n] * delta[b1][b2] * (PA_1 * PA_2 * PB_0)
                            + delta[a0][n] * delta[b0][b2] * (PA_1 * PA_2 * PB_1)
                            + delta[a0][n] * delta[b0][b1] * (PA_1 * PA_2 * PB_2)
                            + (delta[a0][b2] * delta[a2][n] + delta[a0][n] * delta[a2][b2]) * (PA_1 * PB_0 * PB_1)
                            + (delta[a0][b1] * delta[a2][n] + delta[a0][n] * delta[a2][b1]) * (PA_1 * PB_0 * PB_2)
                            + (delta[a0][b0] * delta[a2][n] + delta[a0][n] * delta[a2][b0]) * (PA_1 * PB_1 * PB_2)
                            + (delta[a0][b2] * delta[a1][n] + delta[a0][n] * delta[a1][b2]) * (PA_2 * PB_0 * PB_1)
                            + (delta[a0][b1] * delta[a1][n] + delta[a0][n] * delta[a1][b1]) * (PA_2 * PB_0 * PB_2)
                            + (delta[a0][b0] * delta[a1][n] + delta[a0][n] * delta[a1][b0]) * (PA_2 * PB_1 * PB_2)
                            + (delta[a0][a1] * delta[a2][n] + delta[a0][a2] * delta[a1][n] + delta[a0][n] * delta[a1][a2]) * (PB_0 * PB_1 * PB_2)
                        )

                        + (-1.0) * (
                            delta[a2][n] * (PA_0 * PA_1 * PB_0 * PB_1 * PB_2)
                            + delta[a1][n] * (PA_0 * PA_2 * PB_0 * PB_1 * PB_2)
                            + delta[a0][n] * (PA_1 * PA_2 * PB_0 * PB_1 * PB_2)
                        )

                        + 0.25 / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[a1][a2] * delta[b0][b1] * delta[b2][n] + delta[a1][a2] * delta[b0][b2] * delta[b1][n] + delta[a1][a2] * delta[b0][n] * delta[b1][b2] + delta[a1][b0] * delta[a2][b1] * delta[b2][n] + delta[a1][b0] * delta[a2][b2] * delta[b1][n] + delta[a1][b0] * delta[a2][n] * delta[b1][b2] + delta[a1][b1] * delta[a2][b0] * delta[b2][n] + delta[a1][b1] * delta[a2][b2] * delta[b0][n] + delta[a1][b1] * delta[a2][n] * delta[b0][b2] + delta[a1][b2] * delta[a2][b0] * delta[b1][n] + delta[a1][b2] * delta[a2][b1] * delta[b0][n] + delta[a1][b2] * delta[a2][n] * delta[b0][b1] + delta[a1][n] * delta[a2][b0] * delta[b1][b2] + delta[a1][n] * delta[a2][b1] * delta[b0][b2] + delta[a1][n] * delta[a2][b2] * delta[b0][b1]) * (PA_0)
                            + (delta[a0][a2] * delta[b0][b1] * delta[b2][n] + delta[a0][a2] * delta[b0][b2] * delta[b1][n] + delta[a0][a2] * delta[b0][n] * delta[b1][b2] + delta[a0][b0] * delta[a2][b1] * delta[b2][n] + delta[a0][b0] * delta[a2][b2] * delta[b1][n] + delta[a0][b0] * delta[a2][n] * delta[b1][b2] + delta[a0][b1] * delta[a2][b0] * delta[b2][n] + delta[a0][b1] * delta[a2][b2] * delta[b0][n] + delta[a0][b1] * delta[a2][n] * delta[b0][b2] + delta[a0][b2] * delta[a2][b0] * delta[b1][n] + delta[a0][b2] * delta[a2][b1] * delta[b0][n] + delta[a0][b2] * delta[a2][n] * delta[b0][b1] + delta[a0][n] * delta[a2][b0] * delta[b1][b2] + delta[a0][n] * delta[a2][b1] * delta[b0][b2] + delta[a0][n] * delta[a2][b2] * delta[b0][b1]) * (PA_1)
                            + (delta[a0][a1] * delta[b0][b1] * delta[b2][n] + delta[a0][a1] * delta[b0][b2] * delta[b1][n] + delta[a0][a1] * delta[b0][n] * delta[b1][b2] + delta[a0][b0] * delta[a1][b1] * delta[b2][n] + delta[a0][b0] * delta[a1][b2] * delta[b1][n] + delta[a0][b0] * delta[a1][n] * delta[b1][b2] + delta[a0][b1] * delta[a1][b0] * delta[b2][n] + delta[a0][b1] * delta[a1][b2] * delta[b0][n] + delta[a0][b1] * delta[a1][n] * delta[b0][b2] + delta[a0][b2] * delta[a1][b0] * delta[b1][n] + delta[a0][b2] * delta[a1][b1] * delta[b0][n] + delta[a0][b2] * delta[a1][n] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[b0][b2] + delta[a0][n] * delta[a1][b2] * delta[b0][b1]) * (PA_2)
                            + (delta[a0][a1] * delta[a2][b0] * delta[b1][b2] + delta[a0][a1] * delta[a2][b1] * delta[b0][b2] + delta[a0][a1] * delta[a2][b2] * delta[b0][b1] + delta[a0][a2] * delta[a1][b0] * delta[b1][b2] + delta[a0][a2] * delta[a1][b1] * delta[b0][b2] + delta[a0][a2] * delta[a1][b2] * delta[b0][b1] + delta[a0][b0] * delta[a1][a2] * delta[b1][b2] + delta[a0][b0] * delta[a1][b1] * delta[a2][b2] + delta[a0][b0] * delta[a1][b2] * delta[a2][b1] + delta[a0][b1] * delta[a1][a2] * delta[b0][b2] + delta[a0][b1] * delta[a1][b0] * delta[a2][b2] + delta[a0][b1] * delta[a1][b2] * delta[a2][b0] + delta[a0][b2] * delta[a1][a2] * delta[b0][b1] + delta[a0][b2] * delta[a1][b0] * delta[a2][b1] + delta[a0][b2] * delta[a1][b1] * delta[a2][b0]) * (PA_n)
                            + (delta[a0][a1] * delta[a2][b1] * delta[b2][n] + delta[a0][a1] * delta[a2][b2] * delta[b1][n] + delta[a0][a1] * delta[a2][n] * delta[b1][b2] + delta[a0][a2] * delta[a1][b1] * delta[b2][n] + delta[a0][a2] * delta[a1][b2] * delta[b1][n] + delta[a0][a2] * delta[a1][n] * delta[b1][b2] + delta[a0][b1] * delta[a1][a2] * delta[b2][n] + delta[a0][b1] * delta[a1][b2] * delta[a2][n] + delta[a0][b1] * delta[a1][n] * delta[a2][b2] + delta[a0][b2] * delta[a1][a2] * delta[b1][n] + delta[a0][b2] * delta[a1][b1] * delta[a2][n] + delta[a0][b2] * delta[a1][n] * delta[a2][b1] + delta[a0][n] * delta[a1][a2] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[a2][b2] + delta[a0][n] * delta[a1][b2] * delta[a2][b1]) * (PB_0)
                            + (delta[a0][a1] * delta[a2][b0] * delta[b2][n] + delta[a0][a1] * delta[a2][b2] * delta[b0][n] + delta[a0][a1] * delta[a2][n] * delta[b0][b2] + delta[a0][a2] * delta[a1][b0] * delta[b2][n] + delta[a0][a2] * delta[a1][b2] * delta[b0][n] + delta[a0][a2] * delta[a1][n] * delta[b0][b2] + delta[a0][b0] * delta[a1][a2] * delta[b2][n] + delta[a0][b0] * delta[a1][b2] * delta[a2][n] + delta[a0][b0] * delta[a1][n] * delta[a2][b2] + delta[a0][b2] * delta[a1][a2] * delta[b0][n] + delta[a0][b2] * delta[a1][b0] * delta[a2][n] + delta[a0][b2] * delta[a1][n] * delta[a2][b0] + delta[a0][n] * delta[a1][a2] * delta[b0][b2] + delta[a0][n] * delta[a1][b0] * delta[a2][b2] + delta[a0][n] * delta[a1][b2] * delta[a2][b0]) * (PB_1)
                            + (delta[a0][a1] * delta[a2][b0] * delta[b1][n] + delta[a0][a1] * delta[a2][b1] * delta[b0][n] + delta[a0][a1] * delta[a2][n] * delta[b0][b1] + delta[a0][a2] * delta[a1][b0] * delta[b1][n] + delta[a0][a2] * delta[a1][b1] * delta[b0][n] + delta[a0][a2] * delta[a1][n] * delta[b0][b1] + delta[a0][b0] * delta[a1][a2] * delta[b1][n] + delta[a0][b0] * delta[a1][b1] * delta[a2][n] + delta[a0][b0] * delta[a1][n] * delta[a2][b1] + delta[a0][b1] * delta[a1][a2] * delta[b0][n] + delta[a0][b1] * delta[a1][b0] * delta[a2][n] + delta[a0][b1] * delta[a1][n] * delta[a2][b0] + delta[a0][n] * delta[a1][a2] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[a2][b1] + delta[a0][n] * delta[a1][b1] * delta[a2][b0]) * (PB_2)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_i * (
                            (delta[b0][b1] * delta[b2][n] + delta[b0][b2] * delta[b1][n] + delta[b0][n] * delta[b1][b2]) * (PA_0 * PA_1 * PA_2)
                            + (delta[a2][b0] * delta[b1][b2] + delta[a2][b1] * delta[b0][b2] + delta[a2][b2] * delta[b0][b1]) * (PA_0 * PA_1 * PA_n)
                            + (delta[a2][b1] * delta[b2][n] + delta[a2][b2] * delta[b1][n] + delta[a2][n] * delta[b1][b2]) * (PA_0 * PA_1 * PB_0)
                            + (delta[a2][b0] * delta[b2][n] + delta[a2][b2] * delta[b0][n] + delta[a2][n] * delta[b0][b2]) * (PA_0 * PA_1 * PB_1)
                            + (delta[a2][b0] * delta[b1][n] + delta[a2][b1] * delta[b0][n] + delta[a2][n] * delta[b0][b1]) * (PA_0 * PA_1 * PB_2)
                            + (delta[a1][b0] * delta[b1][b2] + delta[a1][b1] * delta[b0][b2] + delta[a1][b2] * delta[b0][b1]) * (PA_0 * PA_2 * PA_n)
                            + (delta[a1][b1] * delta[b2][n] + delta[a1][b2] * delta[b1][n] + delta[a1][n] * delta[b1][b2]) * (PA_0 * PA_2 * PB_0)
                            + (delta[a1][b0] * delta[b2][n] + delta[a1][b2] * delta[b0][n] + delta[a1][n] * delta[b0][b2]) * (PA_0 * PA_2 * PB_1)
                            + (delta[a1][b0] * delta[b1][n] + delta[a1][b1] * delta[b0][n] + delta[a1][n] * delta[b0][b1]) * (PA_0 * PA_2 * PB_2)
                            + (delta[a1][a2] * delta[b1][b2] + delta[a1][b1] * delta[a2][b2] + delta[a1][b2] * delta[a2][b1]) * (PA_0 * PA_n * PB_0)
                            + (delta[a1][a2] * delta[b0][b2] + delta[a1][b0] * delta[a2][b2] + delta[a1][b2] * delta[a2][b0]) * (PA_0 * PA_n * PB_1)
                            + (delta[a1][a2] * delta[b0][b1] + delta[a1][b0] * delta[a2][b1] + delta[a1][b1] * delta[a2][b0]) * (PA_0 * PA_n * PB_2)
                            + (delta[a1][a2] * delta[b2][n] + delta[a1][b2] * delta[a2][n] + delta[a1][n] * delta[a2][b2]) * (PA_0 * PB_0 * PB_1)
                            + (delta[a1][a2] * delta[b1][n] + delta[a1][b1] * delta[a2][n] + delta[a1][n] * delta[a2][b1]) * (PA_0 * PB_0 * PB_2)
                            + (delta[a1][a2] * delta[b0][n] + delta[a1][b0] * delta[a2][n] + delta[a1][n] * delta[a2][b0]) * (PA_0 * PB_1 * PB_2)
                            + (delta[a0][b0] * delta[b1][b2] + delta[a0][b1] * delta[b0][b2] + delta[a0][b2] * delta[b0][b1]) * (PA_1 * PA_2 * PA_n)
                            + (delta[a0][b1] * delta[b2][n] + delta[a0][b2] * delta[b1][n] + delta[a0][n] * delta[b1][b2]) * (PA_1 * PA_2 * PB_0)
                            + (delta[a0][b0] * delta[b2][n] + delta[a0][b2] * delta[b0][n] + delta[a0][n] * delta[b0][b2]) * (PA_1 * PA_2 * PB_1)
                            + (delta[a0][b0] * delta[b1][n] + delta[a0][b1] * delta[b0][n] + delta[a0][n] * delta[b0][b1]) * (PA_1 * PA_2 * PB_2)
                            + (delta[a0][a2] * delta[b1][b2] + delta[a0][b1] * delta[a2][b2] + delta[a0][b2] * delta[a2][b1]) * (PA_1 * PA_n * PB_0)
                            + (delta[a0][a2] * delta[b0][b2] + delta[a0][b0] * delta[a2][b2] + delta[a0][b2] * delta[a2][b0]) * (PA_1 * PA_n * PB_1)
                            + (delta[a0][a2] * delta[b0][b1] + delta[a0][b0] * delta[a2][b1] + delta[a0][b1] * delta[a2][b0]) * (PA_1 * PA_n * PB_2)
                            + (delta[a0][a2] * delta[b2][n] + delta[a0][b2] * delta[a2][n] + delta[a0][n] * delta[a2][b2]) * (PA_1 * PB_0 * PB_1)
                            + (delta[a0][a2] * delta[b1][n] + delta[a0][b1] * delta[a2][n] + delta[a0][n] * delta[a2][b1]) * (PA_1 * PB_0 * PB_2)
                            + (delta[a0][a2] * delta[b0][n] + delta[a0][b0] * delta[a2][n] + delta[a0][n] * delta[a2][b0]) * (PA_1 * PB_1 * PB_2)
                            + (delta[a0][a1] * delta[b1][b2] + delta[a0][b1] * delta[a1][b2] + delta[a0][b2] * delta[a1][b1]) * (PA_2 * PA_n * PB_0)
                            + (delta[a0][a1] * delta[b0][b2] + delta[a0][b0] * delta[a1][b2] + delta[a0][b2] * delta[a1][b0]) * (PA_2 * PA_n * PB_1)
                            + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PA_2 * PA_n * PB_2)
                            + (delta[a0][a1] * delta[b2][n] + delta[a0][b2] * delta[a1][n] + delta[a0][n] * delta[a1][b2]) * (PA_2 * PB_0 * PB_1)
                            + (delta[a0][a1] * delta[b1][n] + delta[a0][b1] * delta[a1][n] + delta[a0][n] * delta[a1][b1]) * (PA_2 * PB_0 * PB_2)
                            + (delta[a0][a1] * delta[b0][n] + delta[a0][b0] * delta[a1][n] + delta[a0][n] * delta[a1][b0]) * (PA_2 * PB_1 * PB_2)
                            + (delta[a0][a1] * delta[a2][b2] + delta[a0][a2] * delta[a1][b2] + delta[a0][b2] * delta[a1][a2]) * (PA_n * PB_0 * PB_1)
                            + (delta[a0][a1] * delta[a2][b1] + delta[a0][a2] * delta[a1][b1] + delta[a0][b1] * delta[a1][a2]) * (PA_n * PB_0 * PB_2)
                            + (delta[a0][a1] * delta[a2][b0] + delta[a0][a2] * delta[a1][b0] + delta[a0][b0] * delta[a1][a2]) * (PA_n * PB_1 * PB_2)
                            + (delta[a0][a1] * delta[a2][n] + delta[a0][a2] * delta[a1][n] + delta[a0][n] * delta[a1][a2]) * (PB_0 * PB_1 * PB_2)
                        )

                        + 1.0 / (a_i + a_j) * a_i * (
                            delta[b1][b2] * (PA_0 * PA_1 * PA_2 * PA_n * PB_0)
                            + delta[b0][b2] * (PA_0 * PA_1 * PA_2 * PA_n * PB_1)
                            + delta[b0][b1] * (PA_0 * PA_1 * PA_2 * PA_n * PB_2)
                            + delta[b2][n] * (PA_0 * PA_1 * PA_2 * PB_0 * PB_1)
                            + delta[b1][n] * (PA_0 * PA_1 * PA_2 * PB_0 * PB_2)
                            + delta[b0][n] * (PA_0 * PA_1 * PA_2 * PB_1 * PB_2)
                            + delta[a2][b2] * (PA_0 * PA_1 * PA_n * PB_0 * PB_1)
                            + delta[a2][b1] * (PA_0 * PA_1 * PA_n * PB_0 * PB_2)
                            + delta[a2][b0] * (PA_0 * PA_1 * PA_n * PB_1 * PB_2)
                            + delta[a2][n] * (PA_0 * PA_1 * PB_0 * PB_1 * PB_2)
                            + delta[a1][b2] * (PA_0 * PA_2 * PA_n * PB_0 * PB_1)
                            + delta[a1][b1] * (PA_0 * PA_2 * PA_n * PB_0 * PB_2)
                            + delta[a1][b0] * (PA_0 * PA_2 * PA_n * PB_1 * PB_2)
                            + delta[a1][n] * (PA_0 * PA_2 * PB_0 * PB_1 * PB_2)
                            + delta[a1][a2] * (PA_0 * PA_n * PB_0 * PB_1 * PB_2)
                            + delta[a0][b2] * (PA_1 * PA_2 * PA_n * PB_0 * PB_1)
                            + delta[a0][b1] * (PA_1 * PA_2 * PA_n * PB_0 * PB_2)
                            + delta[a0][b0] * (PA_1 * PA_2 * PA_n * PB_1 * PB_2)
                            + delta[a0][n] * (PA_1 * PA_2 * PB_0 * PB_1 * PB_2)
                            + delta[a0][a2] * (PA_1 * PA_n * PB_0 * PB_1 * PB_2)
                            + delta[a0][a1] * (PA_2 * PA_n * PB_0 * PB_1 * PB_2)
                        )

                        + 2.0 * a_i * (
                            PA_0 * PA_1 * PA_2 * PA_n * PB_0 * PB_1 * PB_2
                        )

                    )

                );

                // Note: minus sign from electron charge

                double mu_grad_j = (-1.0) * S_ij_00 * (

                    (

                        (-0.125) / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * (
                            (delta[a0][a1] * delta[a2][b0] * delta[b1][m] * delta[b2][n] + delta[a0][a1] * delta[a2][b0] * delta[b1][n] * delta[b2][m] + delta[a0][a1] * delta[a2][b1] * delta[b0][m] * delta[b2][n] + delta[a0][a1] * delta[a2][b1] * delta[b0][n] * delta[b2][m] + delta[a0][a1] * delta[a2][b2] * delta[b0][m] * delta[b1][n] + delta[a0][a1] * delta[a2][b2] * delta[b0][n] * delta[b1][m] + delta[a0][a1] * delta[a2][m] * delta[b0][b1] * delta[b2][n] + delta[a0][a1] * delta[a2][m] * delta[b0][b2] * delta[b1][n] + delta[a0][a1] * delta[a2][m] * delta[b0][n] * delta[b1][b2] + delta[a0][a2] * delta[a1][b0] * delta[b1][m] * delta[b2][n] + delta[a0][a2] * delta[a1][b0] * delta[b1][n] * delta[b2][m] + delta[a0][a2] * delta[a1][b1] * delta[b0][m] * delta[b2][n] + delta[a0][a2] * delta[a1][b1] * delta[b0][n] * delta[b2][m] + delta[a0][a2] * delta[a1][b2] * delta[b0][m] * delta[b1][n] + delta[a0][a2] * delta[a1][b2] * delta[b0][n] * delta[b1][m] + delta[a0][a2] * delta[a1][m] * delta[b0][b1] * delta[b2][n] + delta[a0][a2] * delta[a1][m] * delta[b0][b2] * delta[b1][n] + delta[a0][a2] * delta[a1][m] * delta[b0][n] * delta[b1][b2] + delta[a0][b0] * delta[a1][a2] * delta[b1][m] * delta[b2][n] + delta[a0][b0] * delta[a1][a2] * delta[b1][n] * delta[b2][m] + delta[a0][b0] * delta[a1][b1] * delta[a2][m] * delta[b2][n] + delta[a0][b0] * delta[a1][b2] * delta[a2][m] * delta[b1][n] + delta[a0][b0] * delta[a1][m] * delta[a2][b1] * delta[b2][n] + delta[a0][b0] * delta[a1][m] * delta[a2][b2] * delta[b1][n] + delta[a0][b1] * delta[a1][a2] * delta[b0][m] * delta[b2][n] + delta[a0][b1] * delta[a1][a2] * delta[b0][n] * delta[b2][m] + delta[a0][b1] * delta[a1][b0] * delta[a2][m] * delta[b2][n] + delta[a0][b1] * delta[a1][b2] * delta[a2][m] * delta[b0][n] + delta[a0][b1] * delta[a1][m] * delta[a2][b0] * delta[b2][n] + delta[a0][b1] * delta[a1][m] * delta[a2][b2] * delta[b0][n] + delta[a0][b2] * delta[a1][a2] * delta[b0][m] * delta[b1][n] + delta[a0][b2] * delta[a1][a2] * delta[b0][n] * delta[b1][m] + delta[a0][b2] * delta[a1][b0] * delta[a2][m] * delta[b1][n] + delta[a0][b2] * delta[a1][b1] * delta[a2][m] * delta[b0][n] + delta[a0][b2] * delta[a1][m] * delta[a2][b0] * delta[b1][n] + delta[a0][b2] * delta[a1][m] * delta[a2][b1] * delta[b0][n] + delta[a0][m] * delta[a1][a2] * delta[b0][b1] * delta[b2][n] + delta[a0][m] * delta[a1][a2] * delta[b0][b2] * delta[b1][n] + delta[a0][m] * delta[a1][a2] * delta[b0][n] * delta[b1][b2] + delta[a0][m] * delta[a1][b0] * delta[a2][b1] * delta[b2][n] + delta[a0][m] * delta[a1][b0] * delta[a2][b2] * delta[b1][n] + delta[a0][m] * delta[a1][b1] * delta[a2][b0] * delta[b2][n] + delta[a0][m] * delta[a1][b1] * delta[a2][b2] * delta[b0][n] + delta[a0][m] * delta[a1][b2] * delta[a2][b0] * delta[b1][n] + delta[a0][m] * delta[a1][b2] * delta[a2][b1] * delta[b0][n])
                        )

                        + (-0.25) / ( (a_i + a_j) * (a_i + a_j) ) * (
                            (delta[a2][b0] * delta[b1][m] * delta[b2][n] + delta[a2][b0] * delta[b1][n] * delta[b2][m] + delta[a2][b1] * delta[b0][m] * delta[b2][n] + delta[a2][b1] * delta[b0][n] * delta[b2][m] + delta[a2][b2] * delta[b0][m] * delta[b1][n] + delta[a2][b2] * delta[b0][n] * delta[b1][m] + delta[a2][m] * delta[b0][b1] * delta[b2][n] + delta[a2][m] * delta[b0][b2] * delta[b1][n] + delta[a2][m] * delta[b0][n] * delta[b1][b2]) * (PA_0 * PA_1)
                            + (delta[a1][b0] * delta[b1][m] * delta[b2][n] + delta[a1][b0] * delta[b1][n] * delta[b2][m] + delta[a1][b1] * delta[b0][m] * delta[b2][n] + delta[a1][b1] * delta[b0][n] * delta[b2][m] + delta[a1][b2] * delta[b0][m] * delta[b1][n] + delta[a1][b2] * delta[b0][n] * delta[b1][m] + delta[a1][m] * delta[b0][b1] * delta[b2][n] + delta[a1][m] * delta[b0][b2] * delta[b1][n] + delta[a1][m] * delta[b0][n] * delta[b1][b2]) * (PA_0 * PA_2)
                            + (delta[a1][a2] * delta[b1][m] * delta[b2][n] + delta[a1][a2] * delta[b1][n] * delta[b2][m] + delta[a1][b1] * delta[a2][m] * delta[b2][n] + delta[a1][b2] * delta[a2][m] * delta[b1][n] + delta[a1][m] * delta[a2][b1] * delta[b2][n] + delta[a1][m] * delta[a2][b2] * delta[b1][n]) * (PA_0 * PB_0)
                            + (delta[a1][a2] * delta[b0][m] * delta[b2][n] + delta[a1][a2] * delta[b0][n] * delta[b2][m] + delta[a1][b0] * delta[a2][m] * delta[b2][n] + delta[a1][b2] * delta[a2][m] * delta[b0][n] + delta[a1][m] * delta[a2][b0] * delta[b2][n] + delta[a1][m] * delta[a2][b2] * delta[b0][n]) * (PA_0 * PB_1)
                            + (delta[a1][a2] * delta[b0][m] * delta[b1][n] + delta[a1][a2] * delta[b0][n] * delta[b1][m] + delta[a1][b0] * delta[a2][m] * delta[b1][n] + delta[a1][b1] * delta[a2][m] * delta[b0][n] + delta[a1][m] * delta[a2][b0] * delta[b1][n] + delta[a1][m] * delta[a2][b1] * delta[b0][n]) * (PA_0 * PB_2)
                            + (delta[a0][b0] * delta[b1][m] * delta[b2][n] + delta[a0][b0] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[b0][m] * delta[b2][n] + delta[a0][b1] * delta[b0][n] * delta[b2][m] + delta[a0][b2] * delta[b0][m] * delta[b1][n] + delta[a0][b2] * delta[b0][n] * delta[b1][m] + delta[a0][m] * delta[b0][b1] * delta[b2][n] + delta[a0][m] * delta[b0][b2] * delta[b1][n] + delta[a0][m] * delta[b0][n] * delta[b1][b2]) * (PA_1 * PA_2)
                            + (delta[a0][a2] * delta[b1][m] * delta[b2][n] + delta[a0][a2] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[a2][m] * delta[b2][n] + delta[a0][b2] * delta[a2][m] * delta[b1][n] + delta[a0][m] * delta[a2][b1] * delta[b2][n] + delta[a0][m] * delta[a2][b2] * delta[b1][n]) * (PA_1 * PB_0)
                            + (delta[a0][a2] * delta[b0][m] * delta[b2][n] + delta[a0][a2] * delta[b0][n] * delta[b2][m] + delta[a0][b0] * delta[a2][m] * delta[b2][n] + delta[a0][b2] * delta[a2][m] * delta[b0][n] + delta[a0][m] * delta[a2][b0] * delta[b2][n] + delta[a0][m] * delta[a2][b2] * delta[b0][n]) * (PA_1 * PB_1)
                            + (delta[a0][a2] * delta[b0][m] * delta[b1][n] + delta[a0][a2] * delta[b0][n] * delta[b1][m] + delta[a0][b0] * delta[a2][m] * delta[b1][n] + delta[a0][b1] * delta[a2][m] * delta[b0][n] + delta[a0][m] * delta[a2][b0] * delta[b1][n] + delta[a0][m] * delta[a2][b1] * delta[b0][n]) * (PA_1 * PB_2)
                            + (delta[a0][a1] * delta[b1][m] * delta[b2][n] + delta[a0][a1] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[a1][m] * delta[b2][n] + delta[a0][b2] * delta[a1][m] * delta[b1][n] + delta[a0][m] * delta[a1][b1] * delta[b2][n] + delta[a0][m] * delta[a1][b2] * delta[b1][n]) * (PA_2 * PB_0)
                            + (delta[a0][a1] * delta[b0][m] * delta[b2][n] + delta[a0][a1] * delta[b0][n] * delta[b2][m] + delta[a0][b0] * delta[a1][m] * delta[b2][n] + delta[a0][b2] * delta[a1][m] * delta[b0][n] + delta[a0][m] * delta[a1][b0] * delta[b2][n] + delta[a0][m] * delta[a1][b2] * delta[b0][n]) * (PA_2 * PB_1)
                            + (delta[a0][a1] * delta[b0][m] * delta[b1][n] + delta[a0][a1] * delta[b0][n] * delta[b1][m] + delta[a0][b0] * delta[a1][m] * delta[b1][n] + delta[a0][b1] * delta[a1][m] * delta[b0][n] + delta[a0][m] * delta[a1][b0] * delta[b1][n] + delta[a0][m] * delta[a1][b1] * delta[b0][n]) * (PA_2 * PB_2)
                            + (delta[a0][a1] * delta[a2][m] * delta[b2][n] + delta[a0][a2] * delta[a1][m] * delta[b2][n] + delta[a0][m] * delta[a1][a2] * delta[b2][n]) * (PB_0 * PB_1)
                            + (delta[a0][a1] * delta[a2][m] * delta[b1][n] + delta[a0][a2] * delta[a1][m] * delta[b1][n] + delta[a0][m] * delta[a1][a2] * delta[b1][n]) * (PB_0 * PB_2)
                            + (delta[a0][a1] * delta[a2][m] * delta[b0][n] + delta[a0][a2] * delta[a1][m] * delta[b0][n] + delta[a0][m] * delta[a1][a2] * delta[b0][n]) * (PB_1 * PB_2)
                        )

                        + (-0.5) / (a_i + a_j) * (
                            (delta[b1][m] * delta[b2][n] + delta[b1][n] * delta[b2][m]) * (PA_0 * PA_1 * PA_2 * PB_0)
                            + (delta[b0][m] * delta[b2][n] + delta[b0][n] * delta[b2][m]) * (PA_0 * PA_1 * PA_2 * PB_1)
                            + (delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PA_0 * PA_1 * PA_2 * PB_2)
                            + delta[a2][m] * delta[b2][n] * (PA_0 * PA_1 * PB_0 * PB_1)
                            + delta[a2][m] * delta[b1][n] * (PA_0 * PA_1 * PB_0 * PB_2)
                            + delta[a2][m] * delta[b0][n] * (PA_0 * PA_1 * PB_1 * PB_2)
                            + delta[a1][m] * delta[b2][n] * (PA_0 * PA_2 * PB_0 * PB_1)
                            + delta[a1][m] * delta[b1][n] * (PA_0 * PA_2 * PB_0 * PB_2)
                            + delta[a1][m] * delta[b0][n] * (PA_0 * PA_2 * PB_1 * PB_2)
                            + delta[a0][m] * delta[b2][n] * (PA_1 * PA_2 * PB_0 * PB_1)
                            + delta[a0][m] * delta[b1][n] * (PA_1 * PA_2 * PB_0 * PB_2)
                            + delta[a0][m] * delta[b0][n] * (PA_1 * PA_2 * PB_1 * PB_2)
                        )

                        + 0.125 / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[a0][a1] * delta[a2][b0] * delta[b1][b2] * delta[m][n] + delta[a0][a1] * delta[a2][b0] * delta[b1][m] * delta[b2][n] + delta[a0][a1] * delta[a2][b0] * delta[b1][n] * delta[b2][m] + delta[a0][a1] * delta[a2][b1] * delta[b0][b2] * delta[m][n] + delta[a0][a1] * delta[a2][b1] * delta[b0][m] * delta[b2][n] + delta[a0][a1] * delta[a2][b1] * delta[b0][n] * delta[b2][m] + delta[a0][a1] * delta[a2][b2] * delta[b0][b1] * delta[m][n] + delta[a0][a1] * delta[a2][b2] * delta[b0][m] * delta[b1][n] + delta[a0][a1] * delta[a2][b2] * delta[b0][n] * delta[b1][m] + delta[a0][a1] * delta[a2][m] * delta[b0][b1] * delta[b2][n] + delta[a0][a1] * delta[a2][m] * delta[b0][b2] * delta[b1][n] + delta[a0][a1] * delta[a2][m] * delta[b0][n] * delta[b1][b2] + delta[a0][a1] * delta[a2][n] * delta[b0][b1] * delta[b2][m] + delta[a0][a1] * delta[a2][n] * delta[b0][b2] * delta[b1][m] + delta[a0][a1] * delta[a2][n] * delta[b0][m] * delta[b1][b2] + delta[a0][a2] * delta[a1][b0] * delta[b1][b2] * delta[m][n] + delta[a0][a2] * delta[a1][b0] * delta[b1][m] * delta[b2][n] + delta[a0][a2] * delta[a1][b0] * delta[b1][n] * delta[b2][m] + delta[a0][a2] * delta[a1][b1] * delta[b0][b2] * delta[m][n] + delta[a0][a2] * delta[a1][b1] * delta[b0][m] * delta[b2][n] + delta[a0][a2] * delta[a1][b1] * delta[b0][n] * delta[b2][m] + delta[a0][a2] * delta[a1][b2] * delta[b0][b1] * delta[m][n] + delta[a0][a2] * delta[a1][b2] * delta[b0][m] * delta[b1][n] + delta[a0][a2] * delta[a1][b2] * delta[b0][n] * delta[b1][m] + delta[a0][a2] * delta[a1][m] * delta[b0][b1] * delta[b2][n] + delta[a0][a2] * delta[a1][m] * delta[b0][b2] * delta[b1][n] + delta[a0][a2] * delta[a1][m] * delta[b0][n] * delta[b1][b2] + delta[a0][a2] * delta[a1][n] * delta[b0][b1] * delta[b2][m] + delta[a0][a2] * delta[a1][n] * delta[b0][b2] * delta[b1][m] + delta[a0][a2] * delta[a1][n] * delta[b0][m] * delta[b1][b2] + delta[a0][b0] * delta[a1][a2] * delta[b1][b2] * delta[m][n] + delta[a0][b0] * delta[a1][a2] * delta[b1][m] * delta[b2][n] + delta[a0][b0] * delta[a1][a2] * delta[b1][n] * delta[b2][m] + delta[a0][b0] * delta[a1][b1] * delta[a2][b2] * delta[m][n] + delta[a0][b0] * delta[a1][b1] * delta[a2][m] * delta[b2][n] + delta[a0][b0] * delta[a1][b1] * delta[a2][n] * delta[b2][m] + delta[a0][b0] * delta[a1][b2] * delta[a2][b1] * delta[m][n] + delta[a0][b0] * delta[a1][b2] * delta[a2][m] * delta[b1][n] + delta[a0][b0] * delta[a1][b2] * delta[a2][n] * delta[b1][m] + delta[a0][b0] * delta[a1][m] * delta[a2][b1] * delta[b2][n] + delta[a0][b0] * delta[a1][m] * delta[a2][b2] * delta[b1][n] + delta[a0][b0] * delta[a1][m] * delta[a2][n] * delta[b1][b2] + delta[a0][b0] * delta[a1][n] * delta[a2][b1] * delta[b2][m] + delta[a0][b0] * delta[a1][n] * delta[a2][b2] * delta[b1][m] + delta[a0][b0] * delta[a1][n] * delta[a2][m] * delta[b1][b2] + delta[a0][b1] * delta[a1][a2] * delta[b0][b2] * delta[m][n] + delta[a0][b1] * delta[a1][a2] * delta[b0][m] * delta[b2][n] + delta[a0][b1] * delta[a1][a2] * delta[b0][n] * delta[b2][m] + delta[a0][b1] * delta[a1][b0] * delta[a2][b2] * delta[m][n] + delta[a0][b1] * delta[a1][b0] * delta[a2][m] * delta[b2][n] + delta[a0][b1] * delta[a1][b0] * delta[a2][n] * delta[b2][m] + delta[a0][b1] * delta[a1][b2] * delta[a2][b0] * delta[m][n] + delta[a0][b1] * delta[a1][b2] * delta[a2][m] * delta[b0][n] + delta[a0][b1] * delta[a1][b2] * delta[a2][n] * delta[b0][m] + delta[a0][b1] * delta[a1][m] * delta[a2][b0] * delta[b2][n] + delta[a0][b1] * delta[a1][m] * delta[a2][b2] * delta[b0][n] + delta[a0][b1] * delta[a1][m] * delta[a2][n] * delta[b0][b2] + delta[a0][b1] * delta[a1][n] * delta[a2][b0] * delta[b2][m] + delta[a0][b1] * delta[a1][n] * delta[a2][b2] * delta[b0][m] + delta[a0][b1] * delta[a1][n] * delta[a2][m] * delta[b0][b2] + delta[a0][b2] * delta[a1][a2] * delta[b0][b1] * delta[m][n] + delta[a0][b2] * delta[a1][a2] * delta[b0][m] * delta[b1][n] + delta[a0][b2] * delta[a1][a2] * delta[b0][n] * delta[b1][m] + delta[a0][b2] * delta[a1][b0] * delta[a2][b1] * delta[m][n] + delta[a0][b2] * delta[a1][b0] * delta[a2][m] * delta[b1][n] + delta[a0][b2] * delta[a1][b0] * delta[a2][n] * delta[b1][m] + delta[a0][b2] * delta[a1][b1] * delta[a2][b0] * delta[m][n] + delta[a0][b2] * delta[a1][b1] * delta[a2][m] * delta[b0][n] + delta[a0][b2] * delta[a1][b1] * delta[a2][n] * delta[b0][m] + delta[a0][b2] * delta[a1][m] * delta[a2][b0] * delta[b1][n] + delta[a0][b2] * delta[a1][m] * delta[a2][b1] * delta[b0][n] + delta[a0][b2] * delta[a1][m] * delta[a2][n] * delta[b0][b1] + delta[a0][b2] * delta[a1][n] * delta[a2][b0] * delta[b1][m] + delta[a0][b2] * delta[a1][n] * delta[a2][b1] * delta[b0][m] + delta[a0][b2] * delta[a1][n] * delta[a2][m] * delta[b0][b1] + delta[a0][m] * delta[a1][a2] * delta[b0][b1] * delta[b2][n] + delta[a0][m] * delta[a1][a2] * delta[b0][b2] * delta[b1][n] + delta[a0][m] * delta[a1][a2] * delta[b0][n] * delta[b1][b2] + delta[a0][m] * delta[a1][b0] * delta[a2][b1] * delta[b2][n] + delta[a0][m] * delta[a1][b0] * delta[a2][b2] * delta[b1][n] + delta[a0][m] * delta[a1][b0] * delta[a2][n] * delta[b1][b2] + delta[a0][m] * delta[a1][b1] * delta[a2][b0] * delta[b2][n] + delta[a0][m] * delta[a1][b1] * delta[a2][b2] * delta[b0][n] + delta[a0][m] * delta[a1][b1] * delta[a2][n] * delta[b0][b2] + delta[a0][m] * delta[a1][b2] * delta[a2][b0] * delta[b1][n] + delta[a0][m] * delta[a1][b2] * delta[a2][b1] * delta[b0][n] + delta[a0][m] * delta[a1][b2] * delta[a2][n] * delta[b0][b1] + delta[a0][m] * delta[a1][n] * delta[a2][b0] * delta[b1][b2] + delta[a0][m] * delta[a1][n] * delta[a2][b1] * delta[b0][b2] + delta[a0][m] * delta[a1][n] * delta[a2][b2] * delta[b0][b1] + delta[a0][n] * delta[a1][a2] * delta[b0][b1] * delta[b2][m] + delta[a0][n] * delta[a1][a2] * delta[b0][b2] * delta[b1][m] + delta[a0][n] * delta[a1][a2] * delta[b0][m] * delta[b1][b2] + delta[a0][n] * delta[a1][b0] * delta[a2][b1] * delta[b2][m] + delta[a0][n] * delta[a1][b0] * delta[a2][b2] * delta[b1][m] + delta[a0][n] * delta[a1][b0] * delta[a2][m] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[a2][b0] * delta[b2][m] + delta[a0][n] * delta[a1][b1] * delta[a2][b2] * delta[b0][m] + delta[a0][n] * delta[a1][b1] * delta[a2][m] * delta[b0][b2] + delta[a0][n] * delta[a1][b2] * delta[a2][b0] * delta[b1][m] + delta[a0][n] * delta[a1][b2] * delta[a2][b1] * delta[b0][m] + delta[a0][n] * delta[a1][b2] * delta[a2][m] * delta[b0][b1] + delta[a0][n] * delta[a1][m] * delta[a2][b0] * delta[b1][b2] + delta[a0][n] * delta[a1][m] * delta[a2][b1] * delta[b0][b2] + delta[a0][n] * delta[a1][m] * delta[a2][b2] * delta[b0][b1])
                        )

                        + 0.25 / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[a2][b0] * delta[b1][b2] * delta[m][n] + delta[a2][b0] * delta[b1][m] * delta[b2][n] + delta[a2][b0] * delta[b1][n] * delta[b2][m] + delta[a2][b1] * delta[b0][b2] * delta[m][n] + delta[a2][b1] * delta[b0][m] * delta[b2][n] + delta[a2][b1] * delta[b0][n] * delta[b2][m] + delta[a2][b2] * delta[b0][b1] * delta[m][n] + delta[a2][b2] * delta[b0][m] * delta[b1][n] + delta[a2][b2] * delta[b0][n] * delta[b1][m] + delta[a2][m] * delta[b0][b1] * delta[b2][n] + delta[a2][m] * delta[b0][b2] * delta[b1][n] + delta[a2][m] * delta[b0][n] * delta[b1][b2] + delta[a2][n] * delta[b0][b1] * delta[b2][m] + delta[a2][n] * delta[b0][b2] * delta[b1][m] + delta[a2][n] * delta[b0][m] * delta[b1][b2]) * (PA_0 * PA_1)
                            + (delta[a1][b0] * delta[b1][b2] * delta[m][n] + delta[a1][b0] * delta[b1][m] * delta[b2][n] + delta[a1][b0] * delta[b1][n] * delta[b2][m] + delta[a1][b1] * delta[b0][b2] * delta[m][n] + delta[a1][b1] * delta[b0][m] * delta[b2][n] + delta[a1][b1] * delta[b0][n] * delta[b2][m] + delta[a1][b2] * delta[b0][b1] * delta[m][n] + delta[a1][b2] * delta[b0][m] * delta[b1][n] + delta[a1][b2] * delta[b0][n] * delta[b1][m] + delta[a1][m] * delta[b0][b1] * delta[b2][n] + delta[a1][m] * delta[b0][b2] * delta[b1][n] + delta[a1][m] * delta[b0][n] * delta[b1][b2] + delta[a1][n] * delta[b0][b1] * delta[b2][m] + delta[a1][n] * delta[b0][b2] * delta[b1][m] + delta[a1][n] * delta[b0][m] * delta[b1][b2]) * (PA_0 * PA_2)
                            + (delta[a1][a2] * delta[b1][b2] * delta[m][n] + delta[a1][a2] * delta[b1][m] * delta[b2][n] + delta[a1][a2] * delta[b1][n] * delta[b2][m] + delta[a1][b1] * delta[a2][b2] * delta[m][n] + delta[a1][b1] * delta[a2][m] * delta[b2][n] + delta[a1][b1] * delta[a2][n] * delta[b2][m] + delta[a1][b2] * delta[a2][b1] * delta[m][n] + delta[a1][b2] * delta[a2][m] * delta[b1][n] + delta[a1][b2] * delta[a2][n] * delta[b1][m] + delta[a1][m] * delta[a2][b1] * delta[b2][n] + delta[a1][m] * delta[a2][b2] * delta[b1][n] + delta[a1][m] * delta[a2][n] * delta[b1][b2] + delta[a1][n] * delta[a2][b1] * delta[b2][m] + delta[a1][n] * delta[a2][b2] * delta[b1][m] + delta[a1][n] * delta[a2][m] * delta[b1][b2]) * (PA_0 * PB_0)
                            + (delta[a1][a2] * delta[b0][b2] * delta[m][n] + delta[a1][a2] * delta[b0][m] * delta[b2][n] + delta[a1][a2] * delta[b0][n] * delta[b2][m] + delta[a1][b0] * delta[a2][b2] * delta[m][n] + delta[a1][b0] * delta[a2][m] * delta[b2][n] + delta[a1][b0] * delta[a2][n] * delta[b2][m] + delta[a1][b2] * delta[a2][b0] * delta[m][n] + delta[a1][b2] * delta[a2][m] * delta[b0][n] + delta[a1][b2] * delta[a2][n] * delta[b0][m] + delta[a1][m] * delta[a2][b0] * delta[b2][n] + delta[a1][m] * delta[a2][b2] * delta[b0][n] + delta[a1][m] * delta[a2][n] * delta[b0][b2] + delta[a1][n] * delta[a2][b0] * delta[b2][m] + delta[a1][n] * delta[a2][b2] * delta[b0][m] + delta[a1][n] * delta[a2][m] * delta[b0][b2]) * (PA_0 * PB_1)
                            + (delta[a1][a2] * delta[b0][b1] * delta[m][n] + delta[a1][a2] * delta[b0][m] * delta[b1][n] + delta[a1][a2] * delta[b0][n] * delta[b1][m] + delta[a1][b0] * delta[a2][b1] * delta[m][n] + delta[a1][b0] * delta[a2][m] * delta[b1][n] + delta[a1][b0] * delta[a2][n] * delta[b1][m] + delta[a1][b1] * delta[a2][b0] * delta[m][n] + delta[a1][b1] * delta[a2][m] * delta[b0][n] + delta[a1][b1] * delta[a2][n] * delta[b0][m] + delta[a1][m] * delta[a2][b0] * delta[b1][n] + delta[a1][m] * delta[a2][b1] * delta[b0][n] + delta[a1][m] * delta[a2][n] * delta[b0][b1] + delta[a1][n] * delta[a2][b0] * delta[b1][m] + delta[a1][n] * delta[a2][b1] * delta[b0][m] + delta[a1][n] * delta[a2][m] * delta[b0][b1]) * (PA_0 * PB_2)
                            + (delta[a1][a2] * delta[b0][b1] * delta[b2][m] + delta[a1][a2] * delta[b0][b2] * delta[b1][m] + delta[a1][a2] * delta[b0][m] * delta[b1][b2] + delta[a1][b0] * delta[a2][b1] * delta[b2][m] + delta[a1][b0] * delta[a2][b2] * delta[b1][m] + delta[a1][b0] * delta[a2][m] * delta[b1][b2] + delta[a1][b1] * delta[a2][b0] * delta[b2][m] + delta[a1][b1] * delta[a2][b2] * delta[b0][m] + delta[a1][b1] * delta[a2][m] * delta[b0][b2] + delta[a1][b2] * delta[a2][b0] * delta[b1][m] + delta[a1][b2] * delta[a2][b1] * delta[b0][m] + delta[a1][b2] * delta[a2][m] * delta[b0][b1] + delta[a1][m] * delta[a2][b0] * delta[b1][b2] + delta[a1][m] * delta[a2][b1] * delta[b0][b2] + delta[a1][m] * delta[a2][b2] * delta[b0][b1]) * (PA_0 * PB_n)
                            + (delta[a0][b0] * delta[b1][b2] * delta[m][n] + delta[a0][b0] * delta[b1][m] * delta[b2][n] + delta[a0][b0] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[b0][b2] * delta[m][n] + delta[a0][b1] * delta[b0][m] * delta[b2][n] + delta[a0][b1] * delta[b0][n] * delta[b2][m] + delta[a0][b2] * delta[b0][b1] * delta[m][n] + delta[a0][b2] * delta[b0][m] * delta[b1][n] + delta[a0][b2] * delta[b0][n] * delta[b1][m] + delta[a0][m] * delta[b0][b1] * delta[b2][n] + delta[a0][m] * delta[b0][b2] * delta[b1][n] + delta[a0][m] * delta[b0][n] * delta[b1][b2] + delta[a0][n] * delta[b0][b1] * delta[b2][m] + delta[a0][n] * delta[b0][b2] * delta[b1][m] + delta[a0][n] * delta[b0][m] * delta[b1][b2]) * (PA_1 * PA_2)
                            + (delta[a0][a2] * delta[b1][b2] * delta[m][n] + delta[a0][a2] * delta[b1][m] * delta[b2][n] + delta[a0][a2] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[a2][b2] * delta[m][n] + delta[a0][b1] * delta[a2][m] * delta[b2][n] + delta[a0][b1] * delta[a2][n] * delta[b2][m] + delta[a0][b2] * delta[a2][b1] * delta[m][n] + delta[a0][b2] * delta[a2][m] * delta[b1][n] + delta[a0][b2] * delta[a2][n] * delta[b1][m] + delta[a0][m] * delta[a2][b1] * delta[b2][n] + delta[a0][m] * delta[a2][b2] * delta[b1][n] + delta[a0][m] * delta[a2][n] * delta[b1][b2] + delta[a0][n] * delta[a2][b1] * delta[b2][m] + delta[a0][n] * delta[a2][b2] * delta[b1][m] + delta[a0][n] * delta[a2][m] * delta[b1][b2]) * (PA_1 * PB_0)
                            + (delta[a0][a2] * delta[b0][b2] * delta[m][n] + delta[a0][a2] * delta[b0][m] * delta[b2][n] + delta[a0][a2] * delta[b0][n] * delta[b2][m] + delta[a0][b0] * delta[a2][b2] * delta[m][n] + delta[a0][b0] * delta[a2][m] * delta[b2][n] + delta[a0][b0] * delta[a2][n] * delta[b2][m] + delta[a0][b2] * delta[a2][b0] * delta[m][n] + delta[a0][b2] * delta[a2][m] * delta[b0][n] + delta[a0][b2] * delta[a2][n] * delta[b0][m] + delta[a0][m] * delta[a2][b0] * delta[b2][n] + delta[a0][m] * delta[a2][b2] * delta[b0][n] + delta[a0][m] * delta[a2][n] * delta[b0][b2] + delta[a0][n] * delta[a2][b0] * delta[b2][m] + delta[a0][n] * delta[a2][b2] * delta[b0][m] + delta[a0][n] * delta[a2][m] * delta[b0][b2]) * (PA_1 * PB_1)
                            + (delta[a0][a2] * delta[b0][b1] * delta[m][n] + delta[a0][a2] * delta[b0][m] * delta[b1][n] + delta[a0][a2] * delta[b0][n] * delta[b1][m] + delta[a0][b0] * delta[a2][b1] * delta[m][n] + delta[a0][b0] * delta[a2][m] * delta[b1][n] + delta[a0][b0] * delta[a2][n] * delta[b1][m] + delta[a0][b1] * delta[a2][b0] * delta[m][n] + delta[a0][b1] * delta[a2][m] * delta[b0][n] + delta[a0][b1] * delta[a2][n] * delta[b0][m] + delta[a0][m] * delta[a2][b0] * delta[b1][n] + delta[a0][m] * delta[a2][b1] * delta[b0][n] + delta[a0][m] * delta[a2][n] * delta[b0][b1] + delta[a0][n] * delta[a2][b0] * delta[b1][m] + delta[a0][n] * delta[a2][b1] * delta[b0][m] + delta[a0][n] * delta[a2][m] * delta[b0][b1]) * (PA_1 * PB_2)
                            + (delta[a0][a2] * delta[b0][b1] * delta[b2][m] + delta[a0][a2] * delta[b0][b2] * delta[b1][m] + delta[a0][a2] * delta[b0][m] * delta[b1][b2] + delta[a0][b0] * delta[a2][b1] * delta[b2][m] + delta[a0][b0] * delta[a2][b2] * delta[b1][m] + delta[a0][b0] * delta[a2][m] * delta[b1][b2] + delta[a0][b1] * delta[a2][b0] * delta[b2][m] + delta[a0][b1] * delta[a2][b2] * delta[b0][m] + delta[a0][b1] * delta[a2][m] * delta[b0][b2] + delta[a0][b2] * delta[a2][b0] * delta[b1][m] + delta[a0][b2] * delta[a2][b1] * delta[b0][m] + delta[a0][b2] * delta[a2][m] * delta[b0][b1] + delta[a0][m] * delta[a2][b0] * delta[b1][b2] + delta[a0][m] * delta[a2][b1] * delta[b0][b2] + delta[a0][m] * delta[a2][b2] * delta[b0][b1]) * (PA_1 * PB_n)
                            + (delta[a0][a1] * delta[b1][b2] * delta[m][n] + delta[a0][a1] * delta[b1][m] * delta[b2][n] + delta[a0][a1] * delta[b1][n] * delta[b2][m] + delta[a0][b1] * delta[a1][b2] * delta[m][n] + delta[a0][b1] * delta[a1][m] * delta[b2][n] + delta[a0][b1] * delta[a1][n] * delta[b2][m] + delta[a0][b2] * delta[a1][b1] * delta[m][n] + delta[a0][b2] * delta[a1][m] * delta[b1][n] + delta[a0][b2] * delta[a1][n] * delta[b1][m] + delta[a0][m] * delta[a1][b1] * delta[b2][n] + delta[a0][m] * delta[a1][b2] * delta[b1][n] + delta[a0][m] * delta[a1][n] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[b2][m] + delta[a0][n] * delta[a1][b2] * delta[b1][m] + delta[a0][n] * delta[a1][m] * delta[b1][b2]) * (PA_2 * PB_0)
                            + (delta[a0][a1] * delta[b0][b2] * delta[m][n] + delta[a0][a1] * delta[b0][m] * delta[b2][n] + delta[a0][a1] * delta[b0][n] * delta[b2][m] + delta[a0][b0] * delta[a1][b2] * delta[m][n] + delta[a0][b0] * delta[a1][m] * delta[b2][n] + delta[a0][b0] * delta[a1][n] * delta[b2][m] + delta[a0][b2] * delta[a1][b0] * delta[m][n] + delta[a0][b2] * delta[a1][m] * delta[b0][n] + delta[a0][b2] * delta[a1][n] * delta[b0][m] + delta[a0][m] * delta[a1][b0] * delta[b2][n] + delta[a0][m] * delta[a1][b2] * delta[b0][n] + delta[a0][m] * delta[a1][n] * delta[b0][b2] + delta[a0][n] * delta[a1][b0] * delta[b2][m] + delta[a0][n] * delta[a1][b2] * delta[b0][m] + delta[a0][n] * delta[a1][m] * delta[b0][b2]) * (PA_2 * PB_1)
                            + (delta[a0][a1] * delta[b0][b1] * delta[m][n] + delta[a0][a1] * delta[b0][m] * delta[b1][n] + delta[a0][a1] * delta[b0][n] * delta[b1][m] + delta[a0][b0] * delta[a1][b1] * delta[m][n] + delta[a0][b0] * delta[a1][m] * delta[b1][n] + delta[a0][b0] * delta[a1][n] * delta[b1][m] + delta[a0][b1] * delta[a1][b0] * delta[m][n] + delta[a0][b1] * delta[a1][m] * delta[b0][n] + delta[a0][b1] * delta[a1][n] * delta[b0][m] + delta[a0][m] * delta[a1][b0] * delta[b1][n] + delta[a0][m] * delta[a1][b1] * delta[b0][n] + delta[a0][m] * delta[a1][n] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[b1][m] + delta[a0][n] * delta[a1][b1] * delta[b0][m] + delta[a0][n] * delta[a1][m] * delta[b0][b1]) * (PA_2 * PB_2)
                            + (delta[a0][a1] * delta[b0][b1] * delta[b2][m] + delta[a0][a1] * delta[b0][b2] * delta[b1][m] + delta[a0][a1] * delta[b0][m] * delta[b1][b2] + delta[a0][b0] * delta[a1][b1] * delta[b2][m] + delta[a0][b0] * delta[a1][b2] * delta[b1][m] + delta[a0][b0] * delta[a1][m] * delta[b1][b2] + delta[a0][b1] * delta[a1][b0] * delta[b2][m] + delta[a0][b1] * delta[a1][b2] * delta[b0][m] + delta[a0][b1] * delta[a1][m] * delta[b0][b2] + delta[a0][b2] * delta[a1][b0] * delta[b1][m] + delta[a0][b2] * delta[a1][b1] * delta[b0][m] + delta[a0][b2] * delta[a1][m] * delta[b0][b1] + delta[a0][m] * delta[a1][b0] * delta[b1][b2] + delta[a0][m] * delta[a1][b1] * delta[b0][b2] + delta[a0][m] * delta[a1][b2] * delta[b0][b1]) * (PA_2 * PB_n)
                            + (delta[a0][a1] * delta[a2][b2] * delta[m][n] + delta[a0][a1] * delta[a2][m] * delta[b2][n] + delta[a0][a1] * delta[a2][n] * delta[b2][m] + delta[a0][a2] * delta[a1][b2] * delta[m][n] + delta[a0][a2] * delta[a1][m] * delta[b2][n] + delta[a0][a2] * delta[a1][n] * delta[b2][m] + delta[a0][b2] * delta[a1][a2] * delta[m][n] + delta[a0][b2] * delta[a1][m] * delta[a2][n] + delta[a0][b2] * delta[a1][n] * delta[a2][m] + delta[a0][m] * delta[a1][a2] * delta[b2][n] + delta[a0][m] * delta[a1][b2] * delta[a2][n] + delta[a0][m] * delta[a1][n] * delta[a2][b2] + delta[a0][n] * delta[a1][a2] * delta[b2][m] + delta[a0][n] * delta[a1][b2] * delta[a2][m] + delta[a0][n] * delta[a1][m] * delta[a2][b2]) * (PB_0 * PB_1)
                            + (delta[a0][a1] * delta[a2][b1] * delta[m][n] + delta[a0][a1] * delta[a2][m] * delta[b1][n] + delta[a0][a1] * delta[a2][n] * delta[b1][m] + delta[a0][a2] * delta[a1][b1] * delta[m][n] + delta[a0][a2] * delta[a1][m] * delta[b1][n] + delta[a0][a2] * delta[a1][n] * delta[b1][m] + delta[a0][b1] * delta[a1][a2] * delta[m][n] + delta[a0][b1] * delta[a1][m] * delta[a2][n] + delta[a0][b1] * delta[a1][n] * delta[a2][m] + delta[a0][m] * delta[a1][a2] * delta[b1][n] + delta[a0][m] * delta[a1][b1] * delta[a2][n] + delta[a0][m] * delta[a1][n] * delta[a2][b1] + delta[a0][n] * delta[a1][a2] * delta[b1][m] + delta[a0][n] * delta[a1][b1] * delta[a2][m] + delta[a0][n] * delta[a1][m] * delta[a2][b1]) * (PB_0 * PB_2)
                            + (delta[a0][a1] * delta[a2][b1] * delta[b2][m] + delta[a0][a1] * delta[a2][b2] * delta[b1][m] + delta[a0][a1] * delta[a2][m] * delta[b1][b2] + delta[a0][a2] * delta[a1][b1] * delta[b2][m] + delta[a0][a2] * delta[a1][b2] * delta[b1][m] + delta[a0][a2] * delta[a1][m] * delta[b1][b2] + delta[a0][b1] * delta[a1][a2] * delta[b2][m] + delta[a0][b1] * delta[a1][b2] * delta[a2][m] + delta[a0][b1] * delta[a1][m] * delta[a2][b2] + delta[a0][b2] * delta[a1][a2] * delta[b1][m] + delta[a0][b2] * delta[a1][b1] * delta[a2][m] + delta[a0][b2] * delta[a1][m] * delta[a2][b1] + delta[a0][m] * delta[a1][a2] * delta[b1][b2] + delta[a0][m] * delta[a1][b1] * delta[a2][b2] + delta[a0][m] * delta[a1][b2] * delta[a2][b1]) * (PB_0 * PB_n)
                            + (delta[a0][a1] * delta[a2][b0] * delta[m][n] + delta[a0][a1] * delta[a2][m] * delta[b0][n] + delta[a0][a1] * delta[a2][n] * delta[b0][m] + delta[a0][a2] * delta[a1][b0] * delta[m][n] + delta[a0][a2] * delta[a1][m] * delta[b0][n] + delta[a0][a2] * delta[a1][n] * delta[b0][m] + delta[a0][b0] * delta[a1][a2] * delta[m][n] + delta[a0][b0] * delta[a1][m] * delta[a2][n] + delta[a0][b0] * delta[a1][n] * delta[a2][m] + delta[a0][m] * delta[a1][a2] * delta[b0][n] + delta[a0][m] * delta[a1][b0] * delta[a2][n] + delta[a0][m] * delta[a1][n] * delta[a2][b0] + delta[a0][n] * delta[a1][a2] * delta[b0][m] + delta[a0][n] * delta[a1][b0] * delta[a2][m] + delta[a0][n] * delta[a1][m] * delta[a2][b0]) * (PB_1 * PB_2)
                            + (delta[a0][a1] * delta[a2][b0] * delta[b2][m] + delta[a0][a1] * delta[a2][b2] * delta[b0][m] + delta[a0][a1] * delta[a2][m] * delta[b0][b2] + delta[a0][a2] * delta[a1][b0] * delta[b2][m] + delta[a0][a2] * delta[a1][b2] * delta[b0][m] + delta[a0][a2] * delta[a1][m] * delta[b0][b2] + delta[a0][b0] * delta[a1][a2] * delta[b2][m] + delta[a0][b0] * delta[a1][b2] * delta[a2][m] + delta[a0][b0] * delta[a1][m] * delta[a2][b2] + delta[a0][b2] * delta[a1][a2] * delta[b0][m] + delta[a0][b2] * delta[a1][b0] * delta[a2][m] + delta[a0][b2] * delta[a1][m] * delta[a2][b0] + delta[a0][m] * delta[a1][a2] * delta[b0][b2] + delta[a0][m] * delta[a1][b0] * delta[a2][b2] + delta[a0][m] * delta[a1][b2] * delta[a2][b0]) * (PB_1 * PB_n)
                            + (delta[a0][a1] * delta[a2][b0] * delta[b1][m] + delta[a0][a1] * delta[a2][b1] * delta[b0][m] + delta[a0][a1] * delta[a2][m] * delta[b0][b1] + delta[a0][a2] * delta[a1][b0] * delta[b1][m] + delta[a0][a2] * delta[a1][b1] * delta[b0][m] + delta[a0][a2] * delta[a1][m] * delta[b0][b1] + delta[a0][b0] * delta[a1][a2] * delta[b1][m] + delta[a0][b0] * delta[a1][b1] * delta[a2][m] + delta[a0][b0] * delta[a1][m] * delta[a2][b1] + delta[a0][b1] * delta[a1][a2] * delta[b0][m] + delta[a0][b1] * delta[a1][b0] * delta[a2][m] + delta[a0][b1] * delta[a1][m] * delta[a2][b0] + delta[a0][m] * delta[a1][a2] * delta[b0][b1] + delta[a0][m] * delta[a1][b0] * delta[a2][b1] + delta[a0][m] * delta[a1][b1] * delta[a2][b0]) * (PB_2 * PB_n)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[b1][b2] * delta[m][n] + delta[b1][m] * delta[b2][n] + delta[b1][n] * delta[b2][m]) * (PA_0 * PA_1 * PA_2 * PB_0)
                            + (delta[b0][b2] * delta[m][n] + delta[b0][m] * delta[b2][n] + delta[b0][n] * delta[b2][m]) * (PA_0 * PA_1 * PA_2 * PB_1)
                            + (delta[b0][b1] * delta[m][n] + delta[b0][m] * delta[b1][n] + delta[b0][n] * delta[b1][m]) * (PA_0 * PA_1 * PA_2 * PB_2)
                            + (delta[b0][b1] * delta[b2][m] + delta[b0][b2] * delta[b1][m] + delta[b0][m] * delta[b1][b2]) * (PA_0 * PA_1 * PA_2 * PB_n)
                            + (delta[a2][b2] * delta[m][n] + delta[a2][m] * delta[b2][n] + delta[a2][n] * delta[b2][m]) * (PA_0 * PA_1 * PB_0 * PB_1)
                            + (delta[a2][b1] * delta[m][n] + delta[a2][m] * delta[b1][n] + delta[a2][n] * delta[b1][m]) * (PA_0 * PA_1 * PB_0 * PB_2)
                            + (delta[a2][b1] * delta[b2][m] + delta[a2][b2] * delta[b1][m] + delta[a2][m] * delta[b1][b2]) * (PA_0 * PA_1 * PB_0 * PB_n)
                            + (delta[a2][b0] * delta[m][n] + delta[a2][m] * delta[b0][n] + delta[a2][n] * delta[b0][m]) * (PA_0 * PA_1 * PB_1 * PB_2)
                            + (delta[a2][b0] * delta[b2][m] + delta[a2][b2] * delta[b0][m] + delta[a2][m] * delta[b0][b2]) * (PA_0 * PA_1 * PB_1 * PB_n)
                            + (delta[a2][b0] * delta[b1][m] + delta[a2][b1] * delta[b0][m] + delta[a2][m] * delta[b0][b1]) * (PA_0 * PA_1 * PB_2 * PB_n)
                            + (delta[a1][b2] * delta[m][n] + delta[a1][m] * delta[b2][n] + delta[a1][n] * delta[b2][m]) * (PA_0 * PA_2 * PB_0 * PB_1)
                            + (delta[a1][b1] * delta[m][n] + delta[a1][m] * delta[b1][n] + delta[a1][n] * delta[b1][m]) * (PA_0 * PA_2 * PB_0 * PB_2)
                            + (delta[a1][b1] * delta[b2][m] + delta[a1][b2] * delta[b1][m] + delta[a1][m] * delta[b1][b2]) * (PA_0 * PA_2 * PB_0 * PB_n)
                            + (delta[a1][b0] * delta[m][n] + delta[a1][m] * delta[b0][n] + delta[a1][n] * delta[b0][m]) * (PA_0 * PA_2 * PB_1 * PB_2)
                            + (delta[a1][b0] * delta[b2][m] + delta[a1][b2] * delta[b0][m] + delta[a1][m] * delta[b0][b2]) * (PA_0 * PA_2 * PB_1 * PB_n)
                            + (delta[a1][b0] * delta[b1][m] + delta[a1][b1] * delta[b0][m] + delta[a1][m] * delta[b0][b1]) * (PA_0 * PA_2 * PB_2 * PB_n)
                            + (delta[a1][a2] * delta[m][n] + delta[a1][m] * delta[a2][n] + delta[a1][n] * delta[a2][m]) * (PA_0 * PB_0 * PB_1 * PB_2)
                            + (delta[a1][a2] * delta[b2][m] + delta[a1][b2] * delta[a2][m] + delta[a1][m] * delta[a2][b2]) * (PA_0 * PB_0 * PB_1 * PB_n)
                            + (delta[a1][a2] * delta[b1][m] + delta[a1][b1] * delta[a2][m] + delta[a1][m] * delta[a2][b1]) * (PA_0 * PB_0 * PB_2 * PB_n)
                            + (delta[a1][a2] * delta[b0][m] + delta[a1][b0] * delta[a2][m] + delta[a1][m] * delta[a2][b0]) * (PA_0 * PB_1 * PB_2 * PB_n)
                            + (delta[a0][b2] * delta[m][n] + delta[a0][m] * delta[b2][n] + delta[a0][n] * delta[b2][m]) * (PA_1 * PA_2 * PB_0 * PB_1)
                            + (delta[a0][b1] * delta[m][n] + delta[a0][m] * delta[b1][n] + delta[a0][n] * delta[b1][m]) * (PA_1 * PA_2 * PB_0 * PB_2)
                            + (delta[a0][b1] * delta[b2][m] + delta[a0][b2] * delta[b1][m] + delta[a0][m] * delta[b1][b2]) * (PA_1 * PA_2 * PB_0 * PB_n)
                            + (delta[a0][b0] * delta[m][n] + delta[a0][m] * delta[b0][n] + delta[a0][n] * delta[b0][m]) * (PA_1 * PA_2 * PB_1 * PB_2)
                            + (delta[a0][b0] * delta[b2][m] + delta[a0][b2] * delta[b0][m] + delta[a0][m] * delta[b0][b2]) * (PA_1 * PA_2 * PB_1 * PB_n)
                            + (delta[a0][b0] * delta[b1][m] + delta[a0][b1] * delta[b0][m] + delta[a0][m] * delta[b0][b1]) * (PA_1 * PA_2 * PB_2 * PB_n)
                            + (delta[a0][a2] * delta[m][n] + delta[a0][m] * delta[a2][n] + delta[a0][n] * delta[a2][m]) * (PA_1 * PB_0 * PB_1 * PB_2)
                            + (delta[a0][a2] * delta[b2][m] + delta[a0][b2] * delta[a2][m] + delta[a0][m] * delta[a2][b2]) * (PA_1 * PB_0 * PB_1 * PB_n)
                            + (delta[a0][a2] * delta[b1][m] + delta[a0][b1] * delta[a2][m] + delta[a0][m] * delta[a2][b1]) * (PA_1 * PB_0 * PB_2 * PB_n)
                            + (delta[a0][a2] * delta[b0][m] + delta[a0][b0] * delta[a2][m] + delta[a0][m] * delta[a2][b0]) * (PA_1 * PB_1 * PB_2 * PB_n)
                            + (delta[a0][a1] * delta[m][n] + delta[a0][m] * delta[a1][n] + delta[a0][n] * delta[a1][m]) * (PA_2 * PB_0 * PB_1 * PB_2)
                            + (delta[a0][a1] * delta[b2][m] + delta[a0][b2] * delta[a1][m] + delta[a0][m] * delta[a1][b2]) * (PA_2 * PB_0 * PB_1 * PB_n)
                            + (delta[a0][a1] * delta[b1][m] + delta[a0][b1] * delta[a1][m] + delta[a0][m] * delta[a1][b1]) * (PA_2 * PB_0 * PB_2 * PB_n)
                            + (delta[a0][a1] * delta[b0][m] + delta[a0][b0] * delta[a1][m] + delta[a0][m] * delta[a1][b0]) * (PA_2 * PB_1 * PB_2 * PB_n)
                            + (delta[a0][a1] * delta[a2][m] + delta[a0][a2] * delta[a1][m] + delta[a0][m] * delta[a1][a2]) * (PB_0 * PB_1 * PB_2 * PB_n)
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[m][n] * (PA_0 * PA_1 * PA_2 * PB_0 * PB_1 * PB_2)
                            + delta[b2][m] * (PA_0 * PA_1 * PA_2 * PB_0 * PB_1 * PB_n)
                            + delta[b1][m] * (PA_0 * PA_1 * PA_2 * PB_0 * PB_2 * PB_n)
                            + delta[b0][m] * (PA_0 * PA_1 * PA_2 * PB_1 * PB_2 * PB_n)
                            + delta[a2][m] * (PA_0 * PA_1 * PB_0 * PB_1 * PB_2 * PB_n)
                            + delta[a1][m] * (PA_0 * PA_2 * PB_0 * PB_1 * PB_2 * PB_n)
                            + delta[a0][m] * (PA_1 * PA_2 * PB_0 * PB_1 * PB_2 * PB_n)
                        )

                    )

                    + PC[m] * (

                        (-0.25) / ( (a_i + a_j) * (a_i + a_j) ) * (
                            (delta[a1][a2] * delta[b0][b1] * delta[b2][n] + delta[a1][a2] * delta[b0][b2] * delta[b1][n] + delta[a1][a2] * delta[b0][n] * delta[b1][b2] + delta[a1][b0] * delta[a2][b1] * delta[b2][n] + delta[a1][b0] * delta[a2][b2] * delta[b1][n] + delta[a1][b1] * delta[a2][b0] * delta[b2][n] + delta[a1][b1] * delta[a2][b2] * delta[b0][n] + delta[a1][b2] * delta[a2][b0] * delta[b1][n] + delta[a1][b2] * delta[a2][b1] * delta[b0][n]) * (PA_0)
                            + (delta[a0][a2] * delta[b0][b1] * delta[b2][n] + delta[a0][a2] * delta[b0][b2] * delta[b1][n] + delta[a0][a2] * delta[b0][n] * delta[b1][b2] + delta[a0][b0] * delta[a2][b1] * delta[b2][n] + delta[a0][b0] * delta[a2][b2] * delta[b1][n] + delta[a0][b1] * delta[a2][b0] * delta[b2][n] + delta[a0][b1] * delta[a2][b2] * delta[b0][n] + delta[a0][b2] * delta[a2][b0] * delta[b1][n] + delta[a0][b2] * delta[a2][b1] * delta[b0][n]) * (PA_1)
                            + (delta[a0][a1] * delta[b0][b1] * delta[b2][n] + delta[a0][a1] * delta[b0][b2] * delta[b1][n] + delta[a0][a1] * delta[b0][n] * delta[b1][b2] + delta[a0][b0] * delta[a1][b1] * delta[b2][n] + delta[a0][b0] * delta[a1][b2] * delta[b1][n] + delta[a0][b1] * delta[a1][b0] * delta[b2][n] + delta[a0][b1] * delta[a1][b2] * delta[b0][n] + delta[a0][b2] * delta[a1][b0] * delta[b1][n] + delta[a0][b2] * delta[a1][b1] * delta[b0][n]) * (PA_2)
                            + (delta[a0][a1] * delta[a2][b1] * delta[b2][n] + delta[a0][a1] * delta[a2][b2] * delta[b1][n] + delta[a0][a2] * delta[a1][b1] * delta[b2][n] + delta[a0][a2] * delta[a1][b2] * delta[b1][n] + delta[a0][b1] * delta[a1][a2] * delta[b2][n] + delta[a0][b2] * delta[a1][a2] * delta[b1][n]) * (PB_0)
                            + (delta[a0][a1] * delta[a2][b0] * delta[b2][n] + delta[a0][a1] * delta[a2][b2] * delta[b0][n] + delta[a0][a2] * delta[a1][b0] * delta[b2][n] + delta[a0][a2] * delta[a1][b2] * delta[b0][n] + delta[a0][b0] * delta[a1][a2] * delta[b2][n] + delta[a0][b2] * delta[a1][a2] * delta[b0][n]) * (PB_1)
                            + (delta[a0][a1] * delta[a2][b0] * delta[b1][n] + delta[a0][a1] * delta[a2][b1] * delta[b0][n] + delta[a0][a2] * delta[a1][b0] * delta[b1][n] + delta[a0][a2] * delta[a1][b1] * delta[b0][n] + delta[a0][b0] * delta[a1][a2] * delta[b1][n] + delta[a0][b1] * delta[a1][a2] * delta[b0][n]) * (PB_2)
                        )

                        + (-0.5) / (a_i + a_j) * (
                            (delta[b0][b1] * delta[b2][n] + delta[b0][b2] * delta[b1][n] + delta[b0][n] * delta[b1][b2]) * (PA_0 * PA_1 * PA_2)
                            + (delta[a2][b1] * delta[b2][n] + delta[a2][b2] * delta[b1][n]) * (PA_0 * PA_1 * PB_0)
                            + (delta[a2][b0] * delta[b2][n] + delta[a2][b2] * delta[b0][n]) * (PA_0 * PA_1 * PB_1)
                            + (delta[a2][b0] * delta[b1][n] + delta[a2][b1] * delta[b0][n]) * (PA_0 * PA_1 * PB_2)
                            + (delta[a1][b1] * delta[b2][n] + delta[a1][b2] * delta[b1][n]) * (PA_0 * PA_2 * PB_0)
                            + (delta[a1][b0] * delta[b2][n] + delta[a1][b2] * delta[b0][n]) * (PA_0 * PA_2 * PB_1)
                            + (delta[a1][b0] * delta[b1][n] + delta[a1][b1] * delta[b0][n]) * (PA_0 * PA_2 * PB_2)
                            + delta[a1][a2] * delta[b2][n] * (PA_0 * PB_0 * PB_1)
                            + delta[a1][a2] * delta[b1][n] * (PA_0 * PB_0 * PB_2)
                            + delta[a1][a2] * delta[b0][n] * (PA_0 * PB_1 * PB_2)
                            + (delta[a0][b1] * delta[b2][n] + delta[a0][b2] * delta[b1][n]) * (PA_1 * PA_2 * PB_0)
                            + (delta[a0][b0] * delta[b2][n] + delta[a0][b2] * delta[b0][n]) * (PA_1 * PA_2 * PB_1)
                            + (delta[a0][b0] * delta[b1][n] + delta[a0][b1] * delta[b0][n]) * (PA_1 * PA_2 * PB_2)
                            + delta[a0][a2] * delta[b2][n] * (PA_1 * PB_0 * PB_1)
                            + delta[a0][a2] * delta[b1][n] * (PA_1 * PB_0 * PB_2)
                            + delta[a0][a2] * delta[b0][n] * (PA_1 * PB_1 * PB_2)
                            + delta[a0][a1] * delta[b2][n] * (PA_2 * PB_0 * PB_1)
                            + delta[a0][a1] * delta[b1][n] * (PA_2 * PB_0 * PB_2)
                            + delta[a0][a1] * delta[b0][n] * (PA_2 * PB_1 * PB_2)
                        )

                        + (-1.0) * (
                            delta[b2][n] * (PA_0 * PA_1 * PA_2 * PB_0 * PB_1)
                            + delta[b1][n] * (PA_0 * PA_1 * PA_2 * PB_0 * PB_2)
                            + delta[b0][n] * (PA_0 * PA_1 * PA_2 * PB_1 * PB_2)
                        )

                        + 0.25 / ( (a_i + a_j) * (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[a1][a2] * delta[b0][b1] * delta[b2][n] + delta[a1][a2] * delta[b0][b2] * delta[b1][n] + delta[a1][a2] * delta[b0][n] * delta[b1][b2] + delta[a1][b0] * delta[a2][b1] * delta[b2][n] + delta[a1][b0] * delta[a2][b2] * delta[b1][n] + delta[a1][b0] * delta[a2][n] * delta[b1][b2] + delta[a1][b1] * delta[a2][b0] * delta[b2][n] + delta[a1][b1] * delta[a2][b2] * delta[b0][n] + delta[a1][b1] * delta[a2][n] * delta[b0][b2] + delta[a1][b2] * delta[a2][b0] * delta[b1][n] + delta[a1][b2] * delta[a2][b1] * delta[b0][n] + delta[a1][b2] * delta[a2][n] * delta[b0][b1] + delta[a1][n] * delta[a2][b0] * delta[b1][b2] + delta[a1][n] * delta[a2][b1] * delta[b0][b2] + delta[a1][n] * delta[a2][b2] * delta[b0][b1]) * (PA_0)
                            + (delta[a0][a2] * delta[b0][b1] * delta[b2][n] + delta[a0][a2] * delta[b0][b2] * delta[b1][n] + delta[a0][a2] * delta[b0][n] * delta[b1][b2] + delta[a0][b0] * delta[a2][b1] * delta[b2][n] + delta[a0][b0] * delta[a2][b2] * delta[b1][n] + delta[a0][b0] * delta[a2][n] * delta[b1][b2] + delta[a0][b1] * delta[a2][b0] * delta[b2][n] + delta[a0][b1] * delta[a2][b2] * delta[b0][n] + delta[a0][b1] * delta[a2][n] * delta[b0][b2] + delta[a0][b2] * delta[a2][b0] * delta[b1][n] + delta[a0][b2] * delta[a2][b1] * delta[b0][n] + delta[a0][b2] * delta[a2][n] * delta[b0][b1] + delta[a0][n] * delta[a2][b0] * delta[b1][b2] + delta[a0][n] * delta[a2][b1] * delta[b0][b2] + delta[a0][n] * delta[a2][b2] * delta[b0][b1]) * (PA_1)
                            + (delta[a0][a1] * delta[b0][b1] * delta[b2][n] + delta[a0][a1] * delta[b0][b2] * delta[b1][n] + delta[a0][a1] * delta[b0][n] * delta[b1][b2] + delta[a0][b0] * delta[a1][b1] * delta[b2][n] + delta[a0][b0] * delta[a1][b2] * delta[b1][n] + delta[a0][b0] * delta[a1][n] * delta[b1][b2] + delta[a0][b1] * delta[a1][b0] * delta[b2][n] + delta[a0][b1] * delta[a1][b2] * delta[b0][n] + delta[a0][b1] * delta[a1][n] * delta[b0][b2] + delta[a0][b2] * delta[a1][b0] * delta[b1][n] + delta[a0][b2] * delta[a1][b1] * delta[b0][n] + delta[a0][b2] * delta[a1][n] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[b0][b2] + delta[a0][n] * delta[a1][b2] * delta[b0][b1]) * (PA_2)
                            + (delta[a0][a1] * delta[a2][b1] * delta[b2][n] + delta[a0][a1] * delta[a2][b2] * delta[b1][n] + delta[a0][a1] * delta[a2][n] * delta[b1][b2] + delta[a0][a2] * delta[a1][b1] * delta[b2][n] + delta[a0][a2] * delta[a1][b2] * delta[b1][n] + delta[a0][a2] * delta[a1][n] * delta[b1][b2] + delta[a0][b1] * delta[a1][a2] * delta[b2][n] + delta[a0][b1] * delta[a1][b2] * delta[a2][n] + delta[a0][b1] * delta[a1][n] * delta[a2][b2] + delta[a0][b2] * delta[a1][a2] * delta[b1][n] + delta[a0][b2] * delta[a1][b1] * delta[a2][n] + delta[a0][b2] * delta[a1][n] * delta[a2][b1] + delta[a0][n] * delta[a1][a2] * delta[b1][b2] + delta[a0][n] * delta[a1][b1] * delta[a2][b2] + delta[a0][n] * delta[a1][b2] * delta[a2][b1]) * (PB_0)
                            + (delta[a0][a1] * delta[a2][b0] * delta[b2][n] + delta[a0][a1] * delta[a2][b2] * delta[b0][n] + delta[a0][a1] * delta[a2][n] * delta[b0][b2] + delta[a0][a2] * delta[a1][b0] * delta[b2][n] + delta[a0][a2] * delta[a1][b2] * delta[b0][n] + delta[a0][a2] * delta[a1][n] * delta[b0][b2] + delta[a0][b0] * delta[a1][a2] * delta[b2][n] + delta[a0][b0] * delta[a1][b2] * delta[a2][n] + delta[a0][b0] * delta[a1][n] * delta[a2][b2] + delta[a0][b2] * delta[a1][a2] * delta[b0][n] + delta[a0][b2] * delta[a1][b0] * delta[a2][n] + delta[a0][b2] * delta[a1][n] * delta[a2][b0] + delta[a0][n] * delta[a1][a2] * delta[b0][b2] + delta[a0][n] * delta[a1][b0] * delta[a2][b2] + delta[a0][n] * delta[a1][b2] * delta[a2][b0]) * (PB_1)
                            + (delta[a0][a1] * delta[a2][b0] * delta[b1][n] + delta[a0][a1] * delta[a2][b1] * delta[b0][n] + delta[a0][a1] * delta[a2][n] * delta[b0][b1] + delta[a0][a2] * delta[a1][b0] * delta[b1][n] + delta[a0][a2] * delta[a1][b1] * delta[b0][n] + delta[a0][a2] * delta[a1][n] * delta[b0][b1] + delta[a0][b0] * delta[a1][a2] * delta[b1][n] + delta[a0][b0] * delta[a1][b1] * delta[a2][n] + delta[a0][b0] * delta[a1][n] * delta[a2][b1] + delta[a0][b1] * delta[a1][a2] * delta[b0][n] + delta[a0][b1] * delta[a1][b0] * delta[a2][n] + delta[a0][b1] * delta[a1][n] * delta[a2][b0] + delta[a0][n] * delta[a1][a2] * delta[b0][b1] + delta[a0][n] * delta[a1][b0] * delta[a2][b1] + delta[a0][n] * delta[a1][b1] * delta[a2][b0]) * (PB_2)
                            + (delta[a0][a1] * delta[a2][b0] * delta[b1][b2] + delta[a0][a1] * delta[a2][b1] * delta[b0][b2] + delta[a0][a1] * delta[a2][b2] * delta[b0][b1] + delta[a0][a2] * delta[a1][b0] * delta[b1][b2] + delta[a0][a2] * delta[a1][b1] * delta[b0][b2] + delta[a0][a2] * delta[a1][b2] * delta[b0][b1] + delta[a0][b0] * delta[a1][a2] * delta[b1][b2] + delta[a0][b0] * delta[a1][b1] * delta[a2][b2] + delta[a0][b0] * delta[a1][b2] * delta[a2][b1] + delta[a0][b1] * delta[a1][a2] * delta[b0][b2] + delta[a0][b1] * delta[a1][b0] * delta[a2][b2] + delta[a0][b1] * delta[a1][b2] * delta[a2][b0] + delta[a0][b2] * delta[a1][a2] * delta[b0][b1] + delta[a0][b2] * delta[a1][b0] * delta[a2][b1] + delta[a0][b2] * delta[a1][b1] * delta[a2][b0]) * (PB_n)
                        )

                        + 0.5 / ( (a_i + a_j) * (a_i + a_j) ) * a_j * (
                            (delta[b0][b1] * delta[b2][n] + delta[b0][b2] * delta[b1][n] + delta[b0][n] * delta[b1][b2]) * (PA_0 * PA_1 * PA_2)
                            + (delta[a2][b1] * delta[b2][n] + delta[a2][b2] * delta[b1][n] + delta[a2][n] * delta[b1][b2]) * (PA_0 * PA_1 * PB_0)
                            + (delta[a2][b0] * delta[b2][n] + delta[a2][b2] * delta[b0][n] + delta[a2][n] * delta[b0][b2]) * (PA_0 * PA_1 * PB_1)
                            + (delta[a2][b0] * delta[b1][n] + delta[a2][b1] * delta[b0][n] + delta[a2][n] * delta[b0][b1]) * (PA_0 * PA_1 * PB_2)
                            + (delta[a2][b0] * delta[b1][b2] + delta[a2][b1] * delta[b0][b2] + delta[a2][b2] * delta[b0][b1]) * (PA_0 * PA_1 * PB_n)
                            + (delta[a1][b1] * delta[b2][n] + delta[a1][b2] * delta[b1][n] + delta[a1][n] * delta[b1][b2]) * (PA_0 * PA_2 * PB_0)
                            + (delta[a1][b0] * delta[b2][n] + delta[a1][b2] * delta[b0][n] + delta[a1][n] * delta[b0][b2]) * (PA_0 * PA_2 * PB_1)
                            + (delta[a1][b0] * delta[b1][n] + delta[a1][b1] * delta[b0][n] + delta[a1][n] * delta[b0][b1]) * (PA_0 * PA_2 * PB_2)
                            + (delta[a1][b0] * delta[b1][b2] + delta[a1][b1] * delta[b0][b2] + delta[a1][b2] * delta[b0][b1]) * (PA_0 * PA_2 * PB_n)
                            + (delta[a1][a2] * delta[b2][n] + delta[a1][b2] * delta[a2][n] + delta[a1][n] * delta[a2][b2]) * (PA_0 * PB_0 * PB_1)
                            + (delta[a1][a2] * delta[b1][n] + delta[a1][b1] * delta[a2][n] + delta[a1][n] * delta[a2][b1]) * (PA_0 * PB_0 * PB_2)
                            + (delta[a1][a2] * delta[b1][b2] + delta[a1][b1] * delta[a2][b2] + delta[a1][b2] * delta[a2][b1]) * (PA_0 * PB_0 * PB_n)
                            + (delta[a1][a2] * delta[b0][n] + delta[a1][b0] * delta[a2][n] + delta[a1][n] * delta[a2][b0]) * (PA_0 * PB_1 * PB_2)
                            + (delta[a1][a2] * delta[b0][b2] + delta[a1][b0] * delta[a2][b2] + delta[a1][b2] * delta[a2][b0]) * (PA_0 * PB_1 * PB_n)
                            + (delta[a1][a2] * delta[b0][b1] + delta[a1][b0] * delta[a2][b1] + delta[a1][b1] * delta[a2][b0]) * (PA_0 * PB_2 * PB_n)
                            + (delta[a0][b1] * delta[b2][n] + delta[a0][b2] * delta[b1][n] + delta[a0][n] * delta[b1][b2]) * (PA_1 * PA_2 * PB_0)
                            + (delta[a0][b0] * delta[b2][n] + delta[a0][b2] * delta[b0][n] + delta[a0][n] * delta[b0][b2]) * (PA_1 * PA_2 * PB_1)
                            + (delta[a0][b0] * delta[b1][n] + delta[a0][b1] * delta[b0][n] + delta[a0][n] * delta[b0][b1]) * (PA_1 * PA_2 * PB_2)
                            + (delta[a0][b0] * delta[b1][b2] + delta[a0][b1] * delta[b0][b2] + delta[a0][b2] * delta[b0][b1]) * (PA_1 * PA_2 * PB_n)
                            + (delta[a0][a2] * delta[b2][n] + delta[a0][b2] * delta[a2][n] + delta[a0][n] * delta[a2][b2]) * (PA_1 * PB_0 * PB_1)
                            + (delta[a0][a2] * delta[b1][n] + delta[a0][b1] * delta[a2][n] + delta[a0][n] * delta[a2][b1]) * (PA_1 * PB_0 * PB_2)
                            + (delta[a0][a2] * delta[b1][b2] + delta[a0][b1] * delta[a2][b2] + delta[a0][b2] * delta[a2][b1]) * (PA_1 * PB_0 * PB_n)
                            + (delta[a0][a2] * delta[b0][n] + delta[a0][b0] * delta[a2][n] + delta[a0][n] * delta[a2][b0]) * (PA_1 * PB_1 * PB_2)
                            + (delta[a0][a2] * delta[b0][b2] + delta[a0][b0] * delta[a2][b2] + delta[a0][b2] * delta[a2][b0]) * (PA_1 * PB_1 * PB_n)
                            + (delta[a0][a2] * delta[b0][b1] + delta[a0][b0] * delta[a2][b1] + delta[a0][b1] * delta[a2][b0]) * (PA_1 * PB_2 * PB_n)
                            + (delta[a0][a1] * delta[b2][n] + delta[a0][b2] * delta[a1][n] + delta[a0][n] * delta[a1][b2]) * (PA_2 * PB_0 * PB_1)
                            + (delta[a0][a1] * delta[b1][n] + delta[a0][b1] * delta[a1][n] + delta[a0][n] * delta[a1][b1]) * (PA_2 * PB_0 * PB_2)
                            + (delta[a0][a1] * delta[b1][b2] + delta[a0][b1] * delta[a1][b2] + delta[a0][b2] * delta[a1][b1]) * (PA_2 * PB_0 * PB_n)
                            + (delta[a0][a1] * delta[b0][n] + delta[a0][b0] * delta[a1][n] + delta[a0][n] * delta[a1][b0]) * (PA_2 * PB_1 * PB_2)
                            + (delta[a0][a1] * delta[b0][b2] + delta[a0][b0] * delta[a1][b2] + delta[a0][b2] * delta[a1][b0]) * (PA_2 * PB_1 * PB_n)
                            + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PA_2 * PB_2 * PB_n)
                            + (delta[a0][a1] * delta[a2][n] + delta[a0][a2] * delta[a1][n] + delta[a0][n] * delta[a1][a2]) * (PB_0 * PB_1 * PB_2)
                            + (delta[a0][a1] * delta[a2][b2] + delta[a0][a2] * delta[a1][b2] + delta[a0][b2] * delta[a1][a2]) * (PB_0 * PB_1 * PB_n)
                            + (delta[a0][a1] * delta[a2][b1] + delta[a0][a2] * delta[a1][b1] + delta[a0][b1] * delta[a1][a2]) * (PB_0 * PB_2 * PB_n)
                            + (delta[a0][a1] * delta[a2][b0] + delta[a0][a2] * delta[a1][b0] + delta[a0][b0] * delta[a1][a2]) * (PB_1 * PB_2 * PB_n)
                        )

                        + 1.0 / (a_i + a_j) * a_j * (
                            delta[b2][n] * (PA_0 * PA_1 * PA_2 * PB_0 * PB_1)
                            + delta[b1][n] * (PA_0 * PA_1 * PA_2 * PB_0 * PB_2)
                            + delta[b1][b2] * (PA_0 * PA_1 * PA_2 * PB_0 * PB_n)
                            + delta[b0][n] * (PA_0 * PA_1 * PA_2 * PB_1 * PB_2)
                            + delta[b0][b2] * (PA_0 * PA_1 * PA_2 * PB_1 * PB_n)
                            + delta[b0][b1] * (PA_0 * PA_1 * PA_2 * PB_2 * PB_n)
                            + delta[a2][n] * (PA_0 * PA_1 * PB_0 * PB_1 * PB_2)
                            + delta[a2][b2] * (PA_0 * PA_1 * PB_0 * PB_1 * PB_n)
                            + delta[a2][b1] * (PA_0 * PA_1 * PB_0 * PB_2 * PB_n)
                            + delta[a2][b0] * (PA_0 * PA_1 * PB_1 * PB_2 * PB_n)
                            + delta[a1][n] * (PA_0 * PA_2 * PB_0 * PB_1 * PB_2)
                            + delta[a1][b2] * (PA_0 * PA_2 * PB_0 * PB_1 * PB_n)
                            + delta[a1][b1] * (PA_0 * PA_2 * PB_0 * PB_2 * PB_n)
                            + delta[a1][b0] * (PA_0 * PA_2 * PB_1 * PB_2 * PB_n)
                            + delta[a1][a2] * (PA_0 * PB_0 * PB_1 * PB_2 * PB_n)
                            + delta[a0][n] * (PA_1 * PA_2 * PB_0 * PB_1 * PB_2)
                            + delta[a0][b2] * (PA_1 * PA_2 * PB_0 * PB_1 * PB_n)
                            + delta[a0][b1] * (PA_1 * PA_2 * PB_0 * PB_2 * PB_n)
                            + delta[a0][b0] * (PA_1 * PA_2 * PB_1 * PB_2 * PB_n)
                            + delta[a0][a2] * (PA_1 * PB_0 * PB_1 * PB_2 * PB_n)
                            + delta[a0][a1] * (PA_2 * PB_0 * PB_1 * PB_2 * PB_n)
                        )

                        + 2.0 * a_j * (
                            PA_0 * PA_1 * PA_2 * PB_0 * PB_1 * PB_2 * PB_n
                        )

                    )

                );

                for (const auto& i_cgto_sph_ind_coef : cart_sph_f[i_cgto])
                {
                    auto i_cgto_sph = i_cgto_sph_ind_coef.first;
                    auto i_coef_sph = i_cgto_sph_ind_coef.second;

                    for (const auto& j_cgto_sph_ind_coef : cart_sph_f[j_cgto])
                    {
                        auto j_cgto_sph = j_cgto_sph_ind_coef.first;
                        auto j_coef_sph = j_cgto_sph_ind_coef.second;

                        auto coef_sph = i_coef_sph * j_coef_sph;

                        auto Dij = D[i_cgto_sph * naos + j_cgto_sph];
                        auto Dji = D[j_cgto_sph * naos + i_cgto_sph];

                        double D_sym = ((i == j) ? Dij : (Dij + Dji));

                        double grad_i = mu_grad_i * coef_sph * D_sym;
                        double grad_j = mu_grad_j * coef_sph * D_sym;

                        mu_grad_omp[thread_id][m].row(i_atom)[n] += grad_i;
                        mu_grad_omp[thread_id][m].row(j_atom)[n] += grad_j;
                    }
                }
            }
        }
    }

